# ./pubchem_spec.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:3a3110cb379297edddaba0498f0b807a68dcb85c
# Generated 2016-02-27 00:54:15.120754 by PyXB version 1.2.4 using Python 2.7.5.final.0
# Namespace http://www.ncbi.nlm.nih.gov

from __future__ import unicode_literals
import pyxb
import pyxb.binding
import pyxb.binding.saxer
import io
import pyxb.utils.utility
import pyxb.utils.domutils
import sys
import pyxb.utils.six as _six

# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:ad096c5c-dd2f-11e5-baa3-542696d54607')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.4'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.NamespaceForURI('http://www.ncbi.nlm.nih.gov', create_if_missing=True)
Namespace.configureCategories(['typeBinding', 'elementBinding'])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement, default_namespace=default_namespace)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, _six.text_type):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# Atomic simple type: [anonymous]
class STD_ANON (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 241, 12)
    _Documentation = None
STD_ANON._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON, enum_prefix=None)
STD_ANON.unk = STD_ANON._CF_enumeration.addEnumeration(unicode_value='unk', tag='unk')
STD_ANON.gt = STD_ANON._CF_enumeration.addEnumeration(unicode_value='gt', tag='gt')
STD_ANON.lt = STD_ANON._CF_enumeration.addEnumeration(unicode_value='lt', tag='lt')
STD_ANON.tr = STD_ANON._CF_enumeration.addEnumeration(unicode_value='tr', tag='tr')
STD_ANON.tl = STD_ANON._CF_enumeration.addEnumeration(unicode_value='tl', tag='tl')
STD_ANON.circle = STD_ANON._CF_enumeration.addEnumeration(unicode_value='circle', tag='circle')
STD_ANON.other = STD_ANON._CF_enumeration.addEnumeration(unicode_value='other', tag='other')
STD_ANON._InitializeFacetMap(STD_ANON._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_ (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 329, 18)
    _Documentation = None
STD_ANON_._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_, enum_prefix=None)
STD_ANON_.true = STD_ANON_._CF_enumeration.addEnumeration(unicode_value='true', tag='true')
STD_ANON_.false = STD_ANON_._CF_enumeration.addEnumeration(unicode_value='false', tag='false')
STD_ANON_._InitializeFacetMap(STD_ANON_._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_2 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 546, 10)
    _Documentation = None
STD_ANON_2._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_2, enum_prefix=None)
STD_ANON_2.received = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='received', tag='received')
STD_ANON_2.accepted = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='accepted', tag='accepted')
STD_ANON_2.epublish = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='epublish', tag='epublish')
STD_ANON_2.ppublish = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='ppublish', tag='ppublish')
STD_ANON_2.revised = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='revised', tag='revised')
STD_ANON_2.pmc = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='pmc', tag='pmc')
STD_ANON_2.pmcr = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='pmcr', tag='pmcr')
STD_ANON_2.pubmed = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='pubmed', tag='pubmed')
STD_ANON_2.pubmedr = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='pubmedr', tag='pubmedr')
STD_ANON_2.aheadofprint = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='aheadofprint', tag='aheadofprint')
STD_ANON_2.premedline = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='premedline', tag='premedline')
STD_ANON_2.medline = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='medline', tag='medline')
STD_ANON_2.other = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='other', tag='other')
STD_ANON_2._InitializeFacetMap(STD_ANON_2._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_3 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 901, 12)
    _Documentation = None
STD_ANON_3._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_3, enum_prefix=None)
STD_ANON_3.manuscript = STD_ANON_3._CF_enumeration.addEnumeration(unicode_value='manuscript', tag='manuscript')
STD_ANON_3.letter = STD_ANON_3._CF_enumeration.addEnumeration(unicode_value='letter', tag='letter')
STD_ANON_3.thesis = STD_ANON_3._CF_enumeration.addEnumeration(unicode_value='thesis', tag='thesis')
STD_ANON_3._InitializeFacetMap(STD_ANON_3._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_4 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 943, 12)
    _Documentation = None
STD_ANON_4._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_4, enum_prefix=None)
STD_ANON_4.paper = STD_ANON_4._CF_enumeration.addEnumeration(unicode_value='paper', tag='paper')
STD_ANON_4.tape = STD_ANON_4._CF_enumeration.addEnumeration(unicode_value='tape', tag='tape')
STD_ANON_4.floppy = STD_ANON_4._CF_enumeration.addEnumeration(unicode_value='floppy', tag='floppy')
STD_ANON_4.email = STD_ANON_4._CF_enumeration.addEnumeration(unicode_value='email', tag='email')
STD_ANON_4.other = STD_ANON_4._CF_enumeration.addEnumeration(unicode_value='other', tag='other')
STD_ANON_4._InitializeFacetMap(STD_ANON_4._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_5 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1077, 12)
    _Documentation = None
STD_ANON_5._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_5, enum_prefix=None)
STD_ANON_5.primary = STD_ANON_5._CF_enumeration.addEnumeration(unicode_value='primary', tag='primary')
STD_ANON_5.secondary = STD_ANON_5._CF_enumeration.addEnumeration(unicode_value='secondary', tag='secondary')
STD_ANON_5._InitializeFacetMap(STD_ANON_5._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_6 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1089, 12)
    _Documentation = None
STD_ANON_6._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_6, enum_prefix=None)
STD_ANON_6.compiler = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='compiler', tag='compiler')
STD_ANON_6.editor = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='editor', tag='editor')
STD_ANON_6.patent_assignee = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='patent-assignee', tag='patent_assignee')
STD_ANON_6.translator = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='translator', tag='translator')
STD_ANON_6._InitializeFacetMap(STD_ANON_6._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_7 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1111, 12)
    _Documentation = None
STD_ANON_7._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_7, enum_prefix=None)
STD_ANON_7.true = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='true', tag='true')
STD_ANON_7.false = STD_ANON_7._CF_enumeration.addEnumeration(unicode_value='false', tag='false')
STD_ANON_7._InitializeFacetMap(STD_ANON_7._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_8 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1234, 12)
    _Documentation = None
STD_ANON_8._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_8, enum_prefix=None)
STD_ANON_8.submitted = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value='submitted', tag='submitted')
STD_ANON_8.in_press = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value='in-press', tag='in_press')
STD_ANON_8.other = STD_ANON_8._CF_enumeration.addEnumeration(unicode_value='other', tag='other')
STD_ANON_8._InitializeFacetMap(STD_ANON_8._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_9 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1284, 12)
    _Documentation = None
STD_ANON_9._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_9, enum_prefix=None)
STD_ANON_9.retracted = STD_ANON_9._CF_enumeration.addEnumeration(unicode_value='retracted', tag='retracted')
STD_ANON_9.notice = STD_ANON_9._CF_enumeration.addEnumeration(unicode_value='notice', tag='notice')
STD_ANON_9.in_error = STD_ANON_9._CF_enumeration.addEnumeration(unicode_value='in-error', tag='in_error')
STD_ANON_9.erratum = STD_ANON_9._CF_enumeration.addEnumeration(unicode_value='erratum', tag='erratum')
STD_ANON_9._InitializeFacetMap(STD_ANON_9._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_10 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1448, 16)
    _Documentation = None
STD_ANON_10._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_10, enum_prefix=None)
STD_ANON_10.publisher = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='publisher', tag='publisher')
STD_ANON_10.premedline = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='premedline', tag='premedline')
STD_ANON_10.medline = STD_ANON_10._CF_enumeration.addEnumeration(unicode_value='medline', tag='medline')
STD_ANON_10._InitializeFacetMap(STD_ANON_10._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_11 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1475, 12)
    _Documentation = None
STD_ANON_11._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_11, enum_prefix=None)
STD_ANON_11.true = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value='true', tag='true')
STD_ANON_11.false = STD_ANON_11._CF_enumeration.addEnumeration(unicode_value='false', tag='false')
STD_ANON_11._InitializeFacetMap(STD_ANON_11._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_12 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1505, 12)
    _Documentation = None
STD_ANON_12._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_12, enum_prefix=None)
STD_ANON_12.true = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value='true', tag='true')
STD_ANON_12.false = STD_ANON_12._CF_enumeration.addEnumeration(unicode_value='false', tag='false')
STD_ANON_12._InitializeFacetMap(STD_ANON_12._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_13 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1527, 12)
    _Documentation = None
STD_ANON_13._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_13, enum_prefix=None)
STD_ANON_13.nameonly = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='nameonly', tag='nameonly')
STD_ANON_13.cas = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='cas', tag='cas')
STD_ANON_13.ec = STD_ANON_13._CF_enumeration.addEnumeration(unicode_value='ec', tag='ec')
STD_ANON_13._InitializeFacetMap(STD_ANON_13._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_14 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1556, 12)
    _Documentation = None
STD_ANON_14._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_14, enum_prefix=None)
STD_ANON_14.ddbj = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='ddbj', tag='ddbj')
STD_ANON_14.carbbank = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='carbbank', tag='carbbank')
STD_ANON_14.embl = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='embl', tag='embl')
STD_ANON_14.hdb = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='hdb', tag='hdb')
STD_ANON_14.genbank = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='genbank', tag='genbank')
STD_ANON_14.hgml = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='hgml', tag='hgml')
STD_ANON_14.mim = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='mim', tag='mim')
STD_ANON_14.msd = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='msd', tag='msd')
STD_ANON_14.pdb = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='pdb', tag='pdb')
STD_ANON_14.pir = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='pir', tag='pir')
STD_ANON_14.prfseqdb = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='prfseqdb', tag='prfseqdb')
STD_ANON_14.psd = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='psd', tag='psd')
STD_ANON_14.swissprot = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='swissprot', tag='swissprot')
STD_ANON_14.gdb = STD_ANON_14._CF_enumeration.addEnumeration(unicode_value='gdb', tag='gdb')
STD_ANON_14._InitializeFacetMap(STD_ANON_14._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_15 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1607, 16)
    _Documentation = None
STD_ANON_15._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_15, enum_prefix=None)
STD_ANON_15.other = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value='other', tag='other')
STD_ANON_15.comment = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value='comment', tag='comment')
STD_ANON_15.erratum = STD_ANON_15._CF_enumeration.addEnumeration(unicode_value='erratum', tag='erratum')
STD_ANON_15._InitializeFacetMap(STD_ANON_15._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_16 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1647, 16)
    _Documentation = None
STD_ANON_16._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_16, enum_prefix=None)
STD_ANON_16.medline = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='medline', tag='medline')
STD_ANON_16.pubmed = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='pubmed', tag='pubmed')
STD_ANON_16.ncbigi = STD_ANON_16._CF_enumeration.addEnumeration(unicode_value='ncbigi', tag='ncbigi')
STD_ANON_16._InitializeFacetMap(STD_ANON_16._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_17 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2011, 16)
    _Documentation = None
STD_ANON_17._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_17, enum_prefix=None)
STD_ANON_17.strain = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='strain', tag='strain')
STD_ANON_17.substrain = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='substrain', tag='substrain')
STD_ANON_17.type = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='type', tag='type')
STD_ANON_17.subtype = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='subtype', tag='subtype')
STD_ANON_17.variety = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='variety', tag='variety')
STD_ANON_17.serotype = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='serotype', tag='serotype')
STD_ANON_17.serogroup = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='serogroup', tag='serogroup')
STD_ANON_17.serovar = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='serovar', tag='serovar')
STD_ANON_17.cultivar = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='cultivar', tag='cultivar')
STD_ANON_17.pathovar = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='pathovar', tag='pathovar')
STD_ANON_17.chemovar = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='chemovar', tag='chemovar')
STD_ANON_17.biovar = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='biovar', tag='biovar')
STD_ANON_17.biotype = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='biotype', tag='biotype')
STD_ANON_17.group = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='group', tag='group')
STD_ANON_17.subgroup = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='subgroup', tag='subgroup')
STD_ANON_17.isolate = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='isolate', tag='isolate')
STD_ANON_17.common = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='common', tag='common')
STD_ANON_17.acronym = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='acronym', tag='acronym')
STD_ANON_17.dosage = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='dosage', tag='dosage')
STD_ANON_17.nat_host = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='nat-host', tag='nat_host')
STD_ANON_17.sub_species = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='sub-species', tag='sub_species')
STD_ANON_17.specimen_voucher = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='specimen-voucher', tag='specimen_voucher')
STD_ANON_17.authority = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='authority', tag='authority')
STD_ANON_17.forma = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='forma', tag='forma')
STD_ANON_17.forma_specialis = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='forma-specialis', tag='forma_specialis')
STD_ANON_17.ecotype = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='ecotype', tag='ecotype')
STD_ANON_17.synonym = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='synonym', tag='synonym')
STD_ANON_17.anamorph = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='anamorph', tag='anamorph')
STD_ANON_17.teleomorph = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='teleomorph', tag='teleomorph')
STD_ANON_17.breed = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='breed', tag='breed')
STD_ANON_17.gb_acronym = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='gb-acronym', tag='gb_acronym')
STD_ANON_17.gb_anamorph = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='gb-anamorph', tag='gb_anamorph')
STD_ANON_17.gb_synonym = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='gb-synonym', tag='gb_synonym')
STD_ANON_17.old_lineage = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='old-lineage', tag='old_lineage')
STD_ANON_17.old_name = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='old-name', tag='old_name')
STD_ANON_17.other = STD_ANON_17._CF_enumeration.addEnumeration(unicode_value='other', tag='other')
STD_ANON_17._InitializeFacetMap(STD_ANON_17._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_18 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2109, 16)
    _Documentation = None
STD_ANON_18._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_18, enum_prefix=None)
STD_ANON_18.other = STD_ANON_18._CF_enumeration.addEnumeration(unicode_value='other', tag='other')
STD_ANON_18.family = STD_ANON_18._CF_enumeration.addEnumeration(unicode_value='family', tag='family')
STD_ANON_18.order = STD_ANON_18._CF_enumeration.addEnumeration(unicode_value='order', tag='order')
STD_ANON_18.class_ = STD_ANON_18._CF_enumeration.addEnumeration(unicode_value='class', tag='class_')
STD_ANON_18._InitializeFacetMap(STD_ANON_18._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_19 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2169, 16)
    _Documentation = None
STD_ANON_19._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_19, enum_prefix=None)
STD_ANON_19.unknown = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='unknown', tag='unknown')
STD_ANON_19.genomic = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='genomic', tag='genomic')
STD_ANON_19.chloroplast = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='chloroplast', tag='chloroplast')
STD_ANON_19.chromoplast = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='chromoplast', tag='chromoplast')
STD_ANON_19.kinetoplast = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='kinetoplast', tag='kinetoplast')
STD_ANON_19.mitochondrion = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='mitochondrion', tag='mitochondrion')
STD_ANON_19.plastid = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='plastid', tag='plastid')
STD_ANON_19.macronuclear = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='macronuclear', tag='macronuclear')
STD_ANON_19.extrachrom = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='extrachrom', tag='extrachrom')
STD_ANON_19.plasmid = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='plasmid', tag='plasmid')
STD_ANON_19.transposon = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='transposon', tag='transposon')
STD_ANON_19.insertion_seq = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='insertion-seq', tag='insertion_seq')
STD_ANON_19.cyanelle = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='cyanelle', tag='cyanelle')
STD_ANON_19.proviral = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='proviral', tag='proviral')
STD_ANON_19.virion = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='virion', tag='virion')
STD_ANON_19.nucleomorph = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='nucleomorph', tag='nucleomorph')
STD_ANON_19.apicoplast = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='apicoplast', tag='apicoplast')
STD_ANON_19.leucoplast = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='leucoplast', tag='leucoplast')
STD_ANON_19.proplastid = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='proplastid', tag='proplastid')
STD_ANON_19.endogenous_virus = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='endogenous-virus', tag='endogenous_virus')
STD_ANON_19.hydrogenosome = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='hydrogenosome', tag='hydrogenosome')
STD_ANON_19.chromosome = STD_ANON_19._CF_enumeration.addEnumeration(unicode_value='chromosome', tag='chromosome')
STD_ANON_19._InitializeFacetMap(STD_ANON_19._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_20 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2205, 16)
    _Documentation = None
STD_ANON_20._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_20, enum_prefix=None)
STD_ANON_20.unknown = STD_ANON_20._CF_enumeration.addEnumeration(unicode_value='unknown', tag='unknown')
STD_ANON_20.natural = STD_ANON_20._CF_enumeration.addEnumeration(unicode_value='natural', tag='natural')
STD_ANON_20.natmut = STD_ANON_20._CF_enumeration.addEnumeration(unicode_value='natmut', tag='natmut')
STD_ANON_20.mut = STD_ANON_20._CF_enumeration.addEnumeration(unicode_value='mut', tag='mut')
STD_ANON_20.artificial = STD_ANON_20._CF_enumeration.addEnumeration(unicode_value='artificial', tag='artificial')
STD_ANON_20.synthetic = STD_ANON_20._CF_enumeration.addEnumeration(unicode_value='synthetic', tag='synthetic')
STD_ANON_20.other = STD_ANON_20._CF_enumeration.addEnumeration(unicode_value='other', tag='other')
STD_ANON_20._InitializeFacetMap(STD_ANON_20._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_21 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2258, 16)
    _Documentation = None
STD_ANON_21._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_21, enum_prefix=None)
STD_ANON_21.chromosome = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='chromosome', tag='chromosome')
STD_ANON_21.map = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='map', tag='map')
STD_ANON_21.clone = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='clone', tag='clone')
STD_ANON_21.subclone = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='subclone', tag='subclone')
STD_ANON_21.haplotype = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='haplotype', tag='haplotype')
STD_ANON_21.genotype = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='genotype', tag='genotype')
STD_ANON_21.sex = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='sex', tag='sex')
STD_ANON_21.cell_line = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='cell-line', tag='cell_line')
STD_ANON_21.cell_type = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='cell-type', tag='cell_type')
STD_ANON_21.tissue_type = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='tissue-type', tag='tissue_type')
STD_ANON_21.clone_lib = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='clone-lib', tag='clone_lib')
STD_ANON_21.dev_stage = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='dev-stage', tag='dev_stage')
STD_ANON_21.frequency = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='frequency', tag='frequency')
STD_ANON_21.germline = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='germline', tag='germline')
STD_ANON_21.rearranged = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='rearranged', tag='rearranged')
STD_ANON_21.lab_host = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='lab-host', tag='lab_host')
STD_ANON_21.pop_variant = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='pop-variant', tag='pop_variant')
STD_ANON_21.tissue_lib = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='tissue-lib', tag='tissue_lib')
STD_ANON_21.plasmid_name = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='plasmid-name', tag='plasmid_name')
STD_ANON_21.transposon_name = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='transposon-name', tag='transposon_name')
STD_ANON_21.insertion_seq_name = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='insertion-seq-name', tag='insertion_seq_name')
STD_ANON_21.plastid_name = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='plastid-name', tag='plastid_name')
STD_ANON_21.country = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='country', tag='country')
STD_ANON_21.segment = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='segment', tag='segment')
STD_ANON_21.endogenous_virus_name = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='endogenous-virus-name', tag='endogenous_virus_name')
STD_ANON_21.transgenic = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='transgenic', tag='transgenic')
STD_ANON_21.environmental_sample = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='environmental-sample', tag='environmental_sample')
STD_ANON_21.isolation_source = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='isolation-source', tag='isolation_source')
STD_ANON_21.lat_lon = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='lat-lon', tag='lat_lon')
STD_ANON_21.collection_date = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='collection-date', tag='collection_date')
STD_ANON_21.collected_by = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='collected-by', tag='collected_by')
STD_ANON_21.identified_by = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='identified-by', tag='identified_by')
STD_ANON_21.fwd_primer_seq = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='fwd-primer-seq', tag='fwd_primer_seq')
STD_ANON_21.rev_primer_seq = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='rev-primer-seq', tag='rev_primer_seq')
STD_ANON_21.fwd_primer_name = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='fwd-primer-name', tag='fwd_primer_name')
STD_ANON_21.rev_primer_name = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='rev-primer-name', tag='rev_primer_name')
STD_ANON_21.metagenomic = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='metagenomic', tag='metagenomic')
STD_ANON_21.other = STD_ANON_21._CF_enumeration.addEnumeration(unicode_value='other', tag='other')
STD_ANON_21._InitializeFacetMap(STD_ANON_21._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_22 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2790, 16)
    _Documentation = None
STD_ANON_22._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_22, enum_prefix=None)
STD_ANON_22.deposited = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value='deposited', tag='deposited')
STD_ANON_22.standardized = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value='standardized', tag='standardized')
STD_ANON_22.component = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value='component', tag='component')
STD_ANON_22.neutralized = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value='neutralized', tag='neutralized')
STD_ANON_22.mixture = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value='mixture', tag='mixture')
STD_ANON_22.tautomer = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value='tautomer', tag='tautomer')
STD_ANON_22.pka_state = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value='pka-state', tag='pka_state')
STD_ANON_22.unknown = STD_ANON_22._CF_enumeration.addEnumeration(unicode_value='unknown', tag='unknown')
STD_ANON_22._InitializeFacetMap(STD_ANON_22._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_23 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2890, 16)
    _Documentation = None
STD_ANON_23._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_23, enum_prefix=None)
STD_ANON_23.absolute = STD_ANON_23._CF_enumeration.addEnumeration(unicode_value='absolute', tag='absolute')
STD_ANON_23.or_ = STD_ANON_23._CF_enumeration.addEnumeration(unicode_value='or', tag='or_')
STD_ANON_23.and_ = STD_ANON_23._CF_enumeration.addEnumeration(unicode_value='and', tag='and_')
STD_ANON_23.unknown = STD_ANON_23._CF_enumeration.addEnumeration(unicode_value='unknown', tag='unknown')
STD_ANON_23._InitializeFacetMap(STD_ANON_23._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_24 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2943, 18)
    _Documentation = None
STD_ANON_24._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_24, enum_prefix=None)
STD_ANON_24.true = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='true', tag='true')
STD_ANON_24.false = STD_ANON_24._CF_enumeration.addEnumeration(unicode_value='false', tag='false')
STD_ANON_24._InitializeFacetMap(STD_ANON_24._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_25 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2959, 24)
    _Documentation = None
STD_ANON_25._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_25, enum_prefix=None)
STD_ANON_25.true = STD_ANON_25._CF_enumeration.addEnumeration(unicode_value='true', tag='true')
STD_ANON_25.false = STD_ANON_25._CF_enumeration.addEnumeration(unicode_value='false', tag='false')
STD_ANON_25._InitializeFacetMap(STD_ANON_25._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_26 (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3013, 14)
    _Documentation = None
STD_ANON_26._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_26._CF_pattern.addPattern(pattern='([0-1])*')
STD_ANON_26._InitializeFacetMap(STD_ANON_26._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_27 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3071, 10)
    _Documentation = None
STD_ANON_27._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_27, enum_prefix=None)
STD_ANON_27.string = STD_ANON_27._CF_enumeration.addEnumeration(unicode_value='string', tag='string')
STD_ANON_27.stringlist = STD_ANON_27._CF_enumeration.addEnumeration(unicode_value='stringlist', tag='stringlist')
STD_ANON_27.int = STD_ANON_27._CF_enumeration.addEnumeration(unicode_value='int', tag='int')
STD_ANON_27.intvec = STD_ANON_27._CF_enumeration.addEnumeration(unicode_value='intvec', tag='intvec')
STD_ANON_27.uint = STD_ANON_27._CF_enumeration.addEnumeration(unicode_value='uint', tag='uint')
STD_ANON_27.uintvec = STD_ANON_27._CF_enumeration.addEnumeration(unicode_value='uintvec', tag='uintvec')
STD_ANON_27.double = STD_ANON_27._CF_enumeration.addEnumeration(unicode_value='double', tag='double')
STD_ANON_27.doublevec = STD_ANON_27._CF_enumeration.addEnumeration(unicode_value='doublevec', tag='doublevec')
STD_ANON_27.bool = STD_ANON_27._CF_enumeration.addEnumeration(unicode_value='bool', tag='bool')
STD_ANON_27.boolvec = STD_ANON_27._CF_enumeration.addEnumeration(unicode_value='boolvec', tag='boolvec')
STD_ANON_27.uint64 = STD_ANON_27._CF_enumeration.addEnumeration(unicode_value='uint64', tag='uint64')
STD_ANON_27.binary = STD_ANON_27._CF_enumeration.addEnumeration(unicode_value='binary', tag='binary')
STD_ANON_27.url = STD_ANON_27._CF_enumeration.addEnumeration(unicode_value='url', tag='url')
STD_ANON_27.unicode = STD_ANON_27._CF_enumeration.addEnumeration(unicode_value='unicode', tag='unicode')
STD_ANON_27.date = STD_ANON_27._CF_enumeration.addEnumeration(unicode_value='date', tag='date')
STD_ANON_27.fingerprint = STD_ANON_27._CF_enumeration.addEnumeration(unicode_value='fingerprint', tag='fingerprint')
STD_ANON_27.unknown = STD_ANON_27._CF_enumeration.addEnumeration(unicode_value='unknown', tag='unknown')
STD_ANON_27._InitializeFacetMap(STD_ANON_27._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_28 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3241, 10)
    _Documentation = None
STD_ANON_28._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_28, enum_prefix=None)
STD_ANON_28.twod = STD_ANON_28._CF_enumeration.addEnumeration(unicode_value='twod', tag='twod')
STD_ANON_28.threed = STD_ANON_28._CF_enumeration.addEnumeration(unicode_value='threed', tag='threed')
STD_ANON_28.submitted = STD_ANON_28._CF_enumeration.addEnumeration(unicode_value='submitted', tag='submitted')
STD_ANON_28.experimental = STD_ANON_28._CF_enumeration.addEnumeration(unicode_value='experimental', tag='experimental')
STD_ANON_28.computed = STD_ANON_28._CF_enumeration.addEnumeration(unicode_value='computed', tag='computed')
STD_ANON_28.standardized = STD_ANON_28._CF_enumeration.addEnumeration(unicode_value='standardized', tag='standardized')
STD_ANON_28.augmented = STD_ANON_28._CF_enumeration.addEnumeration(unicode_value='augmented', tag='augmented')
STD_ANON_28.aligned = STD_ANON_28._CF_enumeration.addEnumeration(unicode_value='aligned', tag='aligned')
STD_ANON_28.compact = STD_ANON_28._CF_enumeration.addEnumeration(unicode_value='compact', tag='compact')
STD_ANON_28.units_angstroms = STD_ANON_28._CF_enumeration.addEnumeration(unicode_value='units-angstroms', tag='units_angstroms')
STD_ANON_28.units_nanometers = STD_ANON_28._CF_enumeration.addEnumeration(unicode_value='units-nanometers', tag='units_nanometers')
STD_ANON_28.units_pixel = STD_ANON_28._CF_enumeration.addEnumeration(unicode_value='units-pixel', tag='units_pixel')
STD_ANON_28.units_points = STD_ANON_28._CF_enumeration.addEnumeration(unicode_value='units-points', tag='units_points')
STD_ANON_28.units_stdbonds = STD_ANON_28._CF_enumeration.addEnumeration(unicode_value='units-stdbonds', tag='units_stdbonds')
STD_ANON_28.units_unknown = STD_ANON_28._CF_enumeration.addEnumeration(unicode_value='units-unknown', tag='units_unknown')
STD_ANON_28._InitializeFacetMap(STD_ANON_28._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_29 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3333, 10)
    _Documentation = None
STD_ANON_29._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_29, enum_prefix=None)
STD_ANON_29.crossed = STD_ANON_29._CF_enumeration.addEnumeration(unicode_value='crossed', tag='crossed')
STD_ANON_29.dashed = STD_ANON_29._CF_enumeration.addEnumeration(unicode_value='dashed', tag='dashed')
STD_ANON_29.wavy = STD_ANON_29._CF_enumeration.addEnumeration(unicode_value='wavy', tag='wavy')
STD_ANON_29.dotted = STD_ANON_29._CF_enumeration.addEnumeration(unicode_value='dotted', tag='dotted')
STD_ANON_29.wedge_up = STD_ANON_29._CF_enumeration.addEnumeration(unicode_value='wedge-up', tag='wedge_up')
STD_ANON_29.wedge_down = STD_ANON_29._CF_enumeration.addEnumeration(unicode_value='wedge-down', tag='wedge_down')
STD_ANON_29.arrow = STD_ANON_29._CF_enumeration.addEnumeration(unicode_value='arrow', tag='arrow')
STD_ANON_29.aromatic = STD_ANON_29._CF_enumeration.addEnumeration(unicode_value='aromatic', tag='aromatic')
STD_ANON_29.resonance = STD_ANON_29._CF_enumeration.addEnumeration(unicode_value='resonance', tag='resonance')
STD_ANON_29.bold = STD_ANON_29._CF_enumeration.addEnumeration(unicode_value='bold', tag='bold')
STD_ANON_29.fischer = STD_ANON_29._CF_enumeration.addEnumeration(unicode_value='fischer', tag='fischer')
STD_ANON_29.closeContact = STD_ANON_29._CF_enumeration.addEnumeration(unicode_value='closeContact', tag='closeContact')
STD_ANON_29.unknown = STD_ANON_29._CF_enumeration.addEnumeration(unicode_value='unknown', tag='unknown')
STD_ANON_29._InitializeFacetMap(STD_ANON_29._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_30 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3515, 16)
    _Documentation = None
STD_ANON_30._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_30, enum_prefix=None)
STD_ANON_30.singlet = STD_ANON_30._CF_enumeration.addEnumeration(unicode_value='singlet', tag='singlet')
STD_ANON_30.doublet = STD_ANON_30._CF_enumeration.addEnumeration(unicode_value='doublet', tag='doublet')
STD_ANON_30.triplet = STD_ANON_30._CF_enumeration.addEnumeration(unicode_value='triplet', tag='triplet')
STD_ANON_30.quartet = STD_ANON_30._CF_enumeration.addEnumeration(unicode_value='quartet', tag='quartet')
STD_ANON_30.quintet = STD_ANON_30._CF_enumeration.addEnumeration(unicode_value='quintet', tag='quintet')
STD_ANON_30.hextet = STD_ANON_30._CF_enumeration.addEnumeration(unicode_value='hextet', tag='hextet')
STD_ANON_30.heptet = STD_ANON_30._CF_enumeration.addEnumeration(unicode_value='heptet', tag='heptet')
STD_ANON_30.octet = STD_ANON_30._CF_enumeration.addEnumeration(unicode_value='octet', tag='octet')
STD_ANON_30.none = STD_ANON_30._CF_enumeration.addEnumeration(unicode_value='none', tag='none')
STD_ANON_30._InitializeFacetMap(STD_ANON_30._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_31 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3554, 10)
    _Documentation = None
STD_ANON_31._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_31, enum_prefix=None)
STD_ANON_31.a = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='a', tag='a')
STD_ANON_31.d = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='d', tag='d')
STD_ANON_31.r = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='r', tag='r')
STD_ANON_31.lp = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='lp', tag='lp')
STD_ANON_31.h = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='h', tag='h')
STD_ANON_31.he = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='he', tag='he')
STD_ANON_31.li = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='li', tag='li')
STD_ANON_31.be = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='be', tag='be')
STD_ANON_31.b = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='b', tag='b')
STD_ANON_31.c = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='c', tag='c')
STD_ANON_31.n = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='n', tag='n')
STD_ANON_31.o = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='o', tag='o')
STD_ANON_31.f = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='f', tag='f')
STD_ANON_31.ne = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='ne', tag='ne')
STD_ANON_31.na = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='na', tag='na')
STD_ANON_31.mg = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='mg', tag='mg')
STD_ANON_31.al = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='al', tag='al')
STD_ANON_31.si = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='si', tag='si')
STD_ANON_31.p = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='p', tag='p')
STD_ANON_31.s = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='s', tag='s')
STD_ANON_31.cl = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='cl', tag='cl')
STD_ANON_31.ar = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='ar', tag='ar')
STD_ANON_31.k = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='k', tag='k')
STD_ANON_31.ca = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='ca', tag='ca')
STD_ANON_31.sc = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='sc', tag='sc')
STD_ANON_31.ti = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='ti', tag='ti')
STD_ANON_31.v = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='v', tag='v')
STD_ANON_31.cr = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='cr', tag='cr')
STD_ANON_31.mn = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='mn', tag='mn')
STD_ANON_31.fe = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='fe', tag='fe')
STD_ANON_31.co = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='co', tag='co')
STD_ANON_31.ni = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='ni', tag='ni')
STD_ANON_31.cu = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='cu', tag='cu')
STD_ANON_31.zn = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='zn', tag='zn')
STD_ANON_31.ga = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='ga', tag='ga')
STD_ANON_31.ge = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='ge', tag='ge')
STD_ANON_31.as_ = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='as', tag='as_')
STD_ANON_31.se = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='se', tag='se')
STD_ANON_31.br = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='br', tag='br')
STD_ANON_31.kr = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='kr', tag='kr')
STD_ANON_31.rb = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='rb', tag='rb')
STD_ANON_31.sr = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='sr', tag='sr')
STD_ANON_31.y = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='y', tag='y')
STD_ANON_31.zr = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='zr', tag='zr')
STD_ANON_31.nb = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='nb', tag='nb')
STD_ANON_31.mo = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='mo', tag='mo')
STD_ANON_31.tc = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='tc', tag='tc')
STD_ANON_31.ru = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='ru', tag='ru')
STD_ANON_31.rh = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='rh', tag='rh')
STD_ANON_31.pd = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='pd', tag='pd')
STD_ANON_31.ag = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='ag', tag='ag')
STD_ANON_31.cd = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='cd', tag='cd')
STD_ANON_31.in_ = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='in', tag='in_')
STD_ANON_31.sn = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='sn', tag='sn')
STD_ANON_31.sb = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='sb', tag='sb')
STD_ANON_31.te = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='te', tag='te')
STD_ANON_31.i = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='i', tag='i')
STD_ANON_31.xe = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='xe', tag='xe')
STD_ANON_31.cs = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='cs', tag='cs')
STD_ANON_31.ba = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='ba', tag='ba')
STD_ANON_31.la = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='la', tag='la')
STD_ANON_31.ce = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='ce', tag='ce')
STD_ANON_31.pr = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='pr', tag='pr')
STD_ANON_31.nd = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='nd', tag='nd')
STD_ANON_31.pm = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='pm', tag='pm')
STD_ANON_31.sm = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='sm', tag='sm')
STD_ANON_31.eu = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='eu', tag='eu')
STD_ANON_31.gd = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='gd', tag='gd')
STD_ANON_31.tb = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='tb', tag='tb')
STD_ANON_31.dy = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='dy', tag='dy')
STD_ANON_31.ho = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='ho', tag='ho')
STD_ANON_31.er = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='er', tag='er')
STD_ANON_31.tm = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='tm', tag='tm')
STD_ANON_31.yb = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='yb', tag='yb')
STD_ANON_31.lu = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='lu', tag='lu')
STD_ANON_31.hf = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='hf', tag='hf')
STD_ANON_31.ta = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='ta', tag='ta')
STD_ANON_31.w = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='w', tag='w')
STD_ANON_31.re = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='re', tag='re')
STD_ANON_31.os = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='os', tag='os')
STD_ANON_31.ir = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='ir', tag='ir')
STD_ANON_31.pt = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='pt', tag='pt')
STD_ANON_31.au = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='au', tag='au')
STD_ANON_31.hg = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='hg', tag='hg')
STD_ANON_31.tl = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='tl', tag='tl')
STD_ANON_31.pb = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='pb', tag='pb')
STD_ANON_31.bi = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='bi', tag='bi')
STD_ANON_31.po = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='po', tag='po')
STD_ANON_31.at = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='at', tag='at')
STD_ANON_31.rn = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='rn', tag='rn')
STD_ANON_31.fr = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='fr', tag='fr')
STD_ANON_31.ra = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='ra', tag='ra')
STD_ANON_31.ac = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='ac', tag='ac')
STD_ANON_31.th = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='th', tag='th')
STD_ANON_31.pa = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='pa', tag='pa')
STD_ANON_31.u = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='u', tag='u')
STD_ANON_31.np = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='np', tag='np')
STD_ANON_31.pu = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='pu', tag='pu')
STD_ANON_31.am = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='am', tag='am')
STD_ANON_31.cm = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='cm', tag='cm')
STD_ANON_31.bk = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='bk', tag='bk')
STD_ANON_31.cf = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='cf', tag='cf')
STD_ANON_31.es = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='es', tag='es')
STD_ANON_31.fm = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='fm', tag='fm')
STD_ANON_31.md = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='md', tag='md')
STD_ANON_31.no = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='no', tag='no')
STD_ANON_31.lr = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='lr', tag='lr')
STD_ANON_31.rf = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='rf', tag='rf')
STD_ANON_31.db = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='db', tag='db')
STD_ANON_31.sg = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='sg', tag='sg')
STD_ANON_31.bh = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='bh', tag='bh')
STD_ANON_31.hs = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='hs', tag='hs')
STD_ANON_31.mt = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='mt', tag='mt')
STD_ANON_31.ds = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='ds', tag='ds')
STD_ANON_31.rg = STD_ANON_31._CF_enumeration.addEnumeration(unicode_value='rg', tag='rg')
STD_ANON_31._InitializeFacetMap(STD_ANON_31._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_32 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3732, 10)
    _Documentation = None
STD_ANON_32._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_32, enum_prefix=None)
STD_ANON_32.single = STD_ANON_32._CF_enumeration.addEnumeration(unicode_value='single', tag='single')
STD_ANON_32.double = STD_ANON_32._CF_enumeration.addEnumeration(unicode_value='double', tag='double')
STD_ANON_32.triple = STD_ANON_32._CF_enumeration.addEnumeration(unicode_value='triple', tag='triple')
STD_ANON_32.quadruple = STD_ANON_32._CF_enumeration.addEnumeration(unicode_value='quadruple', tag='quadruple')
STD_ANON_32.dative = STD_ANON_32._CF_enumeration.addEnumeration(unicode_value='dative', tag='dative')
STD_ANON_32.complex = STD_ANON_32._CF_enumeration.addEnumeration(unicode_value='complex', tag='complex')
STD_ANON_32.ionic = STD_ANON_32._CF_enumeration.addEnumeration(unicode_value='ionic', tag='ionic')
STD_ANON_32.unknown = STD_ANON_32._CF_enumeration.addEnumeration(unicode_value='unknown', tag='unknown')
STD_ANON_32._InitializeFacetMap(STD_ANON_32._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_33 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3868, 16)
    _Documentation = None
STD_ANON_33._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_33, enum_prefix=None)
STD_ANON_33.clockwise = STD_ANON_33._CF_enumeration.addEnumeration(unicode_value='clockwise', tag='clockwise')
STD_ANON_33.counterclockwise = STD_ANON_33._CF_enumeration.addEnumeration(unicode_value='counterclockwise', tag='counterclockwise')
STD_ANON_33.any = STD_ANON_33._CF_enumeration.addEnumeration(unicode_value='any', tag='any')
STD_ANON_33.unknown = STD_ANON_33._CF_enumeration.addEnumeration(unicode_value='unknown', tag='unknown')
STD_ANON_33._InitializeFacetMap(STD_ANON_33._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_34 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3886, 16)
    _Documentation = None
STD_ANON_34._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_34, enum_prefix=None)
STD_ANON_34.tetrahedral = STD_ANON_34._CF_enumeration.addEnumeration(unicode_value='tetrahedral', tag='tetrahedral')
STD_ANON_34.cumulenic = STD_ANON_34._CF_enumeration.addEnumeration(unicode_value='cumulenic', tag='cumulenic')
STD_ANON_34.biaryl = STD_ANON_34._CF_enumeration.addEnumeration(unicode_value='biaryl', tag='biaryl')
STD_ANON_34._InitializeFacetMap(STD_ANON_34._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_35 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3951, 16)
    _Documentation = None
STD_ANON_35._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_35, enum_prefix=None)
STD_ANON_35.same = STD_ANON_35._CF_enumeration.addEnumeration(unicode_value='same', tag='same')
STD_ANON_35.opposite = STD_ANON_35._CF_enumeration.addEnumeration(unicode_value='opposite', tag='opposite')
STD_ANON_35.any = STD_ANON_35._CF_enumeration.addEnumeration(unicode_value='any', tag='any')
STD_ANON_35.unknown = STD_ANON_35._CF_enumeration.addEnumeration(unicode_value='unknown', tag='unknown')
STD_ANON_35._InitializeFacetMap(STD_ANON_35._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_36 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3969, 16)
    _Documentation = None
STD_ANON_36._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_36, enum_prefix=None)
STD_ANON_36.planar = STD_ANON_36._CF_enumeration.addEnumeration(unicode_value='planar', tag='planar')
STD_ANON_36.cumulenic = STD_ANON_36._CF_enumeration.addEnumeration(unicode_value='cumulenic', tag='cumulenic')
STD_ANON_36._InitializeFacetMap(STD_ANON_36._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_37 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4026, 16)
    _Documentation = None
STD_ANON_37._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_37, enum_prefix=None)
STD_ANON_37.u_shape = STD_ANON_37._CF_enumeration.addEnumeration(unicode_value='u-shape', tag='u_shape')
STD_ANON_37.z_shape = STD_ANON_37._CF_enumeration.addEnumeration(unicode_value='z-shape', tag='z_shape')
STD_ANON_37.x_shape = STD_ANON_37._CF_enumeration.addEnumeration(unicode_value='x-shape', tag='x_shape')
STD_ANON_37.any = STD_ANON_37._CF_enumeration.addEnumeration(unicode_value='any', tag='any')
STD_ANON_37.unknown = STD_ANON_37._CF_enumeration.addEnumeration(unicode_value='unknown', tag='unknown')
STD_ANON_37._InitializeFacetMap(STD_ANON_37._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_38 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4383, 16)
    _Documentation = None
STD_ANON_38._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_38, enum_prefix=None)
STD_ANON_38.inactive = STD_ANON_38._CF_enumeration.addEnumeration(unicode_value='inactive', tag='inactive')
STD_ANON_38.active = STD_ANON_38._CF_enumeration.addEnumeration(unicode_value='active', tag='active')
STD_ANON_38.inconclusive = STD_ANON_38._CF_enumeration.addEnumeration(unicode_value='inconclusive', tag='inconclusive')
STD_ANON_38.unspecified = STD_ANON_38._CF_enumeration.addEnumeration(unicode_value='unspecified', tag='unspecified')
STD_ANON_38.probe = STD_ANON_38._CF_enumeration.addEnumeration(unicode_value='probe', tag='probe')
STD_ANON_38._InitializeFacetMap(STD_ANON_38._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_39 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4461, 18)
    _Documentation = None
STD_ANON_39._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_39, enum_prefix=None)
STD_ANON_39.true = STD_ANON_39._CF_enumeration.addEnumeration(unicode_value='true', tag='true')
STD_ANON_39.false = STD_ANON_39._CF_enumeration.addEnumeration(unicode_value='false', tag='false')
STD_ANON_39._InitializeFacetMap(STD_ANON_39._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_40 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4588, 16)
    _Documentation = None
STD_ANON_40._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_40, enum_prefix=None)
STD_ANON_40.other = STD_ANON_40._CF_enumeration.addEnumeration(unicode_value='other', tag='other')
STD_ANON_40.screening = STD_ANON_40._CF_enumeration.addEnumeration(unicode_value='screening', tag='screening')
STD_ANON_40.confirmatory = STD_ANON_40._CF_enumeration.addEnumeration(unicode_value='confirmatory', tag='confirmatory')
STD_ANON_40.summary = STD_ANON_40._CF_enumeration.addEnumeration(unicode_value='summary', tag='summary')
STD_ANON_40._InitializeFacetMap(STD_ANON_40._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_41 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4621, 16)
    _Documentation = None
STD_ANON_41._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_41, enum_prefix=None)
STD_ANON_41.small_molecule = STD_ANON_41._CF_enumeration.addEnumeration(unicode_value='small-molecule', tag='small_molecule')
STD_ANON_41.nucleotide = STD_ANON_41._CF_enumeration.addEnumeration(unicode_value='nucleotide', tag='nucleotide')
STD_ANON_41.other = STD_ANON_41._CF_enumeration.addEnumeration(unicode_value='other', tag='other')
STD_ANON_41._InitializeFacetMap(STD_ANON_41._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_42 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4663, 16)
    _Documentation = None
STD_ANON_42._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_42, enum_prefix=None)
STD_ANON_42.mlscn = STD_ANON_42._CF_enumeration.addEnumeration(unicode_value='mlscn', tag='mlscn')
STD_ANON_42.mlpcn = STD_ANON_42._CF_enumeration.addEnumeration(unicode_value='mlpcn', tag='mlpcn')
STD_ANON_42.mlscn_ap = STD_ANON_42._CF_enumeration.addEnumeration(unicode_value='mlscn-ap', tag='mlscn_ap')
STD_ANON_42.mlpcn_ap = STD_ANON_42._CF_enumeration.addEnumeration(unicode_value='mlpcn-ap', tag='mlpcn_ap')
STD_ANON_42.journal_article = STD_ANON_42._CF_enumeration.addEnumeration(unicode_value='journal-article', tag='journal_article')
STD_ANON_42.assay_vendor = STD_ANON_42._CF_enumeration.addEnumeration(unicode_value='assay-vendor', tag='assay_vendor')
STD_ANON_42.literature_extracted = STD_ANON_42._CF_enumeration.addEnumeration(unicode_value='literature-extracted', tag='literature_extracted')
STD_ANON_42.literature_author = STD_ANON_42._CF_enumeration.addEnumeration(unicode_value='literature-author', tag='literature_author')
STD_ANON_42.literature_publisher = STD_ANON_42._CF_enumeration.addEnumeration(unicode_value='literature-publisher', tag='literature_publisher')
STD_ANON_42.rnaigi = STD_ANON_42._CF_enumeration.addEnumeration(unicode_value='rnaigi', tag='rnaigi')
STD_ANON_42.other = STD_ANON_42._CF_enumeration.addEnumeration(unicode_value='other', tag='other')
STD_ANON_42._InitializeFacetMap(STD_ANON_42._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_43 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4701, 12)
    _Documentation = None
STD_ANON_43._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_43, enum_prefix=None)
STD_ANON_43.true = STD_ANON_43._CF_enumeration.addEnumeration(unicode_value='true', tag='true')
STD_ANON_43.false = STD_ANON_43._CF_enumeration.addEnumeration(unicode_value='false', tag='false')
STD_ANON_43._InitializeFacetMap(STD_ANON_43._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_44 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4744, 12)
    _Documentation = None
STD_ANON_44._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_44, enum_prefix=None)
STD_ANON_44.true = STD_ANON_44._CF_enumeration.addEnumeration(unicode_value='true', tag='true')
STD_ANON_44.false = STD_ANON_44._CF_enumeration.addEnumeration(unicode_value='false', tag='false')
STD_ANON_44._InitializeFacetMap(STD_ANON_44._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_45 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4842, 16)
    _Documentation = None
STD_ANON_45._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_45, enum_prefix=None)
STD_ANON_45.other = STD_ANON_45._CF_enumeration.addEnumeration(unicode_value='other', tag='other')
STD_ANON_45.screening = STD_ANON_45._CF_enumeration.addEnumeration(unicode_value='screening', tag='screening')
STD_ANON_45.confirmatory = STD_ANON_45._CF_enumeration.addEnumeration(unicode_value='confirmatory', tag='confirmatory')
STD_ANON_45.summary = STD_ANON_45._CF_enumeration.addEnumeration(unicode_value='summary', tag='summary')
STD_ANON_45._InitializeFacetMap(STD_ANON_45._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_46 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4926, 16)
    _Documentation = None
STD_ANON_46._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_46, enum_prefix=None)
STD_ANON_46.experimental = STD_ANON_46._CF_enumeration.addEnumeration(unicode_value='experimental', tag='experimental')
STD_ANON_46.calculated = STD_ANON_46._CF_enumeration.addEnumeration(unicode_value='calculated', tag='calculated')
STD_ANON_46._InitializeFacetMap(STD_ANON_46._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_47 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4961, 16)
    _Documentation = None
STD_ANON_47._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_47, enum_prefix=None)
STD_ANON_47.protein = STD_ANON_47._CF_enumeration.addEnumeration(unicode_value='protein', tag='protein')
STD_ANON_47.dna = STD_ANON_47._CF_enumeration.addEnumeration(unicode_value='dna', tag='dna')
STD_ANON_47.rna = STD_ANON_47._CF_enumeration.addEnumeration(unicode_value='rna', tag='rna')
STD_ANON_47.gene = STD_ANON_47._CF_enumeration.addEnumeration(unicode_value='gene', tag='gene')
STD_ANON_47.biosystem = STD_ANON_47._CF_enumeration.addEnumeration(unicode_value='biosystem', tag='biosystem')
STD_ANON_47.other = STD_ANON_47._CF_enumeration.addEnumeration(unicode_value='other', tag='other')
STD_ANON_47._InitializeFacetMap(STD_ANON_47._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_48 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 5024, 16)
    _Documentation = None
STD_ANON_48._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_48, enum_prefix=None)
STD_ANON_48.pcit = STD_ANON_48._CF_enumeration.addEnumeration(unicode_value='pcit', tag='pcit')
STD_ANON_48.pgene = STD_ANON_48._CF_enumeration.addEnumeration(unicode_value='pgene', tag='pgene')
STD_ANON_48._InitializeFacetMap(STD_ANON_48._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_49 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 5067, 16)
    _Documentation = None
STD_ANON_49._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_49, enum_prefix=None)
STD_ANON_49.float = STD_ANON_49._CF_enumeration.addEnumeration(unicode_value='float', tag='float')
STD_ANON_49.int = STD_ANON_49._CF_enumeration.addEnumeration(unicode_value='int', tag='int')
STD_ANON_49.bool = STD_ANON_49._CF_enumeration.addEnumeration(unicode_value='bool', tag='bool')
STD_ANON_49.string = STD_ANON_49._CF_enumeration.addEnumeration(unicode_value='string', tag='string')
STD_ANON_49._InitializeFacetMap(STD_ANON_49._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_50 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 5145, 16)
    _Documentation = None
STD_ANON_50._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_50, enum_prefix=None)
STD_ANON_50.ppt = STD_ANON_50._CF_enumeration.addEnumeration(unicode_value='ppt', tag='ppt')
STD_ANON_50.ppm = STD_ANON_50._CF_enumeration.addEnumeration(unicode_value='ppm', tag='ppm')
STD_ANON_50.ppb = STD_ANON_50._CF_enumeration.addEnumeration(unicode_value='ppb', tag='ppb')
STD_ANON_50.mm = STD_ANON_50._CF_enumeration.addEnumeration(unicode_value='mm', tag='mm')
STD_ANON_50.um = STD_ANON_50._CF_enumeration.addEnumeration(unicode_value='um', tag='um')
STD_ANON_50.nm = STD_ANON_50._CF_enumeration.addEnumeration(unicode_value='nm', tag='nm')
STD_ANON_50.pm = STD_ANON_50._CF_enumeration.addEnumeration(unicode_value='pm', tag='pm')
STD_ANON_50.fm = STD_ANON_50._CF_enumeration.addEnumeration(unicode_value='fm', tag='fm')
STD_ANON_50.mgml = STD_ANON_50._CF_enumeration.addEnumeration(unicode_value='mgml', tag='mgml')
STD_ANON_50.ugml = STD_ANON_50._CF_enumeration.addEnumeration(unicode_value='ugml', tag='ugml')
STD_ANON_50.ngml = STD_ANON_50._CF_enumeration.addEnumeration(unicode_value='ngml', tag='ngml')
STD_ANON_50.pgml = STD_ANON_50._CF_enumeration.addEnumeration(unicode_value='pgml', tag='pgml')
STD_ANON_50.fgml = STD_ANON_50._CF_enumeration.addEnumeration(unicode_value='fgml', tag='fgml')
STD_ANON_50.m = STD_ANON_50._CF_enumeration.addEnumeration(unicode_value='m', tag='m')
STD_ANON_50.percent = STD_ANON_50._CF_enumeration.addEnumeration(unicode_value='percent', tag='percent')
STD_ANON_50.ratio = STD_ANON_50._CF_enumeration.addEnumeration(unicode_value='ratio', tag='ratio')
STD_ANON_50.sec = STD_ANON_50._CF_enumeration.addEnumeration(unicode_value='sec', tag='sec')
STD_ANON_50.rsec = STD_ANON_50._CF_enumeration.addEnumeration(unicode_value='rsec', tag='rsec')
STD_ANON_50.min = STD_ANON_50._CF_enumeration.addEnumeration(unicode_value='min', tag='min')
STD_ANON_50.rmin = STD_ANON_50._CF_enumeration.addEnumeration(unicode_value='rmin', tag='rmin')
STD_ANON_50.day = STD_ANON_50._CF_enumeration.addEnumeration(unicode_value='day', tag='day')
STD_ANON_50.rday = STD_ANON_50._CF_enumeration.addEnumeration(unicode_value='rday', tag='rday')
STD_ANON_50.ml_min_kg = STD_ANON_50._CF_enumeration.addEnumeration(unicode_value='ml-min-kg', tag='ml_min_kg')
STD_ANON_50.l_kg = STD_ANON_50._CF_enumeration.addEnumeration(unicode_value='l-kg', tag='l_kg')
STD_ANON_50.hr_ng_ml = STD_ANON_50._CF_enumeration.addEnumeration(unicode_value='hr-ng-ml', tag='hr_ng_ml')
STD_ANON_50.cm_sec = STD_ANON_50._CF_enumeration.addEnumeration(unicode_value='cm-sec', tag='cm_sec')
STD_ANON_50.mg_kg = STD_ANON_50._CF_enumeration.addEnumeration(unicode_value='mg-kg', tag='mg_kg')
STD_ANON_50.none = STD_ANON_50._CF_enumeration.addEnumeration(unicode_value='none', tag='none')
STD_ANON_50.unspecified = STD_ANON_50._CF_enumeration.addEnumeration(unicode_value='unspecified', tag='unspecified')
STD_ANON_50._InitializeFacetMap(STD_ANON_50._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_51 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 5223, 16)
    _Documentation = None
STD_ANON_51._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_51, enum_prefix=None)
STD_ANON_51.linear = STD_ANON_51._CF_enumeration.addEnumeration(unicode_value='linear', tag='linear')
STD_ANON_51.ln = STD_ANON_51._CF_enumeration.addEnumeration(unicode_value='ln', tag='ln')
STD_ANON_51.log = STD_ANON_51._CF_enumeration.addEnumeration(unicode_value='log', tag='log')
STD_ANON_51.reciprocal = STD_ANON_51._CF_enumeration.addEnumeration(unicode_value='reciprocal', tag='reciprocal')
STD_ANON_51.negative = STD_ANON_51._CF_enumeration.addEnumeration(unicode_value='negative', tag='negative')
STD_ANON_51.nlog = STD_ANON_51._CF_enumeration.addEnumeration(unicode_value='nlog', tag='nlog')
STD_ANON_51.nln = STD_ANON_51._CF_enumeration.addEnumeration(unicode_value='nln', tag='nln')
STD_ANON_51._InitializeFacetMap(STD_ANON_51._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_52 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 5274, 12)
    _Documentation = None
STD_ANON_52._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_52, enum_prefix=None)
STD_ANON_52.true = STD_ANON_52._CF_enumeration.addEnumeration(unicode_value='true', tag='true')
STD_ANON_52.false = STD_ANON_52._CF_enumeration.addEnumeration(unicode_value='false', tag='false')
STD_ANON_52._InitializeFacetMap(STD_ANON_52._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_53 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 5308, 16)
    _Documentation = None
STD_ANON_53._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_53, enum_prefix=None)
STD_ANON_53.pmid = STD_ANON_53._CF_enumeration.addEnumeration(unicode_value='pmid', tag='pmid')
STD_ANON_53.mmdb = STD_ANON_53._CF_enumeration.addEnumeration(unicode_value='mmdb', tag='mmdb')
STD_ANON_53.url = STD_ANON_53._CF_enumeration.addEnumeration(unicode_value='url', tag='url')
STD_ANON_53.protein_gi = STD_ANON_53._CF_enumeration.addEnumeration(unicode_value='protein-gi', tag='protein_gi')
STD_ANON_53.nucleotide_gi = STD_ANON_53._CF_enumeration.addEnumeration(unicode_value='nucleotide-gi', tag='nucleotide_gi')
STD_ANON_53.taxonomy = STD_ANON_53._CF_enumeration.addEnumeration(unicode_value='taxonomy', tag='taxonomy')
STD_ANON_53.mim = STD_ANON_53._CF_enumeration.addEnumeration(unicode_value='mim', tag='mim')
STD_ANON_53.gene = STD_ANON_53._CF_enumeration.addEnumeration(unicode_value='gene', tag='gene')
STD_ANON_53.probe = STD_ANON_53._CF_enumeration.addEnumeration(unicode_value='probe', tag='probe')
STD_ANON_53.aid = STD_ANON_53._CF_enumeration.addEnumeration(unicode_value='aid', tag='aid')
STD_ANON_53.sid = STD_ANON_53._CF_enumeration.addEnumeration(unicode_value='sid', tag='sid')
STD_ANON_53.cid = STD_ANON_53._CF_enumeration.addEnumeration(unicode_value='cid', tag='cid')
STD_ANON_53.protein_target_gi = STD_ANON_53._CF_enumeration.addEnumeration(unicode_value='protein-target-gi', tag='protein_target_gi')
STD_ANON_53.biosystems_target_id = STD_ANON_53._CF_enumeration.addEnumeration(unicode_value='biosystems-target-id', tag='biosystems_target_id')
STD_ANON_53.target_name = STD_ANON_53._CF_enumeration.addEnumeration(unicode_value='target-name', tag='target_name')
STD_ANON_53.target_descr = STD_ANON_53._CF_enumeration.addEnumeration(unicode_value='target-descr', tag='target_descr')
STD_ANON_53.target_tax_id = STD_ANON_53._CF_enumeration.addEnumeration(unicode_value='target-tax-id', tag='target_tax_id')
STD_ANON_53.gene_target_id = STD_ANON_53._CF_enumeration.addEnumeration(unicode_value='gene-target-id', tag='gene_target_id')
STD_ANON_53.dna_nucleotide_target_gi = STD_ANON_53._CF_enumeration.addEnumeration(unicode_value='dna-nucleotide-target-gi', tag='dna_nucleotide_target_gi')
STD_ANON_53.rna_nucleotide_target_gi = STD_ANON_53._CF_enumeration.addEnumeration(unicode_value='rna-nucleotide-target-gi', tag='rna_nucleotide_target_gi')
STD_ANON_53._InitializeFacetMap(STD_ANON_53._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_54 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 5376, 16)
    _Documentation = None
STD_ANON_54._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_54, enum_prefix=None)
STD_ANON_54.regular = STD_ANON_54._CF_enumeration.addEnumeration(unicode_value='regular', tag='regular')
STD_ANON_54.outcome = STD_ANON_54._CF_enumeration.addEnumeration(unicode_value='outcome', tag='outcome')
STD_ANON_54.score = STD_ANON_54._CF_enumeration.addEnumeration(unicode_value='score', tag='score')
STD_ANON_54.ac = STD_ANON_54._CF_enumeration.addEnumeration(unicode_value='ac', tag='ac')
STD_ANON_54._InitializeFacetMap(STD_ANON_54._CF_enumeration)

# Atomic simple type: [anonymous]
class STD_ANON_55 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 5413, 16)
    _Documentation = None
STD_ANON_55._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_55, enum_prefix=None)
STD_ANON_55.um = STD_ANON_55._CF_enumeration.addEnumeration(unicode_value='um', tag='um')
STD_ANON_55._InitializeFacetMap(STD_ANON_55._CF_enumeration)

# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 90, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Date_str uses Python identifier Date_str
    __Date_str = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Date_str'), 'Date_str', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_httpwww_ncbi_nlm_nih_govDate_str', False, pyxb.utils.utility.Location('./pubchem.xsd', 93, 6), )

    
    Date_str = property(__Date_str.value, __Date_str.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Date_std uses Python identifier Date_std
    __Date_std = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Date_std'), 'Date_std', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_httpwww_ncbi_nlm_nih_govDate_std', False, pyxb.utils.utility.Location('./pubchem.xsd', 95, 6), )

    
    Date_std = property(__Date_std.value, __Date_std.set, None, None)

    _ElementMap.update({
        __Date_str.name() : __Date_str,
        __Date_std.name() : __Date_std
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_ (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 96, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Date-std uses Python identifier Date_std
    __Date_std = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Date-std'), 'Date_std', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON__httpwww_ncbi_nlm_nih_govDate_std', False, pyxb.utils.utility.Location('./pubchem.xsd', 107, 0), )

    
    Date_std = property(__Date_std.value, __Date_std.set, None, None)

    _ElementMap.update({
        __Date_std.name() : __Date_std
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_2 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 108, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Date-std_year uses Python identifier Date_std_year
    __Date_std_year = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Date-std_year'), 'Date_std_year', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_2_httpwww_ncbi_nlm_nih_govDate_std_year', False, pyxb.utils.utility.Location('./pubchem.xsd', 111, 6), )

    
    Date_std_year = property(__Date_std_year.value, __Date_std_year.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Date-std_month uses Python identifier Date_std_month
    __Date_std_month = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Date-std_month'), 'Date_std_month', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_2_httpwww_ncbi_nlm_nih_govDate_std_month', False, pyxb.utils.utility.Location('./pubchem.xsd', 113, 6), )

    
    Date_std_month = property(__Date_std_month.value, __Date_std_month.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Date-std_day uses Python identifier Date_std_day
    __Date_std_day = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Date-std_day'), 'Date_std_day', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_2_httpwww_ncbi_nlm_nih_govDate_std_day', False, pyxb.utils.utility.Location('./pubchem.xsd', 115, 6), )

    
    Date_std_day = property(__Date_std_day.value, __Date_std_day.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Date-std_season uses Python identifier Date_std_season
    __Date_std_season = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Date-std_season'), 'Date_std_season', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_2_httpwww_ncbi_nlm_nih_govDate_std_season', False, pyxb.utils.utility.Location('./pubchem.xsd', 117, 6), )

    
    Date_std_season = property(__Date_std_season.value, __Date_std_season.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Date-std_hour uses Python identifier Date_std_hour
    __Date_std_hour = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Date-std_hour'), 'Date_std_hour', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_2_httpwww_ncbi_nlm_nih_govDate_std_hour', False, pyxb.utils.utility.Location('./pubchem.xsd', 119, 6), )

    
    Date_std_hour = property(__Date_std_hour.value, __Date_std_hour.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Date-std_minute uses Python identifier Date_std_minute
    __Date_std_minute = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Date-std_minute'), 'Date_std_minute', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_2_httpwww_ncbi_nlm_nih_govDate_std_minute', False, pyxb.utils.utility.Location('./pubchem.xsd', 121, 6), )

    
    Date_std_minute = property(__Date_std_minute.value, __Date_std_minute.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Date-std_second uses Python identifier Date_std_second
    __Date_std_second = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Date-std_second'), 'Date_std_second', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_2_httpwww_ncbi_nlm_nih_govDate_std_second', False, pyxb.utils.utility.Location('./pubchem.xsd', 123, 6), )

    
    Date_std_second = property(__Date_std_second.value, __Date_std_second.set, None, None)

    _ElementMap.update({
        __Date_std_year.name() : __Date_std_year,
        __Date_std_month.name() : __Date_std_month,
        __Date_std_day.name() : __Date_std_day,
        __Date_std_season.name() : __Date_std_season,
        __Date_std_hour.name() : __Date_std_hour,
        __Date_std_minute.name() : __Date_std_minute,
        __Date_std_second.name() : __Date_std_second
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_3 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 134, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Dbtag_db uses Python identifier Dbtag_db
    __Dbtag_db = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Dbtag_db'), 'Dbtag_db', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_3_httpwww_ncbi_nlm_nih_govDbtag_db', False, pyxb.utils.utility.Location('./pubchem.xsd', 137, 6), )

    
    Dbtag_db = property(__Dbtag_db.value, __Dbtag_db.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Dbtag_tag uses Python identifier Dbtag_tag
    __Dbtag_tag = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Dbtag_tag'), 'Dbtag_tag', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_3_httpwww_ncbi_nlm_nih_govDbtag_tag', False, pyxb.utils.utility.Location('./pubchem.xsd', 139, 6), )

    
    Dbtag_tag = property(__Dbtag_tag.value, __Dbtag_tag.set, None, None)

    _ElementMap.update({
        __Dbtag_db.name() : __Dbtag_db,
        __Dbtag_tag.name() : __Dbtag_tag
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_4 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 140, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Object-id uses Python identifier Object_id
    __Object_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Object-id'), 'Object_id', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_4_httpwww_ncbi_nlm_nih_govObject_id', False, pyxb.utils.utility.Location('./pubchem.xsd', 154, 0), )

    
    Object_id = property(__Object_id.value, __Object_id.set, None, None)

    _ElementMap.update({
        __Object_id.name() : __Object_id
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_5 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 155, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Object-id_id uses Python identifier Object_id_id
    __Object_id_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Object-id_id'), 'Object_id_id', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_5_httpwww_ncbi_nlm_nih_govObject_id_id', False, pyxb.utils.utility.Location('./pubchem.xsd', 157, 6), )

    
    Object_id_id = property(__Object_id_id.value, __Object_id_id.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Object-id_str uses Python identifier Object_id_str
    __Object_id_str = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Object-id_str'), 'Object_id_str', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_5_httpwww_ncbi_nlm_nih_govObject_id_str', False, pyxb.utils.utility.Location('./pubchem.xsd', 158, 6), )

    
    Object_id_str = property(__Object_id_str.value, __Object_id_str.set, None, None)

    _ElementMap.update({
        __Object_id_id.name() : __Object_id_id,
        __Object_id_str.name() : __Object_id_str
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_6 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 168, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Person-id_dbtag uses Python identifier Person_id_dbtag
    __Person_id_dbtag = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Person-id_dbtag'), 'Person_id_dbtag', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_6_httpwww_ncbi_nlm_nih_govPerson_id_dbtag', False, pyxb.utils.utility.Location('./pubchem.xsd', 171, 6), )

    
    Person_id_dbtag = property(__Person_id_dbtag.value, __Person_id_dbtag.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Person-id_name uses Python identifier Person_id_name
    __Person_id_name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Person-id_name'), 'Person_id_name', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_6_httpwww_ncbi_nlm_nih_govPerson_id_name', False, pyxb.utils.utility.Location('./pubchem.xsd', 179, 6), )

    
    Person_id_name = property(__Person_id_name.value, __Person_id_name.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Person-id_ml uses Python identifier Person_id_ml
    __Person_id_ml = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Person-id_ml'), 'Person_id_ml', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_6_httpwww_ncbi_nlm_nih_govPerson_id_ml', False, pyxb.utils.utility.Location('./pubchem.xsd', 190, 6), )

    
    Person_id_ml = property(__Person_id_ml.value, __Person_id_ml.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Person-id_str uses Python identifier Person_id_str
    __Person_id_str = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Person-id_str'), 'Person_id_str', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_6_httpwww_ncbi_nlm_nih_govPerson_id_str', False, pyxb.utils.utility.Location('./pubchem.xsd', 192, 6), )

    
    Person_id_str = property(__Person_id_str.value, __Person_id_str.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Person-id_consortium uses Python identifier Person_id_consortium
    __Person_id_consortium = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Person-id_consortium'), 'Person_id_consortium', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_6_httpwww_ncbi_nlm_nih_govPerson_id_consortium', False, pyxb.utils.utility.Location('./pubchem.xsd', 194, 6), )

    
    Person_id_consortium = property(__Person_id_consortium.value, __Person_id_consortium.set, None, None)

    _ElementMap.update({
        __Person_id_dbtag.name() : __Person_id_dbtag,
        __Person_id_name.name() : __Person_id_name,
        __Person_id_ml.name() : __Person_id_ml,
        __Person_id_str.name() : __Person_id_str,
        __Person_id_consortium.name() : __Person_id_consortium
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_7 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 172, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Dbtag uses Python identifier Dbtag
    __Dbtag = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Dbtag'), 'Dbtag', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_7_httpwww_ncbi_nlm_nih_govDbtag', False, pyxb.utils.utility.Location('./pubchem.xsd', 133, 0), )

    
    Dbtag = property(__Dbtag.value, __Dbtag.set, None, None)

    _ElementMap.update({
        __Dbtag.name() : __Dbtag
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_8 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 180, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Name-std uses Python identifier Name_std
    __Name_std = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name-std'), 'Name_std', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_8_httpwww_ncbi_nlm_nih_govName_std', False, pyxb.utils.utility.Location('./pubchem.xsd', 200, 0), )

    
    Name_std = property(__Name_std.value, __Name_std.set, None, None)

    _ElementMap.update({
        __Name_std.name() : __Name_std
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_9 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 201, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Name-std_last uses Python identifier Name_std_last
    __Name_std_last = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name-std_last'), 'Name_std_last', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_9_httpwww_ncbi_nlm_nih_govName_std_last', False, pyxb.utils.utility.Location('./pubchem.xsd', 203, 6), )

    
    Name_std_last = property(__Name_std_last.value, __Name_std_last.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Name-std_first uses Python identifier Name_std_first
    __Name_std_first = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name-std_first'), 'Name_std_first', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_9_httpwww_ncbi_nlm_nih_govName_std_first', False, pyxb.utils.utility.Location('./pubchem.xsd', 204, 6), )

    
    Name_std_first = property(__Name_std_first.value, __Name_std_first.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Name-std_middle uses Python identifier Name_std_middle
    __Name_std_middle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name-std_middle'), 'Name_std_middle', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_9_httpwww_ncbi_nlm_nih_govName_std_middle', False, pyxb.utils.utility.Location('./pubchem.xsd', 205, 6), )

    
    Name_std_middle = property(__Name_std_middle.value, __Name_std_middle.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Name-std_full uses Python identifier Name_std_full
    __Name_std_full = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name-std_full'), 'Name_std_full', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_9_httpwww_ncbi_nlm_nih_govName_std_full', False, pyxb.utils.utility.Location('./pubchem.xsd', 207, 6), )

    
    Name_std_full = property(__Name_std_full.value, __Name_std_full.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Name-std_initials uses Python identifier Name_std_initials
    __Name_std_initials = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name-std_initials'), 'Name_std_initials', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_9_httpwww_ncbi_nlm_nih_govName_std_initials', False, pyxb.utils.utility.Location('./pubchem.xsd', 209, 6), )

    
    Name_std_initials = property(__Name_std_initials.value, __Name_std_initials.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Name-std_suffix uses Python identifier Name_std_suffix
    __Name_std_suffix = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name-std_suffix'), 'Name_std_suffix', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_9_httpwww_ncbi_nlm_nih_govName_std_suffix', False, pyxb.utils.utility.Location('./pubchem.xsd', 211, 6), )

    
    Name_std_suffix = property(__Name_std_suffix.value, __Name_std_suffix.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Name-std_title uses Python identifier Name_std_title
    __Name_std_title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Name-std_title'), 'Name_std_title', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_9_httpwww_ncbi_nlm_nih_govName_std_title', False, pyxb.utils.utility.Location('./pubchem.xsd', 213, 6), )

    
    Name_std_title = property(__Name_std_title.value, __Name_std_title.set, None, None)

    _ElementMap.update({
        __Name_std_last.name() : __Name_std_last,
        __Name_std_first.name() : __Name_std_first,
        __Name_std_middle.name() : __Name_std_middle,
        __Name_std_full.name() : __Name_std_full,
        __Name_std_initials.name() : __Name_std_initials,
        __Name_std_suffix.name() : __Name_std_suffix,
        __Name_std_title.name() : __Name_std_title
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_10 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 224, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Int-fuzz_p-m uses Python identifier Int_fuzz_p_m
    __Int_fuzz_p_m = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Int-fuzz_p-m'), 'Int_fuzz_p_m', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_10_httpwww_ncbi_nlm_nih_govInt_fuzz_p_m', False, pyxb.utils.utility.Location('./pubchem.xsd', 227, 6), )

    
    Int_fuzz_p_m = property(__Int_fuzz_p_m.value, __Int_fuzz_p_m.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Int-fuzz_range uses Python identifier Int_fuzz_range
    __Int_fuzz_range = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Int-fuzz_range'), 'Int_fuzz_range', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_10_httpwww_ncbi_nlm_nih_govInt_fuzz_range', False, pyxb.utils.utility.Location('./pubchem.xsd', 228, 6), )

    
    Int_fuzz_range = property(__Int_fuzz_range.value, __Int_fuzz_range.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Int-fuzz_pct uses Python identifier Int_fuzz_pct
    __Int_fuzz_pct = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Int-fuzz_pct'), 'Int_fuzz_pct', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_10_httpwww_ncbi_nlm_nih_govInt_fuzz_pct', False, pyxb.utils.utility.Location('./pubchem.xsd', 237, 6), )

    
    Int_fuzz_pct = property(__Int_fuzz_pct.value, __Int_fuzz_pct.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Int-fuzz_lim uses Python identifier Int_fuzz_lim
    __Int_fuzz_lim = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Int-fuzz_lim'), 'Int_fuzz_lim', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_10_httpwww_ncbi_nlm_nih_govInt_fuzz_lim', False, pyxb.utils.utility.Location('./pubchem.xsd', 238, 6), )

    
    Int_fuzz_lim = property(__Int_fuzz_lim.value, __Int_fuzz_lim.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Int-fuzz_alt uses Python identifier Int_fuzz_alt
    __Int_fuzz_alt = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Int-fuzz_alt'), 'Int_fuzz_alt', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_10_httpwww_ncbi_nlm_nih_govInt_fuzz_alt', False, pyxb.utils.utility.Location('./pubchem.xsd', 265, 6), )

    
    Int_fuzz_alt = property(__Int_fuzz_alt.value, __Int_fuzz_alt.set, None, None)

    _ElementMap.update({
        __Int_fuzz_p_m.name() : __Int_fuzz_p_m,
        __Int_fuzz_range.name() : __Int_fuzz_range,
        __Int_fuzz_pct.name() : __Int_fuzz_pct,
        __Int_fuzz_lim.name() : __Int_fuzz_lim,
        __Int_fuzz_alt.name() : __Int_fuzz_alt
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_11 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 229, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Int-fuzz_range_max uses Python identifier Int_fuzz_range_max
    __Int_fuzz_range_max = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Int-fuzz_range_max'), 'Int_fuzz_range_max', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_11_httpwww_ncbi_nlm_nih_govInt_fuzz_range_max', False, pyxb.utils.utility.Location('./pubchem.xsd', 231, 12), )

    
    Int_fuzz_range_max = property(__Int_fuzz_range_max.value, __Int_fuzz_range_max.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Int-fuzz_range_min uses Python identifier Int_fuzz_range_min
    __Int_fuzz_range_min = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Int-fuzz_range_min'), 'Int_fuzz_range_min', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_11_httpwww_ncbi_nlm_nih_govInt_fuzz_range_min', False, pyxb.utils.utility.Location('./pubchem.xsd', 232, 12), )

    
    Int_fuzz_range_min = property(__Int_fuzz_range_min.value, __Int_fuzz_range_min.set, None, None)

    _ElementMap.update({
        __Int_fuzz_range_max.name() : __Int_fuzz_range_max,
        __Int_fuzz_range_min.name() : __Int_fuzz_range_min
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_12 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 266, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Int-fuzz_alt_E uses Python identifier Int_fuzz_alt_E
    __Int_fuzz_alt_E = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Int-fuzz_alt_E'), 'Int_fuzz_alt_E', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_12_httpwww_ncbi_nlm_nih_govInt_fuzz_alt_E', True, pyxb.utils.utility.Location('./pubchem.xsd', 268, 12), )

    
    Int_fuzz_alt_E = property(__Int_fuzz_alt_E.value, __Int_fuzz_alt_E.set, None, None)

    _ElementMap.update({
        __Int_fuzz_alt_E.name() : __Int_fuzz_alt_E
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_13 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 283, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}User-object_class uses Python identifier User_object_class
    __User_object_class = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'User-object_class'), 'User_object_class', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_13_httpwww_ncbi_nlm_nih_govUser_object_class', False, pyxb.utils.utility.Location('./pubchem.xsd', 286, 6), )

    
    User_object_class = property(__User_object_class.value, __User_object_class.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}User-object_type uses Python identifier User_object_type
    __User_object_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'User-object_type'), 'User_object_type', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_13_httpwww_ncbi_nlm_nih_govUser_object_type', False, pyxb.utils.utility.Location('./pubchem.xsd', 288, 6), )

    
    User_object_type = property(__User_object_type.value, __User_object_type.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}User-object_data uses Python identifier User_object_data
    __User_object_data = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'User-object_data'), 'User_object_data', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_13_httpwww_ncbi_nlm_nih_govUser_object_data', False, pyxb.utils.utility.Location('./pubchem.xsd', 296, 6), )

    
    User_object_data = property(__User_object_data.value, __User_object_data.set, None, None)

    _ElementMap.update({
        __User_object_class.name() : __User_object_class,
        __User_object_type.name() : __User_object_type,
        __User_object_data.name() : __User_object_data
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_14 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 289, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Object-id uses Python identifier Object_id
    __Object_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Object-id'), 'Object_id', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_14_httpwww_ncbi_nlm_nih_govObject_id', False, pyxb.utils.utility.Location('./pubchem.xsd', 154, 0), )

    
    Object_id = property(__Object_id.value, __Object_id.set, None, None)

    _ElementMap.update({
        __Object_id.name() : __Object_id
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_15 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 297, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}User-field uses Python identifier User_field
    __User_field = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'User-field'), 'User_field', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_15_httpwww_ncbi_nlm_nih_govUser_field', True, pyxb.utils.utility.Location('./pubchem.xsd', 307, 0), )

    
    User_field = property(__User_field.value, __User_field.set, None, None)

    _ElementMap.update({
        __User_field.name() : __User_field
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_16 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 308, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}User-field_label uses Python identifier User_field_label
    __User_field_label = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'User-field_label'), 'User_field_label', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_16_httpwww_ncbi_nlm_nih_govUser_field_label', False, pyxb.utils.utility.Location('./pubchem.xsd', 311, 6), )

    
    User_field_label = property(__User_field_label.value, __User_field_label.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}User-field_num uses Python identifier User_field_num
    __User_field_num = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'User-field_num'), 'User_field_num', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_16_httpwww_ncbi_nlm_nih_govUser_field_num', False, pyxb.utils.utility.Location('./pubchem.xsd', 319, 6), )

    
    User_field_num = property(__User_field_num.value, __User_field_num.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}User-field_data uses Python identifier User_field_data
    __User_field_data = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'User-field_data'), 'User_field_data', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_16_httpwww_ncbi_nlm_nih_govUser_field_data', False, pyxb.utils.utility.Location('./pubchem.xsd', 320, 6), )

    
    User_field_data = property(__User_field_data.value, __User_field_data.set, None, None)

    _ElementMap.update({
        __User_field_label.name() : __User_field_label,
        __User_field_num.name() : __User_field_num,
        __User_field_data.name() : __User_field_data
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_17 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 312, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Object-id uses Python identifier Object_id
    __Object_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Object-id'), 'Object_id', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_17_httpwww_ncbi_nlm_nih_govObject_id', False, pyxb.utils.utility.Location('./pubchem.xsd', 154, 0), )

    
    Object_id = property(__Object_id.value, __Object_id.set, None, None)

    _ElementMap.update({
        __Object_id.name() : __Object_id
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_18 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 321, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}User-field_data_str uses Python identifier User_field_data_str
    __User_field_data_str = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'User-field_data_str'), 'User_field_data_str', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_18_httpwww_ncbi_nlm_nih_govUser_field_data_str', False, pyxb.utils.utility.Location('./pubchem.xsd', 323, 12), )

    
    User_field_data_str = property(__User_field_data_str.value, __User_field_data_str.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}User-field_data_int uses Python identifier User_field_data_int
    __User_field_data_int = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'User-field_data_int'), 'User_field_data_int', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_18_httpwww_ncbi_nlm_nih_govUser_field_data_int', False, pyxb.utils.utility.Location('./pubchem.xsd', 324, 12), )

    
    User_field_data_int = property(__User_field_data_int.value, __User_field_data_int.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}User-field_data_real uses Python identifier User_field_data_real
    __User_field_data_real = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'User-field_data_real'), 'User_field_data_real', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_18_httpwww_ncbi_nlm_nih_govUser_field_data_real', False, pyxb.utils.utility.Location('./pubchem.xsd', 325, 12), )

    
    User_field_data_real = property(__User_field_data_real.value, __User_field_data_real.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}User-field_data_bool uses Python identifier User_field_data_bool
    __User_field_data_bool = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'User-field_data_bool'), 'User_field_data_bool', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_18_httpwww_ncbi_nlm_nih_govUser_field_data_bool', False, pyxb.utils.utility.Location('./pubchem.xsd', 326, 12), )

    
    User_field_data_bool = property(__User_field_data_bool.value, __User_field_data_bool.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}User-field_data_os uses Python identifier User_field_data_os
    __User_field_data_os = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'User-field_data_os'), 'User_field_data_os', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_18_httpwww_ncbi_nlm_nih_govUser_field_data_os', False, pyxb.utils.utility.Location('./pubchem.xsd', 338, 12), )

    
    User_field_data_os = property(__User_field_data_os.value, __User_field_data_os.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}User-field_data_object uses Python identifier User_field_data_object
    __User_field_data_object = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'User-field_data_object'), 'User_field_data_object', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_18_httpwww_ncbi_nlm_nih_govUser_field_data_object', False, pyxb.utils.utility.Location('./pubchem.xsd', 340, 12), )

    
    User_field_data_object = property(__User_field_data_object.value, __User_field_data_object.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}User-field_data_strs uses Python identifier User_field_data_strs
    __User_field_data_strs = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'User-field_data_strs'), 'User_field_data_strs', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_18_httpwww_ncbi_nlm_nih_govUser_field_data_strs', False, pyxb.utils.utility.Location('./pubchem.xsd', 347, 12), )

    
    User_field_data_strs = property(__User_field_data_strs.value, __User_field_data_strs.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}User-field_data_ints uses Python identifier User_field_data_ints
    __User_field_data_ints = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'User-field_data_ints'), 'User_field_data_ints', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_18_httpwww_ncbi_nlm_nih_govUser_field_data_ints', False, pyxb.utils.utility.Location('./pubchem.xsd', 354, 12), )

    
    User_field_data_ints = property(__User_field_data_ints.value, __User_field_data_ints.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}User-field_data_reals uses Python identifier User_field_data_reals
    __User_field_data_reals = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'User-field_data_reals'), 'User_field_data_reals', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_18_httpwww_ncbi_nlm_nih_govUser_field_data_reals', False, pyxb.utils.utility.Location('./pubchem.xsd', 361, 12), )

    
    User_field_data_reals = property(__User_field_data_reals.value, __User_field_data_reals.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}User-field_data_oss uses Python identifier User_field_data_oss
    __User_field_data_oss = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'User-field_data_oss'), 'User_field_data_oss', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_18_httpwww_ncbi_nlm_nih_govUser_field_data_oss', False, pyxb.utils.utility.Location('./pubchem.xsd', 368, 12), )

    
    User_field_data_oss = property(__User_field_data_oss.value, __User_field_data_oss.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}User-field_data_fields uses Python identifier User_field_data_fields
    __User_field_data_fields = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'User-field_data_fields'), 'User_field_data_fields', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_18_httpwww_ncbi_nlm_nih_govUser_field_data_fields', False, pyxb.utils.utility.Location('./pubchem.xsd', 375, 12), )

    
    User_field_data_fields = property(__User_field_data_fields.value, __User_field_data_fields.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}User-field_data_objects uses Python identifier User_field_data_objects
    __User_field_data_objects = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'User-field_data_objects'), 'User_field_data_objects', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_18_httpwww_ncbi_nlm_nih_govUser_field_data_objects', False, pyxb.utils.utility.Location('./pubchem.xsd', 382, 12), )

    
    User_field_data_objects = property(__User_field_data_objects.value, __User_field_data_objects.set, None, None)

    _ElementMap.update({
        __User_field_data_str.name() : __User_field_data_str,
        __User_field_data_int.name() : __User_field_data_int,
        __User_field_data_real.name() : __User_field_data_real,
        __User_field_data_bool.name() : __User_field_data_bool,
        __User_field_data_os.name() : __User_field_data_os,
        __User_field_data_object.name() : __User_field_data_object,
        __User_field_data_strs.name() : __User_field_data_strs,
        __User_field_data_ints.name() : __User_field_data_ints,
        __User_field_data_reals.name() : __User_field_data_reals,
        __User_field_data_oss.name() : __User_field_data_oss,
        __User_field_data_fields.name() : __User_field_data_fields,
        __User_field_data_objects.name() : __User_field_data_objects
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_19 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 341, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}User-object uses Python identifier User_object
    __User_object = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'User-object'), 'User_object', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_19_httpwww_ncbi_nlm_nih_govUser_object', False, pyxb.utils.utility.Location('./pubchem.xsd', 282, 0), )

    
    User_object = property(__User_object.value, __User_object.set, None, None)

    _ElementMap.update({
        __User_object.name() : __User_object
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_20 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 348, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}User-field_data_strs_E uses Python identifier User_field_data_strs_E
    __User_field_data_strs_E = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'User-field_data_strs_E'), 'User_field_data_strs_E', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_20_httpwww_ncbi_nlm_nih_govUser_field_data_strs_E', True, pyxb.utils.utility.Location('./pubchem.xsd', 350, 18), )

    
    User_field_data_strs_E = property(__User_field_data_strs_E.value, __User_field_data_strs_E.set, None, None)

    _ElementMap.update({
        __User_field_data_strs_E.name() : __User_field_data_strs_E
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_21 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 355, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}User-field_data_ints_E uses Python identifier User_field_data_ints_E
    __User_field_data_ints_E = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'User-field_data_ints_E'), 'User_field_data_ints_E', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_21_httpwww_ncbi_nlm_nih_govUser_field_data_ints_E', True, pyxb.utils.utility.Location('./pubchem.xsd', 357, 18), )

    
    User_field_data_ints_E = property(__User_field_data_ints_E.value, __User_field_data_ints_E.set, None, None)

    _ElementMap.update({
        __User_field_data_ints_E.name() : __User_field_data_ints_E
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_22 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 362, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}User-field_data_reals_E uses Python identifier User_field_data_reals_E
    __User_field_data_reals_E = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'User-field_data_reals_E'), 'User_field_data_reals_E', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_22_httpwww_ncbi_nlm_nih_govUser_field_data_reals_E', True, pyxb.utils.utility.Location('./pubchem.xsd', 364, 18), )

    
    User_field_data_reals_E = property(__User_field_data_reals_E.value, __User_field_data_reals_E.set, None, None)

    _ElementMap.update({
        __User_field_data_reals_E.name() : __User_field_data_reals_E
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_23 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 369, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}User-field_data_oss_E uses Python identifier User_field_data_oss_E
    __User_field_data_oss_E = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'User-field_data_oss_E'), 'User_field_data_oss_E', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_23_httpwww_ncbi_nlm_nih_govUser_field_data_oss_E', True, pyxb.utils.utility.Location('./pubchem.xsd', 371, 18), )

    
    User_field_data_oss_E = property(__User_field_data_oss_E.value, __User_field_data_oss_E.set, None, None)

    _ElementMap.update({
        __User_field_data_oss_E.name() : __User_field_data_oss_E
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_24 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 376, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}User-field uses Python identifier User_field
    __User_field = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'User-field'), 'User_field', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_24_httpwww_ncbi_nlm_nih_govUser_field', True, pyxb.utils.utility.Location('./pubchem.xsd', 307, 0), )

    
    User_field = property(__User_field.value, __User_field.set, None, None)

    _ElementMap.update({
        __User_field.name() : __User_field
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_25 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 383, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}User-object uses Python identifier User_object
    __User_object = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'User-object'), 'User_object', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_25_httpwww_ncbi_nlm_nih_govUser_object', True, pyxb.utils.utility.Location('./pubchem.xsd', 282, 0), )

    
    User_object = property(__User_object.value, __User_object.set, None, None)

    _ElementMap.update({
        __User_object.name() : __User_object
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_26 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 444, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}ArticleId_pubmed uses Python identifier ArticleId_pubmed
    __ArticleId_pubmed = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ArticleId_pubmed'), 'ArticleId_pubmed', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_26_httpwww_ncbi_nlm_nih_govArticleId_pubmed', False, pyxb.utils.utility.Location('./pubchem.xsd', 447, 6), )

    
    ArticleId_pubmed = property(__ArticleId_pubmed.value, __ArticleId_pubmed.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}ArticleId_medline uses Python identifier ArticleId_medline
    __ArticleId_medline = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ArticleId_medline'), 'ArticleId_medline', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_26_httpwww_ncbi_nlm_nih_govArticleId_medline', False, pyxb.utils.utility.Location('./pubchem.xsd', 454, 6), )

    
    ArticleId_medline = property(__ArticleId_medline.value, __ArticleId_medline.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}ArticleId_doi uses Python identifier ArticleId_doi
    __ArticleId_doi = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ArticleId_doi'), 'ArticleId_doi', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_26_httpwww_ncbi_nlm_nih_govArticleId_doi', False, pyxb.utils.utility.Location('./pubchem.xsd', 461, 6), )

    
    ArticleId_doi = property(__ArticleId_doi.value, __ArticleId_doi.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}ArticleId_pii uses Python identifier ArticleId_pii
    __ArticleId_pii = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ArticleId_pii'), 'ArticleId_pii', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_26_httpwww_ncbi_nlm_nih_govArticleId_pii', False, pyxb.utils.utility.Location('./pubchem.xsd', 468, 6), )

    
    ArticleId_pii = property(__ArticleId_pii.value, __ArticleId_pii.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}ArticleId_pmcid uses Python identifier ArticleId_pmcid
    __ArticleId_pmcid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ArticleId_pmcid'), 'ArticleId_pmcid', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_26_httpwww_ncbi_nlm_nih_govArticleId_pmcid', False, pyxb.utils.utility.Location('./pubchem.xsd', 475, 6), )

    
    ArticleId_pmcid = property(__ArticleId_pmcid.value, __ArticleId_pmcid.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}ArticleId_pmcpid uses Python identifier ArticleId_pmcpid
    __ArticleId_pmcpid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ArticleId_pmcpid'), 'ArticleId_pmcpid', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_26_httpwww_ncbi_nlm_nih_govArticleId_pmcpid', False, pyxb.utils.utility.Location('./pubchem.xsd', 482, 6), )

    
    ArticleId_pmcpid = property(__ArticleId_pmcpid.value, __ArticleId_pmcpid.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}ArticleId_pmpid uses Python identifier ArticleId_pmpid
    __ArticleId_pmpid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ArticleId_pmpid'), 'ArticleId_pmpid', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_26_httpwww_ncbi_nlm_nih_govArticleId_pmpid', False, pyxb.utils.utility.Location('./pubchem.xsd', 489, 6), )

    
    ArticleId_pmpid = property(__ArticleId_pmpid.value, __ArticleId_pmpid.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}ArticleId_other uses Python identifier ArticleId_other
    __ArticleId_other = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ArticleId_other'), 'ArticleId_other', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_26_httpwww_ncbi_nlm_nih_govArticleId_other', False, pyxb.utils.utility.Location('./pubchem.xsd', 497, 6), )

    
    ArticleId_other = property(__ArticleId_other.value, __ArticleId_other.set, None, None)

    _ElementMap.update({
        __ArticleId_pubmed.name() : __ArticleId_pubmed,
        __ArticleId_medline.name() : __ArticleId_medline,
        __ArticleId_doi.name() : __ArticleId_doi,
        __ArticleId_pii.name() : __ArticleId_pii,
        __ArticleId_pmcid.name() : __ArticleId_pmcid,
        __ArticleId_pmcpid.name() : __ArticleId_pmcpid,
        __ArticleId_pmpid.name() : __ArticleId_pmpid,
        __ArticleId_other.name() : __ArticleId_other
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_27 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 448, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PubMedId uses Python identifier PubMedId
    __PubMedId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PubMedId'), 'PubMedId', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_27_httpwww_ncbi_nlm_nih_govPubMedId', False, pyxb.utils.utility.Location('./pubchem.xsd', 509, 0), )

    
    PubMedId = property(__PubMedId.value, __PubMedId.set, None, None)

    _ElementMap.update({
        __PubMedId.name() : __PubMedId
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_28 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 455, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}MedlineUID uses Python identifier MedlineUID
    __MedlineUID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MedlineUID'), 'MedlineUID', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_28_httpwww_ncbi_nlm_nih_govMedlineUID', False, pyxb.utils.utility.Location('./pubchem.xsd', 512, 0), )

    
    MedlineUID = property(__MedlineUID.value, __MedlineUID.set, None, None)

    _ElementMap.update({
        __MedlineUID.name() : __MedlineUID
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_29 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 462, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}DOI uses Python identifier DOI
    __DOI = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DOI'), 'DOI', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_29_httpwww_ncbi_nlm_nih_govDOI', False, pyxb.utils.utility.Location('./pubchem.xsd', 515, 0), )

    
    DOI = property(__DOI.value, __DOI.set, None, None)

    _ElementMap.update({
        __DOI.name() : __DOI
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_30 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 469, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PII uses Python identifier PII
    __PII = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PII'), 'PII', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_30_httpwww_ncbi_nlm_nih_govPII', False, pyxb.utils.utility.Location('./pubchem.xsd', 518, 0), )

    
    PII = property(__PII.value, __PII.set, None, None)

    _ElementMap.update({
        __PII.name() : __PII
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_31 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 476, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PmcID uses Python identifier PmcID
    __PmcID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PmcID'), 'PmcID', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_31_httpwww_ncbi_nlm_nih_govPmcID', False, pyxb.utils.utility.Location('./pubchem.xsd', 521, 0), )

    
    PmcID = property(__PmcID.value, __PmcID.set, None, None)

    _ElementMap.update({
        __PmcID.name() : __PmcID
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_32 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 483, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PmcPid uses Python identifier PmcPid
    __PmcPid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PmcPid'), 'PmcPid', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_32_httpwww_ncbi_nlm_nih_govPmcPid', False, pyxb.utils.utility.Location('./pubchem.xsd', 524, 0), )

    
    PmcPid = property(__PmcPid.value, __PmcPid.set, None, None)

    _ElementMap.update({
        __PmcPid.name() : __PmcPid
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_33 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 490, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PmPid uses Python identifier PmPid
    __PmPid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PmPid'), 'PmPid', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_33_httpwww_ncbi_nlm_nih_govPmPid', False, pyxb.utils.utility.Location('./pubchem.xsd', 527, 0), )

    
    PmPid = property(__PmPid.value, __PmPid.set, None, None)

    _ElementMap.update({
        __PmPid.name() : __PmPid
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_34 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 498, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Dbtag uses Python identifier Dbtag
    __Dbtag = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Dbtag'), 'Dbtag', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_34_httpwww_ncbi_nlm_nih_govDbtag', False, pyxb.utils.utility.Location('./pubchem.xsd', 133, 0), )

    
    Dbtag = property(__Dbtag.value, __Dbtag.set, None, None)

    _ElementMap.update({
        __Dbtag.name() : __Dbtag
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_35 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 530, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}ArticleId uses Python identifier ArticleId
    __ArticleId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ArticleId'), 'ArticleId', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_35_httpwww_ncbi_nlm_nih_govArticleId', True, pyxb.utils.utility.Location('./pubchem.xsd', 443, 0), )

    
    ArticleId = property(__ArticleId.value, __ArticleId.set, None, None)

    _ElementMap.update({
        __ArticleId.name() : __ArticleId
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_36 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 585, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PubStatusDate_pubstatus uses Python identifier PubStatusDate_pubstatus
    __PubStatusDate_pubstatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PubStatusDate_pubstatus'), 'PubStatusDate_pubstatus', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_36_httpwww_ncbi_nlm_nih_govPubStatusDate_pubstatus', False, pyxb.utils.utility.Location('./pubchem.xsd', 587, 6), )

    
    PubStatusDate_pubstatus = property(__PubStatusDate_pubstatus.value, __PubStatusDate_pubstatus.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PubStatusDate_date uses Python identifier PubStatusDate_date
    __PubStatusDate_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PubStatusDate_date'), 'PubStatusDate_date', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_36_httpwww_ncbi_nlm_nih_govPubStatusDate_date', False, pyxb.utils.utility.Location('./pubchem.xsd', 595, 6), )

    
    PubStatusDate_date = property(__PubStatusDate_date.value, __PubStatusDate_date.set, None, None)

    _ElementMap.update({
        __PubStatusDate_pubstatus.name() : __PubStatusDate_pubstatus,
        __PubStatusDate_date.name() : __PubStatusDate_date
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_37 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 588, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PubStatus uses Python identifier PubStatus
    __PubStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PubStatus'), 'PubStatus', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_37_httpwww_ncbi_nlm_nih_govPubStatus', False, pyxb.utils.utility.Location('./pubchem.xsd', 541, 0), )

    
    PubStatus = property(__PubStatus.value, __PubStatus.set, None, None)

    _ElementMap.update({
        __PubStatus.name() : __PubStatus
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_38 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 596, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Date uses Python identifier Date
    __Date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Date'), 'Date', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_38_httpwww_ncbi_nlm_nih_govDate', False, pyxb.utils.utility.Location('./pubchem.xsd', 89, 0), )

    
    Date = property(__Date.value, __Date.set, None, None)

    _ElementMap.update({
        __Date.name() : __Date
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_39 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 607, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PubStatusDate uses Python identifier PubStatusDate
    __PubStatusDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PubStatusDate'), 'PubStatusDate', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_39_httpwww_ncbi_nlm_nih_govPubStatusDate', True, pyxb.utils.utility.Location('./pubchem.xsd', 584, 0), )

    
    PubStatusDate = property(__PubStatusDate.value, __PubStatusDate.set, None, None)

    _ElementMap.update({
        __PubStatusDate.name() : __PubStatusDate
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_40 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 619, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-art_title uses Python identifier Cit_art_title
    __Cit_art_title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-art_title'), 'Cit_art_title', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_40_httpwww_ncbi_nlm_nih_govCit_art_title', False, pyxb.utils.utility.Location('./pubchem.xsd', 622, 6), )

    
    Cit_art_title = property(__Cit_art_title.value, __Cit_art_title.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-art_authors uses Python identifier Cit_art_authors
    __Cit_art_authors = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-art_authors'), 'Cit_art_authors', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_40_httpwww_ncbi_nlm_nih_govCit_art_authors', False, pyxb.utils.utility.Location('./pubchem.xsd', 630, 6), )

    
    Cit_art_authors = property(__Cit_art_authors.value, __Cit_art_authors.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-art_from uses Python identifier Cit_art_from
    __Cit_art_from = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-art_from'), 'Cit_art_from', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_40_httpwww_ncbi_nlm_nih_govCit_art_from', False, pyxb.utils.utility.Location('./pubchem.xsd', 637, 6), )

    
    Cit_art_from = property(__Cit_art_from.value, __Cit_art_from.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-art_ids uses Python identifier Cit_art_ids
    __Cit_art_ids = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-art_ids'), 'Cit_art_ids', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_40_httpwww_ncbi_nlm_nih_govCit_art_ids', False, pyxb.utils.utility.Location('./pubchem.xsd', 665, 6), )

    
    Cit_art_ids = property(__Cit_art_ids.value, __Cit_art_ids.set, None, None)

    _ElementMap.update({
        __Cit_art_title.name() : __Cit_art_title,
        __Cit_art_authors.name() : __Cit_art_authors,
        __Cit_art_from.name() : __Cit_art_from,
        __Cit_art_ids.name() : __Cit_art_ids
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_41 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 623, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Title uses Python identifier Title
    __Title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Title'), 'Title', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_41_httpwww_ncbi_nlm_nih_govTitle', False, pyxb.utils.utility.Location('./pubchem.xsd', 1162, 0), )

    
    Title = property(__Title.value, __Title.set, None, None)

    _ElementMap.update({
        __Title.name() : __Title
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_42 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 631, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Auth-list uses Python identifier Auth_list
    __Auth_list = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Auth-list'), 'Auth_list', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_42_httpwww_ncbi_nlm_nih_govAuth_list', False, pyxb.utils.utility.Location('./pubchem.xsd', 1018, 0), )

    
    Auth_list = property(__Auth_list.value, __Auth_list.set, None, None)

    _ElementMap.update({
        __Auth_list.name() : __Auth_list
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_43 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 638, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-art_from_journal uses Python identifier Cit_art_from_journal
    __Cit_art_from_journal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-art_from_journal'), 'Cit_art_from_journal', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_43_httpwww_ncbi_nlm_nih_govCit_art_from_journal', False, pyxb.utils.utility.Location('./pubchem.xsd', 640, 12), )

    
    Cit_art_from_journal = property(__Cit_art_from_journal.value, __Cit_art_from_journal.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-art_from_book uses Python identifier Cit_art_from_book
    __Cit_art_from_book = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-art_from_book'), 'Cit_art_from_book', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_43_httpwww_ncbi_nlm_nih_govCit_art_from_book', False, pyxb.utils.utility.Location('./pubchem.xsd', 647, 12), )

    
    Cit_art_from_book = property(__Cit_art_from_book.value, __Cit_art_from_book.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-art_from_proc uses Python identifier Cit_art_from_proc
    __Cit_art_from_proc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-art_from_proc'), 'Cit_art_from_proc', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_43_httpwww_ncbi_nlm_nih_govCit_art_from_proc', False, pyxb.utils.utility.Location('./pubchem.xsd', 654, 12), )

    
    Cit_art_from_proc = property(__Cit_art_from_proc.value, __Cit_art_from_proc.set, None, None)

    _ElementMap.update({
        __Cit_art_from_journal.name() : __Cit_art_from_journal,
        __Cit_art_from_book.name() : __Cit_art_from_book,
        __Cit_art_from_proc.name() : __Cit_art_from_proc
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_44 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 641, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-jour uses Python identifier Cit_jour
    __Cit_jour = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-jour'), 'Cit_jour', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_44_httpwww_ncbi_nlm_nih_govCit_jour', False, pyxb.utils.utility.Location('./pubchem.xsd', 677, 0), )

    
    Cit_jour = property(__Cit_jour.value, __Cit_jour.set, None, None)

    _ElementMap.update({
        __Cit_jour.name() : __Cit_jour
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_45 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 648, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-book uses Python identifier Cit_book
    __Cit_book = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-book'), 'Cit_book', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_45_httpwww_ncbi_nlm_nih_govCit_book', False, pyxb.utils.utility.Location('./pubchem.xsd', 700, 0), )

    
    Cit_book = property(__Cit_book.value, __Cit_book.set, None, None)

    _ElementMap.update({
        __Cit_book.name() : __Cit_book
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_46 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 655, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-proc uses Python identifier Cit_proc
    __Cit_proc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-proc'), 'Cit_proc', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_46_httpwww_ncbi_nlm_nih_govCit_proc', False, pyxb.utils.utility.Location('./pubchem.xsd', 739, 0), )

    
    Cit_proc = property(__Cit_proc.value, __Cit_proc.set, None, None)

    _ElementMap.update({
        __Cit_proc.name() : __Cit_proc
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_47 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 666, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}ArticleIdSet uses Python identifier ArticleIdSet
    __ArticleIdSet = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ArticleIdSet'), 'ArticleIdSet', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_47_httpwww_ncbi_nlm_nih_govArticleIdSet', False, pyxb.utils.utility.Location('./pubchem.xsd', 529, 0), )

    
    ArticleIdSet = property(__ArticleIdSet.value, __ArticleIdSet.set, None, None)

    _ElementMap.update({
        __ArticleIdSet.name() : __ArticleIdSet
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_48 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 678, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-jour_title uses Python identifier Cit_jour_title
    __Cit_jour_title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-jour_title'), 'Cit_jour_title', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_48_httpwww_ncbi_nlm_nih_govCit_jour_title', False, pyxb.utils.utility.Location('./pubchem.xsd', 681, 6), )

    
    Cit_jour_title = property(__Cit_jour_title.value, __Cit_jour_title.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-jour_imp uses Python identifier Cit_jour_imp
    __Cit_jour_imp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-jour_imp'), 'Cit_jour_imp', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_48_httpwww_ncbi_nlm_nih_govCit_jour_imp', False, pyxb.utils.utility.Location('./pubchem.xsd', 688, 6), )

    
    Cit_jour_imp = property(__Cit_jour_imp.value, __Cit_jour_imp.set, None, None)

    _ElementMap.update({
        __Cit_jour_title.name() : __Cit_jour_title,
        __Cit_jour_imp.name() : __Cit_jour_imp
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_49 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 682, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Title uses Python identifier Title
    __Title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Title'), 'Title', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_49_httpwww_ncbi_nlm_nih_govTitle', False, pyxb.utils.utility.Location('./pubchem.xsd', 1162, 0), )

    
    Title = property(__Title.value, __Title.set, None, None)

    _ElementMap.update({
        __Title.name() : __Title
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_50 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 689, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Imprint uses Python identifier Imprint
    __Imprint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Imprint'), 'Imprint', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_50_httpwww_ncbi_nlm_nih_govImprint', False, pyxb.utils.utility.Location('./pubchem.xsd', 1196, 0), )

    
    Imprint = property(__Imprint.value, __Imprint.set, None, None)

    _ElementMap.update({
        __Imprint.name() : __Imprint
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_51 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 701, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-book_title uses Python identifier Cit_book_title
    __Cit_book_title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-book_title'), 'Cit_book_title', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_51_httpwww_ncbi_nlm_nih_govCit_book_title', False, pyxb.utils.utility.Location('./pubchem.xsd', 704, 6), )

    
    Cit_book_title = property(__Cit_book_title.value, __Cit_book_title.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-book_coll uses Python identifier Cit_book_coll
    __Cit_book_coll = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-book_coll'), 'Cit_book_coll', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_51_httpwww_ncbi_nlm_nih_govCit_book_coll', False, pyxb.utils.utility.Location('./pubchem.xsd', 712, 6), )

    
    Cit_book_coll = property(__Cit_book_coll.value, __Cit_book_coll.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-book_authors uses Python identifier Cit_book_authors
    __Cit_book_authors = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-book_authors'), 'Cit_book_authors', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_51_httpwww_ncbi_nlm_nih_govCit_book_authors', False, pyxb.utils.utility.Location('./pubchem.xsd', 720, 6), )

    
    Cit_book_authors = property(__Cit_book_authors.value, __Cit_book_authors.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-book_imp uses Python identifier Cit_book_imp
    __Cit_book_imp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-book_imp'), 'Cit_book_imp', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_51_httpwww_ncbi_nlm_nih_govCit_book_imp', False, pyxb.utils.utility.Location('./pubchem.xsd', 727, 6), )

    
    Cit_book_imp = property(__Cit_book_imp.value, __Cit_book_imp.set, None, None)

    _ElementMap.update({
        __Cit_book_title.name() : __Cit_book_title,
        __Cit_book_coll.name() : __Cit_book_coll,
        __Cit_book_authors.name() : __Cit_book_authors,
        __Cit_book_imp.name() : __Cit_book_imp
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_52 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 705, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Title uses Python identifier Title
    __Title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Title'), 'Title', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_52_httpwww_ncbi_nlm_nih_govTitle', False, pyxb.utils.utility.Location('./pubchem.xsd', 1162, 0), )

    
    Title = property(__Title.value, __Title.set, None, None)

    _ElementMap.update({
        __Title.name() : __Title
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_53 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 713, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Title uses Python identifier Title
    __Title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Title'), 'Title', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_53_httpwww_ncbi_nlm_nih_govTitle', False, pyxb.utils.utility.Location('./pubchem.xsd', 1162, 0), )

    
    Title = property(__Title.value, __Title.set, None, None)

    _ElementMap.update({
        __Title.name() : __Title
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_54 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 721, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Auth-list uses Python identifier Auth_list
    __Auth_list = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Auth-list'), 'Auth_list', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_54_httpwww_ncbi_nlm_nih_govAuth_list', False, pyxb.utils.utility.Location('./pubchem.xsd', 1018, 0), )

    
    Auth_list = property(__Auth_list.value, __Auth_list.set, None, None)

    _ElementMap.update({
        __Auth_list.name() : __Auth_list
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_55 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 728, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Imprint uses Python identifier Imprint
    __Imprint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Imprint'), 'Imprint', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_55_httpwww_ncbi_nlm_nih_govImprint', False, pyxb.utils.utility.Location('./pubchem.xsd', 1196, 0), )

    
    Imprint = property(__Imprint.value, __Imprint.set, None, None)

    _ElementMap.update({
        __Imprint.name() : __Imprint
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_56 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 740, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-proc_book uses Python identifier Cit_proc_book
    __Cit_proc_book = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-proc_book'), 'Cit_proc_book', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_56_httpwww_ncbi_nlm_nih_govCit_proc_book', False, pyxb.utils.utility.Location('./pubchem.xsd', 743, 6), )

    
    Cit_proc_book = property(__Cit_proc_book.value, __Cit_proc_book.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-proc_meet uses Python identifier Cit_proc_meet
    __Cit_proc_meet = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-proc_meet'), 'Cit_proc_meet', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_56_httpwww_ncbi_nlm_nih_govCit_proc_meet', False, pyxb.utils.utility.Location('./pubchem.xsd', 751, 6), )

    
    Cit_proc_meet = property(__Cit_proc_meet.value, __Cit_proc_meet.set, None, None)

    _ElementMap.update({
        __Cit_proc_book.name() : __Cit_proc_book,
        __Cit_proc_meet.name() : __Cit_proc_meet
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_57 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 744, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-book uses Python identifier Cit_book
    __Cit_book = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-book'), 'Cit_book', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_57_httpwww_ncbi_nlm_nih_govCit_book', False, pyxb.utils.utility.Location('./pubchem.xsd', 700, 0), )

    
    Cit_book = property(__Cit_book.value, __Cit_book.set, None, None)

    _ElementMap.update({
        __Cit_book.name() : __Cit_book
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_58 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 752, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Meeting uses Python identifier Meeting
    __Meeting = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Meeting'), 'Meeting', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_58_httpwww_ncbi_nlm_nih_govMeeting', False, pyxb.utils.utility.Location('./pubchem.xsd', 1307, 0), )

    
    Meeting = property(__Meeting.value, __Meeting.set, None, None)

    _ElementMap.update({
        __Meeting.name() : __Meeting
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_59 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 770, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-pat_title uses Python identifier Cit_pat_title
    __Cit_pat_title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-pat_title'), 'Cit_pat_title', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_59_httpwww_ncbi_nlm_nih_govCit_pat_title', False, pyxb.utils.utility.Location('./pubchem.xsd', 772, 6), )

    
    Cit_pat_title = property(__Cit_pat_title.value, __Cit_pat_title.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-pat_authors uses Python identifier Cit_pat_authors
    __Cit_pat_authors = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-pat_authors'), 'Cit_pat_authors', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_59_httpwww_ncbi_nlm_nih_govCit_pat_authors', False, pyxb.utils.utility.Location('./pubchem.xsd', 774, 6), )

    
    Cit_pat_authors = property(__Cit_pat_authors.value, __Cit_pat_authors.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-pat_country uses Python identifier Cit_pat_country
    __Cit_pat_country = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-pat_country'), 'Cit_pat_country', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_59_httpwww_ncbi_nlm_nih_govCit_pat_country', False, pyxb.utils.utility.Location('./pubchem.xsd', 782, 6), )

    
    Cit_pat_country = property(__Cit_pat_country.value, __Cit_pat_country.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-pat_doc-type uses Python identifier Cit_pat_doc_type
    __Cit_pat_doc_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-pat_doc-type'), 'Cit_pat_doc_type', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_59_httpwww_ncbi_nlm_nih_govCit_pat_doc_type', False, pyxb.utils.utility.Location('./pubchem.xsd', 784, 6), )

    
    Cit_pat_doc_type = property(__Cit_pat_doc_type.value, __Cit_pat_doc_type.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-pat_number uses Python identifier Cit_pat_number
    __Cit_pat_number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-pat_number'), 'Cit_pat_number', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_59_httpwww_ncbi_nlm_nih_govCit_pat_number', False, pyxb.utils.utility.Location('./pubchem.xsd', 786, 6), )

    
    Cit_pat_number = property(__Cit_pat_number.value, __Cit_pat_number.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-pat_date-issue uses Python identifier Cit_pat_date_issue
    __Cit_pat_date_issue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-pat_date-issue'), 'Cit_pat_date_issue', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_59_httpwww_ncbi_nlm_nih_govCit_pat_date_issue', False, pyxb.utils.utility.Location('./pubchem.xsd', 788, 6), )

    
    Cit_pat_date_issue = property(__Cit_pat_date_issue.value, __Cit_pat_date_issue.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-pat_class uses Python identifier Cit_pat_class
    __Cit_pat_class = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-pat_class'), 'Cit_pat_class', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_59_httpwww_ncbi_nlm_nih_govCit_pat_class', False, pyxb.utils.utility.Location('./pubchem.xsd', 796, 6), )

    
    Cit_pat_class = property(__Cit_pat_class.value, __Cit_pat_class.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-pat_app-number uses Python identifier Cit_pat_app_number
    __Cit_pat_app_number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-pat_app-number'), 'Cit_pat_app_number', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_59_httpwww_ncbi_nlm_nih_govCit_pat_app_number', False, pyxb.utils.utility.Location('./pubchem.xsd', 804, 6), )

    
    Cit_pat_app_number = property(__Cit_pat_app_number.value, __Cit_pat_app_number.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-pat_app-date uses Python identifier Cit_pat_app_date
    __Cit_pat_app_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-pat_app-date'), 'Cit_pat_app_date', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_59_httpwww_ncbi_nlm_nih_govCit_pat_app_date', False, pyxb.utils.utility.Location('./pubchem.xsd', 806, 6), )

    
    Cit_pat_app_date = property(__Cit_pat_app_date.value, __Cit_pat_app_date.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-pat_applicants uses Python identifier Cit_pat_applicants
    __Cit_pat_applicants = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-pat_applicants'), 'Cit_pat_applicants', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_59_httpwww_ncbi_nlm_nih_govCit_pat_applicants', False, pyxb.utils.utility.Location('./pubchem.xsd', 814, 6), )

    
    Cit_pat_applicants = property(__Cit_pat_applicants.value, __Cit_pat_applicants.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-pat_assignees uses Python identifier Cit_pat_assignees
    __Cit_pat_assignees = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-pat_assignees'), 'Cit_pat_assignees', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_59_httpwww_ncbi_nlm_nih_govCit_pat_assignees', False, pyxb.utils.utility.Location('./pubchem.xsd', 822, 6), )

    
    Cit_pat_assignees = property(__Cit_pat_assignees.value, __Cit_pat_assignees.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-pat_priority uses Python identifier Cit_pat_priority
    __Cit_pat_priority = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-pat_priority'), 'Cit_pat_priority', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_59_httpwww_ncbi_nlm_nih_govCit_pat_priority', False, pyxb.utils.utility.Location('./pubchem.xsd', 830, 6), )

    
    Cit_pat_priority = property(__Cit_pat_priority.value, __Cit_pat_priority.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-pat_abstract uses Python identifier Cit_pat_abstract
    __Cit_pat_abstract = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-pat_abstract'), 'Cit_pat_abstract', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_59_httpwww_ncbi_nlm_nih_govCit_pat_abstract', False, pyxb.utils.utility.Location('./pubchem.xsd', 838, 6), )

    
    Cit_pat_abstract = property(__Cit_pat_abstract.value, __Cit_pat_abstract.set, None, None)

    _ElementMap.update({
        __Cit_pat_title.name() : __Cit_pat_title,
        __Cit_pat_authors.name() : __Cit_pat_authors,
        __Cit_pat_country.name() : __Cit_pat_country,
        __Cit_pat_doc_type.name() : __Cit_pat_doc_type,
        __Cit_pat_number.name() : __Cit_pat_number,
        __Cit_pat_date_issue.name() : __Cit_pat_date_issue,
        __Cit_pat_class.name() : __Cit_pat_class,
        __Cit_pat_app_number.name() : __Cit_pat_app_number,
        __Cit_pat_app_date.name() : __Cit_pat_app_date,
        __Cit_pat_applicants.name() : __Cit_pat_applicants,
        __Cit_pat_assignees.name() : __Cit_pat_assignees,
        __Cit_pat_priority.name() : __Cit_pat_priority,
        __Cit_pat_abstract.name() : __Cit_pat_abstract
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_60 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 775, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Auth-list uses Python identifier Auth_list
    __Auth_list = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Auth-list'), 'Auth_list', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_60_httpwww_ncbi_nlm_nih_govAuth_list', False, pyxb.utils.utility.Location('./pubchem.xsd', 1018, 0), )

    
    Auth_list = property(__Auth_list.value, __Auth_list.set, None, None)

    _ElementMap.update({
        __Auth_list.name() : __Auth_list
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_61 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 789, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Date uses Python identifier Date
    __Date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Date'), 'Date', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_61_httpwww_ncbi_nlm_nih_govDate', False, pyxb.utils.utility.Location('./pubchem.xsd', 89, 0), )

    
    Date = property(__Date.value, __Date.set, None, None)

    _ElementMap.update({
        __Date.name() : __Date
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_62 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 797, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-pat_class_E uses Python identifier Cit_pat_class_E
    __Cit_pat_class_E = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-pat_class_E'), 'Cit_pat_class_E', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_62_httpwww_ncbi_nlm_nih_govCit_pat_class_E', True, pyxb.utils.utility.Location('./pubchem.xsd', 799, 12), )

    
    Cit_pat_class_E = property(__Cit_pat_class_E.value, __Cit_pat_class_E.set, None, None)

    _ElementMap.update({
        __Cit_pat_class_E.name() : __Cit_pat_class_E
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_63 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 807, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Date uses Python identifier Date
    __Date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Date'), 'Date', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_63_httpwww_ncbi_nlm_nih_govDate', False, pyxb.utils.utility.Location('./pubchem.xsd', 89, 0), )

    
    Date = property(__Date.value, __Date.set, None, None)

    _ElementMap.update({
        __Date.name() : __Date
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_64 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 815, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Auth-list uses Python identifier Auth_list
    __Auth_list = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Auth-list'), 'Auth_list', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_64_httpwww_ncbi_nlm_nih_govAuth_list', False, pyxb.utils.utility.Location('./pubchem.xsd', 1018, 0), )

    
    Auth_list = property(__Auth_list.value, __Auth_list.set, None, None)

    _ElementMap.update({
        __Auth_list.name() : __Auth_list
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_65 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 823, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Auth-list uses Python identifier Auth_list
    __Auth_list = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Auth-list'), 'Auth_list', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_65_httpwww_ncbi_nlm_nih_govAuth_list', False, pyxb.utils.utility.Location('./pubchem.xsd', 1018, 0), )

    
    Auth_list = property(__Auth_list.value, __Auth_list.set, None, None)

    _ElementMap.update({
        __Auth_list.name() : __Auth_list
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_66 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 831, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Patent-priority uses Python identifier Patent_priority
    __Patent_priority = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Patent-priority'), 'Patent_priority', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_66_httpwww_ncbi_nlm_nih_govPatent_priority', True, pyxb.utils.utility.Location('./pubchem.xsd', 843, 0), )

    
    Patent_priority = property(__Patent_priority.value, __Patent_priority.set, None, None)

    _ElementMap.update({
        __Patent_priority.name() : __Patent_priority
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_67 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 844, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Patent-priority_country uses Python identifier Patent_priority_country
    __Patent_priority_country = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Patent-priority_country'), 'Patent_priority_country', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_67_httpwww_ncbi_nlm_nih_govPatent_priority_country', False, pyxb.utils.utility.Location('./pubchem.xsd', 847, 6), )

    
    Patent_priority_country = property(__Patent_priority_country.value, __Patent_priority_country.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Patent-priority_number uses Python identifier Patent_priority_number
    __Patent_priority_number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Patent-priority_number'), 'Patent_priority_number', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_67_httpwww_ncbi_nlm_nih_govPatent_priority_number', False, pyxb.utils.utility.Location('./pubchem.xsd', 849, 6), )

    
    Patent_priority_number = property(__Patent_priority_number.value, __Patent_priority_number.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Patent-priority_date uses Python identifier Patent_priority_date
    __Patent_priority_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Patent-priority_date'), 'Patent_priority_date', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_67_httpwww_ncbi_nlm_nih_govPatent_priority_date', False, pyxb.utils.utility.Location('./pubchem.xsd', 851, 6), )

    
    Patent_priority_date = property(__Patent_priority_date.value, __Patent_priority_date.set, None, None)

    _ElementMap.update({
        __Patent_priority_country.name() : __Patent_priority_country,
        __Patent_priority_number.name() : __Patent_priority_number,
        __Patent_priority_date.name() : __Patent_priority_date
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_68 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 852, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Date uses Python identifier Date
    __Date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Date'), 'Date', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_68_httpwww_ncbi_nlm_nih_govDate', False, pyxb.utils.utility.Location('./pubchem.xsd', 89, 0), )

    
    Date = property(__Date.value, __Date.set, None, None)

    _ElementMap.update({
        __Date.name() : __Date
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_69 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 864, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Id-pat_country uses Python identifier Id_pat_country
    __Id_pat_country = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Id-pat_country'), 'Id_pat_country', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_69_httpwww_ncbi_nlm_nih_govId_pat_country', False, pyxb.utils.utility.Location('./pubchem.xsd', 867, 6), )

    
    Id_pat_country = property(__Id_pat_country.value, __Id_pat_country.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Id-pat_id uses Python identifier Id_pat_id
    __Id_pat_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Id-pat_id'), 'Id_pat_id', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_69_httpwww_ncbi_nlm_nih_govId_pat_id', False, pyxb.utils.utility.Location('./pubchem.xsd', 868, 6), )

    
    Id_pat_id = property(__Id_pat_id.value, __Id_pat_id.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Id-pat_doc-type uses Python identifier Id_pat_doc_type
    __Id_pat_doc_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Id-pat_doc-type'), 'Id_pat_doc_type', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_69_httpwww_ncbi_nlm_nih_govId_pat_doc_type', False, pyxb.utils.utility.Location('./pubchem.xsd', 879, 6), )

    
    Id_pat_doc_type = property(__Id_pat_doc_type.value, __Id_pat_doc_type.set, None, None)

    _ElementMap.update({
        __Id_pat_country.name() : __Id_pat_country,
        __Id_pat_id.name() : __Id_pat_id,
        __Id_pat_doc_type.name() : __Id_pat_doc_type
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_70 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 869, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Id-pat_id_number uses Python identifier Id_pat_id_number
    __Id_pat_id_number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Id-pat_id_number'), 'Id_pat_id_number', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_70_httpwww_ncbi_nlm_nih_govId_pat_id_number', False, pyxb.utils.utility.Location('./pubchem.xsd', 872, 12), )

    
    Id_pat_id_number = property(__Id_pat_id_number.value, __Id_pat_id_number.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Id-pat_id_app-number uses Python identifier Id_pat_id_app_number
    __Id_pat_id_app_number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Id-pat_id_app-number'), 'Id_pat_id_app_number', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_70_httpwww_ncbi_nlm_nih_govId_pat_id_app_number', False, pyxb.utils.utility.Location('./pubchem.xsd', 874, 12), )

    
    Id_pat_id_app_number = property(__Id_pat_id_app_number.value, __Id_pat_id_app_number.set, None, None)

    _ElementMap.update({
        __Id_pat_id_number.name() : __Id_pat_id_number,
        __Id_pat_id_app_number.name() : __Id_pat_id_app_number
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_71 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 886, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-let_cit uses Python identifier Cit_let_cit
    __Cit_let_cit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-let_cit'), 'Cit_let_cit', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_71_httpwww_ncbi_nlm_nih_govCit_let_cit', False, pyxb.utils.utility.Location('./pubchem.xsd', 889, 6), )

    
    Cit_let_cit = property(__Cit_let_cit.value, __Cit_let_cit.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-let_man-id uses Python identifier Cit_let_man_id
    __Cit_let_man_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-let_man-id'), 'Cit_let_man_id', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_71_httpwww_ncbi_nlm_nih_govCit_let_man_id', False, pyxb.utils.utility.Location('./pubchem.xsd', 897, 6), )

    
    Cit_let_man_id = property(__Cit_let_man_id.value, __Cit_let_man_id.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-let_type uses Python identifier Cit_let_type
    __Cit_let_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-let_type'), 'Cit_let_type', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_71_httpwww_ncbi_nlm_nih_govCit_let_type', False, pyxb.utils.utility.Location('./pubchem.xsd', 898, 6), )

    
    Cit_let_type = property(__Cit_let_type.value, __Cit_let_type.set, None, None)

    _ElementMap.update({
        __Cit_let_cit.name() : __Cit_let_cit,
        __Cit_let_man_id.name() : __Cit_let_man_id,
        __Cit_let_type.name() : __Cit_let_type
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_72 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 890, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-book uses Python identifier Cit_book
    __Cit_book = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-book'), 'Cit_book', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_72_httpwww_ncbi_nlm_nih_govCit_book', False, pyxb.utils.utility.Location('./pubchem.xsd', 700, 0), )

    
    Cit_book = property(__Cit_book.value, __Cit_book.set, None, None)

    _ElementMap.update({
        __Cit_book.name() : __Cit_book
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_73 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 922, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-sub_authors uses Python identifier Cit_sub_authors
    __Cit_sub_authors = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-sub_authors'), 'Cit_sub_authors', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_73_httpwww_ncbi_nlm_nih_govCit_sub_authors', False, pyxb.utils.utility.Location('./pubchem.xsd', 925, 6), )

    
    Cit_sub_authors = property(__Cit_sub_authors.value, __Cit_sub_authors.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-sub_imp uses Python identifier Cit_sub_imp
    __Cit_sub_imp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-sub_imp'), 'Cit_sub_imp', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_73_httpwww_ncbi_nlm_nih_govCit_sub_imp', False, pyxb.utils.utility.Location('./pubchem.xsd', 933, 6), )

    
    Cit_sub_imp = property(__Cit_sub_imp.value, __Cit_sub_imp.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-sub_medium uses Python identifier Cit_sub_medium
    __Cit_sub_medium = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-sub_medium'), 'Cit_sub_medium', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_73_httpwww_ncbi_nlm_nih_govCit_sub_medium', False, pyxb.utils.utility.Location('./pubchem.xsd', 940, 6), )

    
    Cit_sub_medium = property(__Cit_sub_medium.value, __Cit_sub_medium.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-sub_date uses Python identifier Cit_sub_date
    __Cit_sub_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-sub_date'), 'Cit_sub_date', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_73_httpwww_ncbi_nlm_nih_govCit_sub_date', False, pyxb.utils.utility.Location('./pubchem.xsd', 956, 6), )

    
    Cit_sub_date = property(__Cit_sub_date.value, __Cit_sub_date.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-sub_descr uses Python identifier Cit_sub_descr
    __Cit_sub_descr = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-sub_descr'), 'Cit_sub_descr', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_73_httpwww_ncbi_nlm_nih_govCit_sub_descr', False, pyxb.utils.utility.Location('./pubchem.xsd', 964, 6), )

    
    Cit_sub_descr = property(__Cit_sub_descr.value, __Cit_sub_descr.set, None, None)

    _ElementMap.update({
        __Cit_sub_authors.name() : __Cit_sub_authors,
        __Cit_sub_imp.name() : __Cit_sub_imp,
        __Cit_sub_medium.name() : __Cit_sub_medium,
        __Cit_sub_date.name() : __Cit_sub_date,
        __Cit_sub_descr.name() : __Cit_sub_descr
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_74 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 926, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Auth-list uses Python identifier Auth_list
    __Auth_list = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Auth-list'), 'Auth_list', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_74_httpwww_ncbi_nlm_nih_govAuth_list', False, pyxb.utils.utility.Location('./pubchem.xsd', 1018, 0), )

    
    Auth_list = property(__Auth_list.value, __Auth_list.set, None, None)

    _ElementMap.update({
        __Auth_list.name() : __Auth_list
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_75 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 934, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Imprint uses Python identifier Imprint
    __Imprint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Imprint'), 'Imprint', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_75_httpwww_ncbi_nlm_nih_govImprint', False, pyxb.utils.utility.Location('./pubchem.xsd', 1196, 0), )

    
    Imprint = property(__Imprint.value, __Imprint.set, None, None)

    _ElementMap.update({
        __Imprint.name() : __Imprint
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_76 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 957, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Date uses Python identifier Date
    __Date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Date'), 'Date', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_76_httpwww_ncbi_nlm_nih_govDate', False, pyxb.utils.utility.Location('./pubchem.xsd', 89, 0), )

    
    Date = property(__Date.value, __Date.set, None, None)

    _ElementMap.update({
        __Date.name() : __Date
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_77 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 971, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-gen_cit uses Python identifier Cit_gen_cit
    __Cit_gen_cit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-gen_cit'), 'Cit_gen_cit', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_77_httpwww_ncbi_nlm_nih_govCit_gen_cit', False, pyxb.utils.utility.Location('./pubchem.xsd', 974, 6), )

    
    Cit_gen_cit = property(__Cit_gen_cit.value, __Cit_gen_cit.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-gen_authors uses Python identifier Cit_gen_authors
    __Cit_gen_authors = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-gen_authors'), 'Cit_gen_authors', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_77_httpwww_ncbi_nlm_nih_govCit_gen_authors', False, pyxb.utils.utility.Location('./pubchem.xsd', 975, 6), )

    
    Cit_gen_authors = property(__Cit_gen_authors.value, __Cit_gen_authors.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-gen_muid uses Python identifier Cit_gen_muid
    __Cit_gen_muid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-gen_muid'), 'Cit_gen_muid', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_77_httpwww_ncbi_nlm_nih_govCit_gen_muid', False, pyxb.utils.utility.Location('./pubchem.xsd', 983, 6), )

    
    Cit_gen_muid = property(__Cit_gen_muid.value, __Cit_gen_muid.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-gen_journal uses Python identifier Cit_gen_journal
    __Cit_gen_journal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-gen_journal'), 'Cit_gen_journal', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_77_httpwww_ncbi_nlm_nih_govCit_gen_journal', False, pyxb.utils.utility.Location('./pubchem.xsd', 984, 6), )

    
    Cit_gen_journal = property(__Cit_gen_journal.value, __Cit_gen_journal.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-gen_volume uses Python identifier Cit_gen_volume
    __Cit_gen_volume = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-gen_volume'), 'Cit_gen_volume', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_77_httpwww_ncbi_nlm_nih_govCit_gen_volume', False, pyxb.utils.utility.Location('./pubchem.xsd', 991, 6), )

    
    Cit_gen_volume = property(__Cit_gen_volume.value, __Cit_gen_volume.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-gen_issue uses Python identifier Cit_gen_issue
    __Cit_gen_issue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-gen_issue'), 'Cit_gen_issue', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_77_httpwww_ncbi_nlm_nih_govCit_gen_issue', False, pyxb.utils.utility.Location('./pubchem.xsd', 992, 6), )

    
    Cit_gen_issue = property(__Cit_gen_issue.value, __Cit_gen_issue.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-gen_pages uses Python identifier Cit_gen_pages
    __Cit_gen_pages = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-gen_pages'), 'Cit_gen_pages', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_77_httpwww_ncbi_nlm_nih_govCit_gen_pages', False, pyxb.utils.utility.Location('./pubchem.xsd', 993, 6), )

    
    Cit_gen_pages = property(__Cit_gen_pages.value, __Cit_gen_pages.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-gen_date uses Python identifier Cit_gen_date
    __Cit_gen_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-gen_date'), 'Cit_gen_date', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_77_httpwww_ncbi_nlm_nih_govCit_gen_date', False, pyxb.utils.utility.Location('./pubchem.xsd', 994, 6), )

    
    Cit_gen_date = property(__Cit_gen_date.value, __Cit_gen_date.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-gen_serial-number uses Python identifier Cit_gen_serial_number
    __Cit_gen_serial_number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-gen_serial-number'), 'Cit_gen_serial_number', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_77_httpwww_ncbi_nlm_nih_govCit_gen_serial_number', False, pyxb.utils.utility.Location('./pubchem.xsd', 1002, 6), )

    
    Cit_gen_serial_number = property(__Cit_gen_serial_number.value, __Cit_gen_serial_number.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-gen_title uses Python identifier Cit_gen_title
    __Cit_gen_title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-gen_title'), 'Cit_gen_title', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_77_httpwww_ncbi_nlm_nih_govCit_gen_title', False, pyxb.utils.utility.Location('./pubchem.xsd', 1004, 6), )

    
    Cit_gen_title = property(__Cit_gen_title.value, __Cit_gen_title.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-gen_pmid uses Python identifier Cit_gen_pmid
    __Cit_gen_pmid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-gen_pmid'), 'Cit_gen_pmid', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_77_httpwww_ncbi_nlm_nih_govCit_gen_pmid', False, pyxb.utils.utility.Location('./pubchem.xsd', 1006, 6), )

    
    Cit_gen_pmid = property(__Cit_gen_pmid.value, __Cit_gen_pmid.set, None, None)

    _ElementMap.update({
        __Cit_gen_cit.name() : __Cit_gen_cit,
        __Cit_gen_authors.name() : __Cit_gen_authors,
        __Cit_gen_muid.name() : __Cit_gen_muid,
        __Cit_gen_journal.name() : __Cit_gen_journal,
        __Cit_gen_volume.name() : __Cit_gen_volume,
        __Cit_gen_issue.name() : __Cit_gen_issue,
        __Cit_gen_pages.name() : __Cit_gen_pages,
        __Cit_gen_date.name() : __Cit_gen_date,
        __Cit_gen_serial_number.name() : __Cit_gen_serial_number,
        __Cit_gen_title.name() : __Cit_gen_title,
        __Cit_gen_pmid.name() : __Cit_gen_pmid
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_78 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 976, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Auth-list uses Python identifier Auth_list
    __Auth_list = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Auth-list'), 'Auth_list', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_78_httpwww_ncbi_nlm_nih_govAuth_list', False, pyxb.utils.utility.Location('./pubchem.xsd', 1018, 0), )

    
    Auth_list = property(__Auth_list.value, __Auth_list.set, None, None)

    _ElementMap.update({
        __Auth_list.name() : __Auth_list
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_79 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 985, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Title uses Python identifier Title
    __Title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Title'), 'Title', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_79_httpwww_ncbi_nlm_nih_govTitle', False, pyxb.utils.utility.Location('./pubchem.xsd', 1162, 0), )

    
    Title = property(__Title.value, __Title.set, None, None)

    _ElementMap.update({
        __Title.name() : __Title
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_80 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 995, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Date uses Python identifier Date
    __Date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Date'), 'Date', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_80_httpwww_ncbi_nlm_nih_govDate', False, pyxb.utils.utility.Location('./pubchem.xsd', 89, 0), )

    
    Date = property(__Date.value, __Date.set, None, None)

    _ElementMap.update({
        __Date.name() : __Date
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_81 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1007, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PubMedId uses Python identifier PubMedId
    __PubMedId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PubMedId'), 'PubMedId', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_81_httpwww_ncbi_nlm_nih_govPubMedId', False, pyxb.utils.utility.Location('./pubchem.xsd', 509, 0), )

    
    PubMedId = property(__PubMedId.value, __PubMedId.set, None, None)

    _ElementMap.update({
        __PubMedId.name() : __PubMedId
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_82 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1019, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Auth-list_names uses Python identifier Auth_list_names
    __Auth_list_names = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Auth-list_names'), 'Auth_list_names', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_82_httpwww_ncbi_nlm_nih_govAuth_list_names', False, pyxb.utils.utility.Location('./pubchem.xsd', 1021, 6), )

    
    Auth_list_names = property(__Auth_list_names.value, __Auth_list_names.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Auth-list_affil uses Python identifier Auth_list_affil
    __Auth_list_affil = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Auth-list_affil'), 'Auth_list_affil', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_82_httpwww_ncbi_nlm_nih_govAuth_list_affil', False, pyxb.utils.utility.Location('./pubchem.xsd', 1052, 6), )

    
    Auth_list_affil = property(__Auth_list_affil.value, __Auth_list_affil.set, None, None)

    _ElementMap.update({
        __Auth_list_names.name() : __Auth_list_names,
        __Auth_list_affil.name() : __Auth_list_affil
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_83 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1022, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Auth-list_names_std uses Python identifier Auth_list_names_std
    __Auth_list_names_std = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Auth-list_names_std'), 'Auth_list_names_std', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_83_httpwww_ncbi_nlm_nih_govAuth_list_names_std', False, pyxb.utils.utility.Location('./pubchem.xsd', 1025, 12), )

    
    Auth_list_names_std = property(__Auth_list_names_std.value, __Auth_list_names_std.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Auth-list_names_ml uses Python identifier Auth_list_names_ml
    __Auth_list_names_ml = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Auth-list_names_ml'), 'Auth_list_names_ml', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_83_httpwww_ncbi_nlm_nih_govAuth_list_names_ml', False, pyxb.utils.utility.Location('./pubchem.xsd', 1033, 12), )

    
    Auth_list_names_ml = property(__Auth_list_names_ml.value, __Auth_list_names_ml.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Auth-list_names_str uses Python identifier Auth_list_names_str
    __Auth_list_names_str = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Auth-list_names_str'), 'Auth_list_names_str', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_83_httpwww_ncbi_nlm_nih_govAuth_list_names_str', False, pyxb.utils.utility.Location('./pubchem.xsd', 1041, 12), )

    
    Auth_list_names_str = property(__Auth_list_names_str.value, __Auth_list_names_str.set, None, None)

    _ElementMap.update({
        __Auth_list_names_std.name() : __Auth_list_names_std,
        __Auth_list_names_ml.name() : __Auth_list_names_ml,
        __Auth_list_names_str.name() : __Auth_list_names_str
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_84 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1026, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Author uses Python identifier Author
    __Author = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Author'), 'Author', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_84_httpwww_ncbi_nlm_nih_govAuthor', True, pyxb.utils.utility.Location('./pubchem.xsd', 1063, 0), )

    
    Author = property(__Author.value, __Author.set, None, None)

    _ElementMap.update({
        __Author.name() : __Author
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_85 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1034, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Auth-list_names_ml_E uses Python identifier Auth_list_names_ml_E
    __Auth_list_names_ml_E = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Auth-list_names_ml_E'), 'Auth_list_names_ml_E', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_85_httpwww_ncbi_nlm_nih_govAuth_list_names_ml_E', True, pyxb.utils.utility.Location('./pubchem.xsd', 1036, 18), )

    
    Auth_list_names_ml_E = property(__Auth_list_names_ml_E.value, __Auth_list_names_ml_E.set, None, None)

    _ElementMap.update({
        __Auth_list_names_ml_E.name() : __Auth_list_names_ml_E
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_86 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1042, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Auth-list_names_str_E uses Python identifier Auth_list_names_str_E
    __Auth_list_names_str_E = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Auth-list_names_str_E'), 'Auth_list_names_str_E', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_86_httpwww_ncbi_nlm_nih_govAuth_list_names_str_E', True, pyxb.utils.utility.Location('./pubchem.xsd', 1044, 18), )

    
    Auth_list_names_str_E = property(__Auth_list_names_str_E.value, __Auth_list_names_str_E.set, None, None)

    _ElementMap.update({
        __Auth_list_names_str_E.name() : __Auth_list_names_str_E
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_87 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1053, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Affil uses Python identifier Affil
    __Affil = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Affil'), 'Affil', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_87_httpwww_ncbi_nlm_nih_govAffil', False, pyxb.utils.utility.Location('./pubchem.xsd', 1124, 0), )

    
    Affil = property(__Affil.value, __Affil.set, None, None)

    _ElementMap.update({
        __Affil.name() : __Affil
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_88 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1064, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Author_name uses Python identifier Author_name
    __Author_name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Author_name'), 'Author_name', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_88_httpwww_ncbi_nlm_nih_govAuthor_name', False, pyxb.utils.utility.Location('./pubchem.xsd', 1067, 6), )

    
    Author_name = property(__Author_name.value, __Author_name.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Author_level uses Python identifier Author_level
    __Author_level = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Author_level'), 'Author_level', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_88_httpwww_ncbi_nlm_nih_govAuthor_level', False, pyxb.utils.utility.Location('./pubchem.xsd', 1074, 6), )

    
    Author_level = property(__Author_level.value, __Author_level.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Author_role uses Python identifier Author_role
    __Author_role = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Author_role'), 'Author_role', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_88_httpwww_ncbi_nlm_nih_govAuthor_role', False, pyxb.utils.utility.Location('./pubchem.xsd', 1086, 6), )

    
    Author_role = property(__Author_role.value, __Author_role.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Author_affil uses Python identifier Author_affil
    __Author_affil = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Author_affil'), 'Author_affil', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_88_httpwww_ncbi_nlm_nih_govAuthor_affil', False, pyxb.utils.utility.Location('./pubchem.xsd', 1100, 6), )

    
    Author_affil = property(__Author_affil.value, __Author_affil.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Author_is-corr uses Python identifier Author_is_corr
    __Author_is_corr = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Author_is-corr'), 'Author_is_corr', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_88_httpwww_ncbi_nlm_nih_govAuthor_is_corr', False, pyxb.utils.utility.Location('./pubchem.xsd', 1108, 6), )

    
    Author_is_corr = property(__Author_is_corr.value, __Author_is_corr.set, None, None)

    _ElementMap.update({
        __Author_name.name() : __Author_name,
        __Author_level.name() : __Author_level,
        __Author_role.name() : __Author_role,
        __Author_affil.name() : __Author_affil,
        __Author_is_corr.name() : __Author_is_corr
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_89 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1068, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Person-id uses Python identifier Person_id
    __Person_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Person-id'), 'Person_id', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_89_httpwww_ncbi_nlm_nih_govPerson_id', False, pyxb.utils.utility.Location('./pubchem.xsd', 167, 0), )

    
    Person_id = property(__Person_id.value, __Person_id.set, None, None)

    _ElementMap.update({
        __Person_id.name() : __Person_id
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_90 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1101, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Affil uses Python identifier Affil
    __Affil = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Affil'), 'Affil', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_90_httpwww_ncbi_nlm_nih_govAffil', False, pyxb.utils.utility.Location('./pubchem.xsd', 1124, 0), )

    
    Affil = property(__Affil.value, __Affil.set, None, None)

    _ElementMap.update({
        __Affil.name() : __Affil
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_91 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1125, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Affil_str uses Python identifier Affil_str
    __Affil_str = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Affil_str'), 'Affil_str', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_91_httpwww_ncbi_nlm_nih_govAffil_str', False, pyxb.utils.utility.Location('./pubchem.xsd', 1128, 6), )

    
    Affil_str = property(__Affil_str.value, __Affil_str.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Affil_std uses Python identifier Affil_std
    __Affil_std = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Affil_std'), 'Affil_std', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_91_httpwww_ncbi_nlm_nih_govAffil_std', False, pyxb.utils.utility.Location('./pubchem.xsd', 1129, 6), )

    
    Affil_std = property(__Affil_std.value, __Affil_std.set, None, None)

    _ElementMap.update({
        __Affil_str.name() : __Affil_str,
        __Affil_std.name() : __Affil_std
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_92 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1130, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Affil_std_affil uses Python identifier Affil_std_affil
    __Affil_std_affil = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Affil_std_affil'), 'Affil_std_affil', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_92_httpwww_ncbi_nlm_nih_govAffil_std_affil', False, pyxb.utils.utility.Location('./pubchem.xsd', 1133, 12), )

    
    Affil_std_affil = property(__Affil_std_affil.value, __Affil_std_affil.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Affil_std_div uses Python identifier Affil_std_div
    __Affil_std_div = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Affil_std_div'), 'Affil_std_div', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_92_httpwww_ncbi_nlm_nih_govAffil_std_div', False, pyxb.utils.utility.Location('./pubchem.xsd', 1135, 12), )

    
    Affil_std_div = property(__Affil_std_div.value, __Affil_std_div.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Affil_std_city uses Python identifier Affil_std_city
    __Affil_std_city = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Affil_std_city'), 'Affil_std_city', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_92_httpwww_ncbi_nlm_nih_govAffil_std_city', False, pyxb.utils.utility.Location('./pubchem.xsd', 1137, 12), )

    
    Affil_std_city = property(__Affil_std_city.value, __Affil_std_city.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Affil_std_sub uses Python identifier Affil_std_sub
    __Affil_std_sub = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Affil_std_sub'), 'Affil_std_sub', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_92_httpwww_ncbi_nlm_nih_govAffil_std_sub', False, pyxb.utils.utility.Location('./pubchem.xsd', 1139, 12), )

    
    Affil_std_sub = property(__Affil_std_sub.value, __Affil_std_sub.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Affil_std_country uses Python identifier Affil_std_country
    __Affil_std_country = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Affil_std_country'), 'Affil_std_country', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_92_httpwww_ncbi_nlm_nih_govAffil_std_country', False, pyxb.utils.utility.Location('./pubchem.xsd', 1141, 12), )

    
    Affil_std_country = property(__Affil_std_country.value, __Affil_std_country.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Affil_std_street uses Python identifier Affil_std_street
    __Affil_std_street = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Affil_std_street'), 'Affil_std_street', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_92_httpwww_ncbi_nlm_nih_govAffil_std_street', False, pyxb.utils.utility.Location('./pubchem.xsd', 1143, 12), )

    
    Affil_std_street = property(__Affil_std_street.value, __Affil_std_street.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Affil_std_email uses Python identifier Affil_std_email
    __Affil_std_email = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Affil_std_email'), 'Affil_std_email', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_92_httpwww_ncbi_nlm_nih_govAffil_std_email', False, pyxb.utils.utility.Location('./pubchem.xsd', 1144, 12), )

    
    Affil_std_email = property(__Affil_std_email.value, __Affil_std_email.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Affil_std_fax uses Python identifier Affil_std_fax
    __Affil_std_fax = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Affil_std_fax'), 'Affil_std_fax', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_92_httpwww_ncbi_nlm_nih_govAffil_std_fax', False, pyxb.utils.utility.Location('./pubchem.xsd', 1145, 12), )

    
    Affil_std_fax = property(__Affil_std_fax.value, __Affil_std_fax.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Affil_std_phone uses Python identifier Affil_std_phone
    __Affil_std_phone = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Affil_std_phone'), 'Affil_std_phone', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_92_httpwww_ncbi_nlm_nih_govAffil_std_phone', False, pyxb.utils.utility.Location('./pubchem.xsd', 1146, 12), )

    
    Affil_std_phone = property(__Affil_std_phone.value, __Affil_std_phone.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Affil_std_postal-code uses Python identifier Affil_std_postal_code
    __Affil_std_postal_code = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Affil_std_postal-code'), 'Affil_std_postal_code', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_92_httpwww_ncbi_nlm_nih_govAffil_std_postal_code', False, pyxb.utils.utility.Location('./pubchem.xsd', 1147, 12), )

    
    Affil_std_postal_code = property(__Affil_std_postal_code.value, __Affil_std_postal_code.set, None, None)

    _ElementMap.update({
        __Affil_std_affil.name() : __Affil_std_affil,
        __Affil_std_div.name() : __Affil_std_div,
        __Affil_std_city.name() : __Affil_std_city,
        __Affil_std_sub.name() : __Affil_std_sub,
        __Affil_std_country.name() : __Affil_std_country,
        __Affil_std_street.name() : __Affil_std_street,
        __Affil_std_email.name() : __Affil_std_email,
        __Affil_std_fax.name() : __Affil_std_fax,
        __Affil_std_phone.name() : __Affil_std_phone,
        __Affil_std_postal_code.name() : __Affil_std_postal_code
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_93 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1163, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Title_E uses Python identifier Title_E
    __Title_E = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Title_E'), 'Title_E', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_93_httpwww_ncbi_nlm_nih_govTitle_E', True, pyxb.utils.utility.Location('./pubchem.xsd', 1165, 6), )

    
    Title_E = property(__Title_E.value, __Title_E.set, None, None)

    _ElementMap.update({
        __Title_E.name() : __Title_E
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_94 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1166, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Title_E_name uses Python identifier Title_E_name
    __Title_E_name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Title_E_name'), 'Title_E_name', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_94_httpwww_ncbi_nlm_nih_govTitle_E_name', False, pyxb.utils.utility.Location('./pubchem.xsd', 1169, 12), )

    
    Title_E_name = property(__Title_E_name.value, __Title_E_name.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Title_E_tsub uses Python identifier Title_E_tsub
    __Title_E_tsub = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Title_E_tsub'), 'Title_E_tsub', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_94_httpwww_ncbi_nlm_nih_govTitle_E_tsub', False, pyxb.utils.utility.Location('./pubchem.xsd', 1171, 12), )

    
    Title_E_tsub = property(__Title_E_tsub.value, __Title_E_tsub.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Title_E_trans uses Python identifier Title_E_trans
    __Title_E_trans = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Title_E_trans'), 'Title_E_trans', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_94_httpwww_ncbi_nlm_nih_govTitle_E_trans', False, pyxb.utils.utility.Location('./pubchem.xsd', 1173, 12), )

    
    Title_E_trans = property(__Title_E_trans.value, __Title_E_trans.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Title_E_jta uses Python identifier Title_E_jta
    __Title_E_jta = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Title_E_jta'), 'Title_E_jta', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_94_httpwww_ncbi_nlm_nih_govTitle_E_jta', False, pyxb.utils.utility.Location('./pubchem.xsd', 1175, 12), )

    
    Title_E_jta = property(__Title_E_jta.value, __Title_E_jta.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Title_E_iso-jta uses Python identifier Title_E_iso_jta
    __Title_E_iso_jta = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Title_E_iso-jta'), 'Title_E_iso_jta', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_94_httpwww_ncbi_nlm_nih_govTitle_E_iso_jta', False, pyxb.utils.utility.Location('./pubchem.xsd', 1177, 12), )

    
    Title_E_iso_jta = property(__Title_E_iso_jta.value, __Title_E_iso_jta.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Title_E_ml-jta uses Python identifier Title_E_ml_jta
    __Title_E_ml_jta = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Title_E_ml-jta'), 'Title_E_ml_jta', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_94_httpwww_ncbi_nlm_nih_govTitle_E_ml_jta', False, pyxb.utils.utility.Location('./pubchem.xsd', 1179, 12), )

    
    Title_E_ml_jta = property(__Title_E_ml_jta.value, __Title_E_ml_jta.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Title_E_coden uses Python identifier Title_E_coden
    __Title_E_coden = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Title_E_coden'), 'Title_E_coden', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_94_httpwww_ncbi_nlm_nih_govTitle_E_coden', False, pyxb.utils.utility.Location('./pubchem.xsd', 1181, 12), )

    
    Title_E_coden = property(__Title_E_coden.value, __Title_E_coden.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Title_E_issn uses Python identifier Title_E_issn
    __Title_E_issn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Title_E_issn'), 'Title_E_issn', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_94_httpwww_ncbi_nlm_nih_govTitle_E_issn', False, pyxb.utils.utility.Location('./pubchem.xsd', 1183, 12), )

    
    Title_E_issn = property(__Title_E_issn.value, __Title_E_issn.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Title_E_abr uses Python identifier Title_E_abr
    __Title_E_abr = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Title_E_abr'), 'Title_E_abr', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_94_httpwww_ncbi_nlm_nih_govTitle_E_abr', False, pyxb.utils.utility.Location('./pubchem.xsd', 1185, 12), )

    
    Title_E_abr = property(__Title_E_abr.value, __Title_E_abr.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Title_E_isbn uses Python identifier Title_E_isbn
    __Title_E_isbn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Title_E_isbn'), 'Title_E_isbn', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_94_httpwww_ncbi_nlm_nih_govTitle_E_isbn', False, pyxb.utils.utility.Location('./pubchem.xsd', 1187, 12), )

    
    Title_E_isbn = property(__Title_E_isbn.value, __Title_E_isbn.set, None, None)

    _ElementMap.update({
        __Title_E_name.name() : __Title_E_name,
        __Title_E_tsub.name() : __Title_E_tsub,
        __Title_E_trans.name() : __Title_E_trans,
        __Title_E_jta.name() : __Title_E_jta,
        __Title_E_iso_jta.name() : __Title_E_iso_jta,
        __Title_E_ml_jta.name() : __Title_E_ml_jta,
        __Title_E_coden.name() : __Title_E_coden,
        __Title_E_issn.name() : __Title_E_issn,
        __Title_E_abr.name() : __Title_E_abr,
        __Title_E_isbn.name() : __Title_E_isbn
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_95 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1197, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Imprint_date uses Python identifier Imprint_date
    __Imprint_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Imprint_date'), 'Imprint_date', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_95_httpwww_ncbi_nlm_nih_govImprint_date', False, pyxb.utils.utility.Location('./pubchem.xsd', 1200, 6), )

    
    Imprint_date = property(__Imprint_date.value, __Imprint_date.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Imprint_volume uses Python identifier Imprint_volume
    __Imprint_volume = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Imprint_volume'), 'Imprint_volume', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_95_httpwww_ncbi_nlm_nih_govImprint_volume', False, pyxb.utils.utility.Location('./pubchem.xsd', 1207, 6), )

    
    Imprint_volume = property(__Imprint_volume.value, __Imprint_volume.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Imprint_issue uses Python identifier Imprint_issue
    __Imprint_issue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Imprint_issue'), 'Imprint_issue', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_95_httpwww_ncbi_nlm_nih_govImprint_issue', False, pyxb.utils.utility.Location('./pubchem.xsd', 1208, 6), )

    
    Imprint_issue = property(__Imprint_issue.value, __Imprint_issue.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Imprint_pages uses Python identifier Imprint_pages
    __Imprint_pages = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Imprint_pages'), 'Imprint_pages', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_95_httpwww_ncbi_nlm_nih_govImprint_pages', False, pyxb.utils.utility.Location('./pubchem.xsd', 1209, 6), )

    
    Imprint_pages = property(__Imprint_pages.value, __Imprint_pages.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Imprint_section uses Python identifier Imprint_section
    __Imprint_section = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Imprint_section'), 'Imprint_section', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_95_httpwww_ncbi_nlm_nih_govImprint_section', False, pyxb.utils.utility.Location('./pubchem.xsd', 1210, 6), )

    
    Imprint_section = property(__Imprint_section.value, __Imprint_section.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Imprint_pub uses Python identifier Imprint_pub
    __Imprint_pub = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Imprint_pub'), 'Imprint_pub', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_95_httpwww_ncbi_nlm_nih_govImprint_pub', False, pyxb.utils.utility.Location('./pubchem.xsd', 1212, 6), )

    
    Imprint_pub = property(__Imprint_pub.value, __Imprint_pub.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Imprint_cprt uses Python identifier Imprint_cprt
    __Imprint_cprt = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Imprint_cprt'), 'Imprint_cprt', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_95_httpwww_ncbi_nlm_nih_govImprint_cprt', False, pyxb.utils.utility.Location('./pubchem.xsd', 1220, 6), )

    
    Imprint_cprt = property(__Imprint_cprt.value, __Imprint_cprt.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Imprint_part-sup uses Python identifier Imprint_part_sup
    __Imprint_part_sup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Imprint_part-sup'), 'Imprint_part_sup', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_95_httpwww_ncbi_nlm_nih_govImprint_part_sup', False, pyxb.utils.utility.Location('./pubchem.xsd', 1228, 6), )

    
    Imprint_part_sup = property(__Imprint_part_sup.value, __Imprint_part_sup.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Imprint_language uses Python identifier Imprint_language
    __Imprint_language = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Imprint_language'), 'Imprint_language', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_95_httpwww_ncbi_nlm_nih_govImprint_language', False, pyxb.utils.utility.Location('./pubchem.xsd', 1230, 6), )

    
    Imprint_language = property(__Imprint_language.value, __Imprint_language.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Imprint_prepub uses Python identifier Imprint_prepub
    __Imprint_prepub = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Imprint_prepub'), 'Imprint_prepub', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_95_httpwww_ncbi_nlm_nih_govImprint_prepub', False, pyxb.utils.utility.Location('./pubchem.xsd', 1231, 6), )

    
    Imprint_prepub = property(__Imprint_prepub.value, __Imprint_prepub.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Imprint_part-supi uses Python identifier Imprint_part_supi
    __Imprint_part_supi = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Imprint_part-supi'), 'Imprint_part_supi', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_95_httpwww_ncbi_nlm_nih_govImprint_part_supi', False, pyxb.utils.utility.Location('./pubchem.xsd', 1249, 6), )

    
    Imprint_part_supi = property(__Imprint_part_supi.value, __Imprint_part_supi.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Imprint_retract uses Python identifier Imprint_retract
    __Imprint_retract = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Imprint_retract'), 'Imprint_retract', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_95_httpwww_ncbi_nlm_nih_govImprint_retract', False, pyxb.utils.utility.Location('./pubchem.xsd', 1251, 6), )

    
    Imprint_retract = property(__Imprint_retract.value, __Imprint_retract.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Imprint_pubstatus uses Python identifier Imprint_pubstatus
    __Imprint_pubstatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Imprint_pubstatus'), 'Imprint_pubstatus', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_95_httpwww_ncbi_nlm_nih_govImprint_pubstatus', False, pyxb.utils.utility.Location('./pubchem.xsd', 1259, 6), )

    
    Imprint_pubstatus = property(__Imprint_pubstatus.value, __Imprint_pubstatus.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Imprint_history uses Python identifier Imprint_history
    __Imprint_history = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Imprint_history'), 'Imprint_history', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_95_httpwww_ncbi_nlm_nih_govImprint_history', False, pyxb.utils.utility.Location('./pubchem.xsd', 1267, 6), )

    
    Imprint_history = property(__Imprint_history.value, __Imprint_history.set, None, None)

    _ElementMap.update({
        __Imprint_date.name() : __Imprint_date,
        __Imprint_volume.name() : __Imprint_volume,
        __Imprint_issue.name() : __Imprint_issue,
        __Imprint_pages.name() : __Imprint_pages,
        __Imprint_section.name() : __Imprint_section,
        __Imprint_pub.name() : __Imprint_pub,
        __Imprint_cprt.name() : __Imprint_cprt,
        __Imprint_part_sup.name() : __Imprint_part_sup,
        __Imprint_language.name() : __Imprint_language,
        __Imprint_prepub.name() : __Imprint_prepub,
        __Imprint_part_supi.name() : __Imprint_part_supi,
        __Imprint_retract.name() : __Imprint_retract,
        __Imprint_pubstatus.name() : __Imprint_pubstatus,
        __Imprint_history.name() : __Imprint_history
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_96 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1201, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Date uses Python identifier Date
    __Date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Date'), 'Date', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_96_httpwww_ncbi_nlm_nih_govDate', False, pyxb.utils.utility.Location('./pubchem.xsd', 89, 0), )

    
    Date = property(__Date.value, __Date.set, None, None)

    _ElementMap.update({
        __Date.name() : __Date
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_97 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1213, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Affil uses Python identifier Affil
    __Affil = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Affil'), 'Affil', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_97_httpwww_ncbi_nlm_nih_govAffil', False, pyxb.utils.utility.Location('./pubchem.xsd', 1124, 0), )

    
    Affil = property(__Affil.value, __Affil.set, None, None)

    _ElementMap.update({
        __Affil.name() : __Affil
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_98 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1221, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Date uses Python identifier Date
    __Date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Date'), 'Date', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_98_httpwww_ncbi_nlm_nih_govDate', False, pyxb.utils.utility.Location('./pubchem.xsd', 89, 0), )

    
    Date = property(__Date.value, __Date.set, None, None)

    _ElementMap.update({
        __Date.name() : __Date
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_99 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1252, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}CitRetract uses Python identifier CitRetract
    __CitRetract = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CitRetract'), 'CitRetract', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_99_httpwww_ncbi_nlm_nih_govCitRetract', False, pyxb.utils.utility.Location('./pubchem.xsd', 1278, 0), )

    
    CitRetract = property(__CitRetract.value, __CitRetract.set, None, None)

    _ElementMap.update({
        __CitRetract.name() : __CitRetract
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_100 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1260, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PubStatus uses Python identifier PubStatus
    __PubStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PubStatus'), 'PubStatus', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_100_httpwww_ncbi_nlm_nih_govPubStatus', False, pyxb.utils.utility.Location('./pubchem.xsd', 541, 0), )

    
    PubStatus = property(__PubStatus.value, __PubStatus.set, None, None)

    _ElementMap.update({
        __PubStatus.name() : __PubStatus
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_101 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1268, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PubStatusDateSet uses Python identifier PubStatusDateSet
    __PubStatusDateSet = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PubStatusDateSet'), 'PubStatusDateSet', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_101_httpwww_ncbi_nlm_nih_govPubStatusDateSet', False, pyxb.utils.utility.Location('./pubchem.xsd', 606, 0), )

    
    PubStatusDateSet = property(__PubStatusDateSet.value, __PubStatusDateSet.set, None, None)

    _ElementMap.update({
        __PubStatusDateSet.name() : __PubStatusDateSet
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_102 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1279, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}CitRetract_type uses Python identifier CitRetract_type
    __CitRetract_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CitRetract_type'), 'CitRetract_type', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_102_httpwww_ncbi_nlm_nih_govCitRetract_type', False, pyxb.utils.utility.Location('./pubchem.xsd', 1281, 6), )

    
    CitRetract_type = property(__CitRetract_type.value, __CitRetract_type.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}CitRetract_exp uses Python identifier CitRetract_exp
    __CitRetract_exp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CitRetract_exp'), 'CitRetract_exp', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_102_httpwww_ncbi_nlm_nih_govCitRetract_exp', False, pyxb.utils.utility.Location('./pubchem.xsd', 1302, 6), )

    
    CitRetract_exp = property(__CitRetract_exp.value, __CitRetract_exp.set, None, None)

    _ElementMap.update({
        __CitRetract_type.name() : __CitRetract_type,
        __CitRetract_exp.name() : __CitRetract_exp
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_103 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1308, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Meeting_number uses Python identifier Meeting_number
    __Meeting_number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Meeting_number'), 'Meeting_number', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_103_httpwww_ncbi_nlm_nih_govMeeting_number', False, pyxb.utils.utility.Location('./pubchem.xsd', 1310, 6), )

    
    Meeting_number = property(__Meeting_number.value, __Meeting_number.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Meeting_date uses Python identifier Meeting_date
    __Meeting_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Meeting_date'), 'Meeting_date', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_103_httpwww_ncbi_nlm_nih_govMeeting_date', False, pyxb.utils.utility.Location('./pubchem.xsd', 1311, 6), )

    
    Meeting_date = property(__Meeting_date.value, __Meeting_date.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Meeting_place uses Python identifier Meeting_place
    __Meeting_place = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Meeting_place'), 'Meeting_place', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_103_httpwww_ncbi_nlm_nih_govMeeting_place', False, pyxb.utils.utility.Location('./pubchem.xsd', 1318, 6), )

    
    Meeting_place = property(__Meeting_place.value, __Meeting_place.set, None, None)

    _ElementMap.update({
        __Meeting_number.name() : __Meeting_number,
        __Meeting_date.name() : __Meeting_date,
        __Meeting_place.name() : __Meeting_place
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_104 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1312, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Date uses Python identifier Date
    __Date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Date'), 'Date', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_104_httpwww_ncbi_nlm_nih_govDate', False, pyxb.utils.utility.Location('./pubchem.xsd', 89, 0), )

    
    Date = property(__Date.value, __Date.set, None, None)

    _ElementMap.update({
        __Date.name() : __Date
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_105 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1319, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Affil uses Python identifier Affil
    __Affil = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Affil'), 'Affil', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_105_httpwww_ncbi_nlm_nih_govAffil', False, pyxb.utils.utility.Location('./pubchem.xsd', 1124, 0), )

    
    Affil = property(__Affil.value, __Affil.set, None, None)

    _ElementMap.update({
        __Affil.name() : __Affil
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_106 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1362, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Medline-entry_uid uses Python identifier Medline_entry_uid
    __Medline_entry_uid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry_uid'), 'Medline_entry_uid', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_106_httpwww_ncbi_nlm_nih_govMedline_entry_uid', False, pyxb.utils.utility.Location('./pubchem.xsd', 1365, 6), )

    
    Medline_entry_uid = property(__Medline_entry_uid.value, __Medline_entry_uid.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Medline-entry_em uses Python identifier Medline_entry_em
    __Medline_entry_em = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry_em'), 'Medline_entry_em', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_106_httpwww_ncbi_nlm_nih_govMedline_entry_em', False, pyxb.utils.utility.Location('./pubchem.xsd', 1367, 6), )

    
    Medline_entry_em = property(__Medline_entry_em.value, __Medline_entry_em.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Medline-entry_cit uses Python identifier Medline_entry_cit
    __Medline_entry_cit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry_cit'), 'Medline_entry_cit', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_106_httpwww_ncbi_nlm_nih_govMedline_entry_cit', False, pyxb.utils.utility.Location('./pubchem.xsd', 1375, 6), )

    
    Medline_entry_cit = property(__Medline_entry_cit.value, __Medline_entry_cit.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Medline-entry_abstract uses Python identifier Medline_entry_abstract
    __Medline_entry_abstract = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry_abstract'), 'Medline_entry_abstract', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_106_httpwww_ncbi_nlm_nih_govMedline_entry_abstract', False, pyxb.utils.utility.Location('./pubchem.xsd', 1382, 6), )

    
    Medline_entry_abstract = property(__Medline_entry_abstract.value, __Medline_entry_abstract.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Medline-entry_mesh uses Python identifier Medline_entry_mesh
    __Medline_entry_mesh = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry_mesh'), 'Medline_entry_mesh', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_106_httpwww_ncbi_nlm_nih_govMedline_entry_mesh', False, pyxb.utils.utility.Location('./pubchem.xsd', 1383, 6), )

    
    Medline_entry_mesh = property(__Medline_entry_mesh.value, __Medline_entry_mesh.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Medline-entry_substance uses Python identifier Medline_entry_substance
    __Medline_entry_substance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry_substance'), 'Medline_entry_substance', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_106_httpwww_ncbi_nlm_nih_govMedline_entry_substance', False, pyxb.utils.utility.Location('./pubchem.xsd', 1390, 6), )

    
    Medline_entry_substance = property(__Medline_entry_substance.value, __Medline_entry_substance.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Medline-entry_xref uses Python identifier Medline_entry_xref
    __Medline_entry_xref = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry_xref'), 'Medline_entry_xref', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_106_httpwww_ncbi_nlm_nih_govMedline_entry_xref', False, pyxb.utils.utility.Location('./pubchem.xsd', 1397, 6), )

    
    Medline_entry_xref = property(__Medline_entry_xref.value, __Medline_entry_xref.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Medline-entry_idnum uses Python identifier Medline_entry_idnum
    __Medline_entry_idnum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry_idnum'), 'Medline_entry_idnum', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_106_httpwww_ncbi_nlm_nih_govMedline_entry_idnum', False, pyxb.utils.utility.Location('./pubchem.xsd', 1405, 6), )

    
    Medline_entry_idnum = property(__Medline_entry_idnum.value, __Medline_entry_idnum.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Medline-entry_gene uses Python identifier Medline_entry_gene
    __Medline_entry_gene = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry_gene'), 'Medline_entry_gene', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_106_httpwww_ncbi_nlm_nih_govMedline_entry_gene', False, pyxb.utils.utility.Location('./pubchem.xsd', 1412, 6), )

    
    Medline_entry_gene = property(__Medline_entry_gene.value, __Medline_entry_gene.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Medline-entry_pmid uses Python identifier Medline_entry_pmid
    __Medline_entry_pmid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry_pmid'), 'Medline_entry_pmid', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_106_httpwww_ncbi_nlm_nih_govMedline_entry_pmid', False, pyxb.utils.utility.Location('./pubchem.xsd', 1420, 6), )

    
    Medline_entry_pmid = property(__Medline_entry_pmid.value, __Medline_entry_pmid.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Medline-entry_pub-type uses Python identifier Medline_entry_pub_type
    __Medline_entry_pub_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry_pub-type'), 'Medline_entry_pub_type', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_106_httpwww_ncbi_nlm_nih_govMedline_entry_pub_type', False, pyxb.utils.utility.Location('./pubchem.xsd', 1428, 6), )

    
    Medline_entry_pub_type = property(__Medline_entry_pub_type.value, __Medline_entry_pub_type.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Medline-entry_mlfield uses Python identifier Medline_entry_mlfield
    __Medline_entry_mlfield = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry_mlfield'), 'Medline_entry_mlfield', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_106_httpwww_ncbi_nlm_nih_govMedline_entry_mlfield', False, pyxb.utils.utility.Location('./pubchem.xsd', 1436, 6), )

    
    Medline_entry_mlfield = property(__Medline_entry_mlfield.value, __Medline_entry_mlfield.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Medline-entry_status uses Python identifier Medline_entry_status
    __Medline_entry_status = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry_status'), 'Medline_entry_status', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_106_httpwww_ncbi_nlm_nih_govMedline_entry_status', False, pyxb.utils.utility.Location('./pubchem.xsd', 1443, 6), )

    
    Medline_entry_status = property(__Medline_entry_status.value, __Medline_entry_status.set, None, None)

    _ElementMap.update({
        __Medline_entry_uid.name() : __Medline_entry_uid,
        __Medline_entry_em.name() : __Medline_entry_em,
        __Medline_entry_cit.name() : __Medline_entry_cit,
        __Medline_entry_abstract.name() : __Medline_entry_abstract,
        __Medline_entry_mesh.name() : __Medline_entry_mesh,
        __Medline_entry_substance.name() : __Medline_entry_substance,
        __Medline_entry_xref.name() : __Medline_entry_xref,
        __Medline_entry_idnum.name() : __Medline_entry_idnum,
        __Medline_entry_gene.name() : __Medline_entry_gene,
        __Medline_entry_pmid.name() : __Medline_entry_pmid,
        __Medline_entry_pub_type.name() : __Medline_entry_pub_type,
        __Medline_entry_mlfield.name() : __Medline_entry_mlfield,
        __Medline_entry_status.name() : __Medline_entry_status
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_107 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1368, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Date uses Python identifier Date
    __Date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Date'), 'Date', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_107_httpwww_ncbi_nlm_nih_govDate', False, pyxb.utils.utility.Location('./pubchem.xsd', 89, 0), )

    
    Date = property(__Date.value, __Date.set, None, None)

    _ElementMap.update({
        __Date.name() : __Date
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_108 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1376, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-art uses Python identifier Cit_art
    __Cit_art = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-art'), 'Cit_art', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_108_httpwww_ncbi_nlm_nih_govCit_art', False, pyxb.utils.utility.Location('./pubchem.xsd', 618, 0), )

    
    Cit_art = property(__Cit_art.value, __Cit_art.set, None, None)

    _ElementMap.update({
        __Cit_art.name() : __Cit_art
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_109 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1384, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Medline-mesh uses Python identifier Medline_mesh
    __Medline_mesh = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Medline-mesh'), 'Medline_mesh', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_109_httpwww_ncbi_nlm_nih_govMedline_mesh', True, pyxb.utils.utility.Location('./pubchem.xsd', 1468, 0), )

    
    Medline_mesh = property(__Medline_mesh.value, __Medline_mesh.set, None, None)

    _ElementMap.update({
        __Medline_mesh.name() : __Medline_mesh
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_110 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1391, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Medline-rn uses Python identifier Medline_rn
    __Medline_rn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Medline-rn'), 'Medline_rn', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_110_httpwww_ncbi_nlm_nih_govMedline_rn', True, pyxb.utils.utility.Location('./pubchem.xsd', 1521, 0), )

    
    Medline_rn = property(__Medline_rn.value, __Medline_rn.set, None, None)

    _ElementMap.update({
        __Medline_rn.name() : __Medline_rn
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_111 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1398, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Medline-si uses Python identifier Medline_si
    __Medline_si = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Medline-si'), 'Medline_si', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_111_httpwww_ncbi_nlm_nih_govMedline_si', True, pyxb.utils.utility.Location('./pubchem.xsd', 1550, 0), )

    
    Medline_si = property(__Medline_si.value, __Medline_si.set, None, None)

    _ElementMap.update({
        __Medline_si.name() : __Medline_si
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_112 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1406, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Medline-entry_idnum_E uses Python identifier Medline_entry_idnum_E
    __Medline_entry_idnum_E = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry_idnum_E'), 'Medline_entry_idnum_E', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_112_httpwww_ncbi_nlm_nih_govMedline_entry_idnum_E', True, pyxb.utils.utility.Location('./pubchem.xsd', 1408, 12), )

    
    Medline_entry_idnum_E = property(__Medline_entry_idnum_E.value, __Medline_entry_idnum_E.set, None, None)

    _ElementMap.update({
        __Medline_entry_idnum_E.name() : __Medline_entry_idnum_E
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_113 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1413, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Medline-entry_gene_E uses Python identifier Medline_entry_gene_E
    __Medline_entry_gene_E = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry_gene_E'), 'Medline_entry_gene_E', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_113_httpwww_ncbi_nlm_nih_govMedline_entry_gene_E', True, pyxb.utils.utility.Location('./pubchem.xsd', 1415, 12), )

    
    Medline_entry_gene_E = property(__Medline_entry_gene_E.value, __Medline_entry_gene_E.set, None, None)

    _ElementMap.update({
        __Medline_entry_gene_E.name() : __Medline_entry_gene_E
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_114 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1421, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PubMedId uses Python identifier PubMedId
    __PubMedId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PubMedId'), 'PubMedId', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_114_httpwww_ncbi_nlm_nih_govPubMedId', False, pyxb.utils.utility.Location('./pubchem.xsd', 509, 0), )

    
    PubMedId = property(__PubMedId.value, __PubMedId.set, None, None)

    _ElementMap.update({
        __PubMedId.name() : __PubMedId
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_115 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1429, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Medline-entry_pub-type_E uses Python identifier Medline_entry_pub_type_E
    __Medline_entry_pub_type_E = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry_pub-type_E'), 'Medline_entry_pub_type_E', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_115_httpwww_ncbi_nlm_nih_govMedline_entry_pub_type_E', True, pyxb.utils.utility.Location('./pubchem.xsd', 1431, 12), )

    
    Medline_entry_pub_type_E = property(__Medline_entry_pub_type_E.value, __Medline_entry_pub_type_E.set, None, None)

    _ElementMap.update({
        __Medline_entry_pub_type_E.name() : __Medline_entry_pub_type_E
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_116 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1437, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Medline-field uses Python identifier Medline_field
    __Medline_field = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Medline-field'), 'Medline_field', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_116_httpwww_ncbi_nlm_nih_govMedline_field', True, pyxb.utils.utility.Location('./pubchem.xsd', 1599, 0), )

    
    Medline_field = property(__Medline_field.value, __Medline_field.set, None, None)

    _ElementMap.update({
        __Medline_field.name() : __Medline_field
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_117 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1469, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Medline-mesh_mp uses Python identifier Medline_mesh_mp
    __Medline_mesh_mp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Medline-mesh_mp'), 'Medline_mesh_mp', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_117_httpwww_ncbi_nlm_nih_govMedline_mesh_mp', False, pyxb.utils.utility.Location('./pubchem.xsd', 1472, 6), )

    
    Medline_mesh_mp = property(__Medline_mesh_mp.value, __Medline_mesh_mp.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Medline-mesh_term uses Python identifier Medline_mesh_term
    __Medline_mesh_term = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Medline-mesh_term'), 'Medline_mesh_term', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_117_httpwww_ncbi_nlm_nih_govMedline_mesh_term', False, pyxb.utils.utility.Location('./pubchem.xsd', 1485, 6), )

    
    Medline_mesh_term = property(__Medline_mesh_term.value, __Medline_mesh_term.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Medline-mesh_qual uses Python identifier Medline_mesh_qual
    __Medline_mesh_qual = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Medline-mesh_qual'), 'Medline_mesh_qual', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_117_httpwww_ncbi_nlm_nih_govMedline_mesh_qual', False, pyxb.utils.utility.Location('./pubchem.xsd', 1487, 6), )

    
    Medline_mesh_qual = property(__Medline_mesh_qual.value, __Medline_mesh_qual.set, None, None)

    _ElementMap.update({
        __Medline_mesh_mp.name() : __Medline_mesh_mp,
        __Medline_mesh_term.name() : __Medline_mesh_term,
        __Medline_mesh_qual.name() : __Medline_mesh_qual
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_118 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1488, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Medline-qual uses Python identifier Medline_qual
    __Medline_qual = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Medline-qual'), 'Medline_qual', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_118_httpwww_ncbi_nlm_nih_govMedline_qual', True, pyxb.utils.utility.Location('./pubchem.xsd', 1498, 0), )

    
    Medline_qual = property(__Medline_qual.value, __Medline_qual.set, None, None)

    _ElementMap.update({
        __Medline_qual.name() : __Medline_qual
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_119 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1499, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Medline-qual_mp uses Python identifier Medline_qual_mp
    __Medline_qual_mp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Medline-qual_mp'), 'Medline_qual_mp', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_119_httpwww_ncbi_nlm_nih_govMedline_qual_mp', False, pyxb.utils.utility.Location('./pubchem.xsd', 1502, 6), )

    
    Medline_qual_mp = property(__Medline_qual_mp.value, __Medline_qual_mp.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Medline-qual_subh uses Python identifier Medline_qual_subh
    __Medline_qual_subh = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Medline-qual_subh'), 'Medline_qual_subh', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_119_httpwww_ncbi_nlm_nih_govMedline_qual_subh', False, pyxb.utils.utility.Location('./pubchem.xsd', 1515, 6), )

    
    Medline_qual_subh = property(__Medline_qual_subh.value, __Medline_qual_subh.set, None, None)

    _ElementMap.update({
        __Medline_qual_mp.name() : __Medline_qual_mp,
        __Medline_qual_subh.name() : __Medline_qual_subh
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_120 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1522, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Medline-rn_type uses Python identifier Medline_rn_type
    __Medline_rn_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Medline-rn_type'), 'Medline_rn_type', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_120_httpwww_ncbi_nlm_nih_govMedline_rn_type', False, pyxb.utils.utility.Location('./pubchem.xsd', 1524, 6), )

    
    Medline_rn_type = property(__Medline_rn_type.value, __Medline_rn_type.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Medline-rn_cit uses Python identifier Medline_rn_cit
    __Medline_rn_cit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Medline-rn_cit'), 'Medline_rn_cit', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_120_httpwww_ncbi_nlm_nih_govMedline_rn_cit', False, pyxb.utils.utility.Location('./pubchem.xsd', 1542, 6), )

    
    Medline_rn_cit = property(__Medline_rn_cit.value, __Medline_rn_cit.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Medline-rn_name uses Python identifier Medline_rn_name
    __Medline_rn_name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Medline-rn_name'), 'Medline_rn_name', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_120_httpwww_ncbi_nlm_nih_govMedline_rn_name', False, pyxb.utils.utility.Location('./pubchem.xsd', 1544, 6), )

    
    Medline_rn_name = property(__Medline_rn_name.value, __Medline_rn_name.set, None, None)

    _ElementMap.update({
        __Medline_rn_type.name() : __Medline_rn_type,
        __Medline_rn_cit.name() : __Medline_rn_cit,
        __Medline_rn_name.name() : __Medline_rn_name
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_121 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1551, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Medline-si_type uses Python identifier Medline_si_type
    __Medline_si_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Medline-si_type'), 'Medline_si_type', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_121_httpwww_ncbi_nlm_nih_govMedline_si_type', False, pyxb.utils.utility.Location('./pubchem.xsd', 1553, 6), )

    
    Medline_si_type = property(__Medline_si_type.value, __Medline_si_type.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Medline-si_cit uses Python identifier Medline_si_cit
    __Medline_si_cit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Medline-si_cit'), 'Medline_si_cit', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_121_httpwww_ncbi_nlm_nih_govMedline_si_cit', False, pyxb.utils.utility.Location('./pubchem.xsd', 1594, 6), )

    
    Medline_si_cit = property(__Medline_si_cit.value, __Medline_si_cit.set, None, None)

    _ElementMap.update({
        __Medline_si_type.name() : __Medline_si_type,
        __Medline_si_cit.name() : __Medline_si_cit
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_122 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1600, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Medline-field_type uses Python identifier Medline_field_type
    __Medline_field_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Medline-field_type'), 'Medline_field_type', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_122_httpwww_ncbi_nlm_nih_govMedline_field_type', False, pyxb.utils.utility.Location('./pubchem.xsd', 1602, 6), )

    
    Medline_field_type = property(__Medline_field_type.value, __Medline_field_type.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Medline-field_str uses Python identifier Medline_field_str
    __Medline_field_str = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Medline-field_str'), 'Medline_field_str', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_122_httpwww_ncbi_nlm_nih_govMedline_field_str', False, pyxb.utils.utility.Location('./pubchem.xsd', 1625, 6), )

    
    Medline_field_str = property(__Medline_field_str.value, __Medline_field_str.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Medline-field_ids uses Python identifier Medline_field_ids
    __Medline_field_ids = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Medline-field_ids'), 'Medline_field_ids', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_122_httpwww_ncbi_nlm_nih_govMedline_field_ids', False, pyxb.utils.utility.Location('./pubchem.xsd', 1627, 6), )

    
    Medline_field_ids = property(__Medline_field_ids.value, __Medline_field_ids.set, None, None)

    _ElementMap.update({
        __Medline_field_type.name() : __Medline_field_type,
        __Medline_field_str.name() : __Medline_field_str,
        __Medline_field_ids.name() : __Medline_field_ids
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_123 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1628, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}DocRef uses Python identifier DocRef
    __DocRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DocRef'), 'DocRef', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_123_httpwww_ncbi_nlm_nih_govDocRef', True, pyxb.utils.utility.Location('./pubchem.xsd', 1639, 0), )

    
    DocRef = property(__DocRef.value, __DocRef.set, None, None)

    _ElementMap.update({
        __DocRef.name() : __DocRef
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_124 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1640, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}DocRef_type uses Python identifier DocRef_type
    __DocRef_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DocRef_type'), 'DocRef_type', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_124_httpwww_ncbi_nlm_nih_govDocRef_type', False, pyxb.utils.utility.Location('./pubchem.xsd', 1642, 6), )

    
    DocRef_type = property(__DocRef_type.value, __DocRef_type.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}DocRef_uid uses Python identifier DocRef_uid
    __DocRef_uid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DocRef_uid'), 'DocRef_uid', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_124_httpwww_ncbi_nlm_nih_govDocRef_uid', False, pyxb.utils.utility.Location('./pubchem.xsd', 1659, 6), )

    
    DocRef_uid = property(__DocRef_uid.value, __DocRef_uid.set, None, None)

    _ElementMap.update({
        __DocRef_type.name() : __DocRef_type,
        __DocRef_uid.name() : __DocRef_uid
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_125 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1702, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Pub_gen uses Python identifier Pub_gen
    __Pub_gen = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Pub_gen'), 'Pub_gen', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_125_httpwww_ncbi_nlm_nih_govPub_gen', False, pyxb.utils.utility.Location('./pubchem.xsd', 1705, 6), )

    
    Pub_gen = property(__Pub_gen.value, __Pub_gen.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Pub_sub uses Python identifier Pub_sub
    __Pub_sub = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Pub_sub'), 'Pub_sub', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_125_httpwww_ncbi_nlm_nih_govPub_sub', False, pyxb.utils.utility.Location('./pubchem.xsd', 1713, 6), )

    
    Pub_sub = property(__Pub_sub.value, __Pub_sub.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Pub_medline uses Python identifier Pub_medline
    __Pub_medline = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Pub_medline'), 'Pub_medline', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_125_httpwww_ncbi_nlm_nih_govPub_medline', False, pyxb.utils.utility.Location('./pubchem.xsd', 1720, 6), )

    
    Pub_medline = property(__Pub_medline.value, __Pub_medline.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Pub_muid uses Python identifier Pub_muid
    __Pub_muid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Pub_muid'), 'Pub_muid', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_125_httpwww_ncbi_nlm_nih_govPub_muid', False, pyxb.utils.utility.Location('./pubchem.xsd', 1728, 6), )

    
    Pub_muid = property(__Pub_muid.value, __Pub_muid.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Pub_article uses Python identifier Pub_article
    __Pub_article = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Pub_article'), 'Pub_article', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_125_httpwww_ncbi_nlm_nih_govPub_article', False, pyxb.utils.utility.Location('./pubchem.xsd', 1729, 6), )

    
    Pub_article = property(__Pub_article.value, __Pub_article.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Pub_journal uses Python identifier Pub_journal
    __Pub_journal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Pub_journal'), 'Pub_journal', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_125_httpwww_ncbi_nlm_nih_govPub_journal', False, pyxb.utils.utility.Location('./pubchem.xsd', 1736, 6), )

    
    Pub_journal = property(__Pub_journal.value, __Pub_journal.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Pub_book uses Python identifier Pub_book
    __Pub_book = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Pub_book'), 'Pub_book', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_125_httpwww_ncbi_nlm_nih_govPub_book', False, pyxb.utils.utility.Location('./pubchem.xsd', 1743, 6), )

    
    Pub_book = property(__Pub_book.value, __Pub_book.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Pub_proc uses Python identifier Pub_proc
    __Pub_proc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Pub_proc'), 'Pub_proc', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_125_httpwww_ncbi_nlm_nih_govPub_proc', False, pyxb.utils.utility.Location('./pubchem.xsd', 1751, 6), )

    
    Pub_proc = property(__Pub_proc.value, __Pub_proc.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Pub_patent uses Python identifier Pub_patent
    __Pub_patent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Pub_patent'), 'Pub_patent', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_125_httpwww_ncbi_nlm_nih_govPub_patent', False, pyxb.utils.utility.Location('./pubchem.xsd', 1758, 6), )

    
    Pub_patent = property(__Pub_patent.value, __Pub_patent.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Pub_pat-id uses Python identifier Pub_pat_id
    __Pub_pat_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Pub_pat-id'), 'Pub_pat_id', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_125_httpwww_ncbi_nlm_nih_govPub_pat_id', False, pyxb.utils.utility.Location('./pubchem.xsd', 1766, 6), )

    
    Pub_pat_id = property(__Pub_pat_id.value, __Pub_pat_id.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Pub_man uses Python identifier Pub_man
    __Pub_man = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Pub_man'), 'Pub_man', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_125_httpwww_ncbi_nlm_nih_govPub_man', False, pyxb.utils.utility.Location('./pubchem.xsd', 1774, 6), )

    
    Pub_man = property(__Pub_man.value, __Pub_man.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Pub_equiv uses Python identifier Pub_equiv
    __Pub_equiv = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Pub_equiv'), 'Pub_equiv', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_125_httpwww_ncbi_nlm_nih_govPub_equiv', False, pyxb.utils.utility.Location('./pubchem.xsd', 1782, 6), )

    
    Pub_equiv = property(__Pub_equiv.value, __Pub_equiv.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Pub_pmid uses Python identifier Pub_pmid
    __Pub_pmid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Pub_pmid'), 'Pub_pmid', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_125_httpwww_ncbi_nlm_nih_govPub_pmid', False, pyxb.utils.utility.Location('./pubchem.xsd', 1790, 6), )

    
    Pub_pmid = property(__Pub_pmid.value, __Pub_pmid.set, None, None)

    _ElementMap.update({
        __Pub_gen.name() : __Pub_gen,
        __Pub_sub.name() : __Pub_sub,
        __Pub_medline.name() : __Pub_medline,
        __Pub_muid.name() : __Pub_muid,
        __Pub_article.name() : __Pub_article,
        __Pub_journal.name() : __Pub_journal,
        __Pub_book.name() : __Pub_book,
        __Pub_proc.name() : __Pub_proc,
        __Pub_patent.name() : __Pub_patent,
        __Pub_pat_id.name() : __Pub_pat_id,
        __Pub_man.name() : __Pub_man,
        __Pub_equiv.name() : __Pub_equiv,
        __Pub_pmid.name() : __Pub_pmid
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_126 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1706, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-gen uses Python identifier Cit_gen
    __Cit_gen = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-gen'), 'Cit_gen', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_126_httpwww_ncbi_nlm_nih_govCit_gen', False, pyxb.utils.utility.Location('./pubchem.xsd', 970, 0), )

    
    Cit_gen = property(__Cit_gen.value, __Cit_gen.set, None, None)

    _ElementMap.update({
        __Cit_gen.name() : __Cit_gen
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_127 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1714, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-sub uses Python identifier Cit_sub
    __Cit_sub = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-sub'), 'Cit_sub', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_127_httpwww_ncbi_nlm_nih_govCit_sub', False, pyxb.utils.utility.Location('./pubchem.xsd', 921, 0), )

    
    Cit_sub = property(__Cit_sub.value, __Cit_sub.set, None, None)

    _ElementMap.update({
        __Cit_sub.name() : __Cit_sub
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_128 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1721, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Medline-entry uses Python identifier Medline_entry
    __Medline_entry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry'), 'Medline_entry', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_128_httpwww_ncbi_nlm_nih_govMedline_entry', False, pyxb.utils.utility.Location('./pubchem.xsd', 1361, 0), )

    
    Medline_entry = property(__Medline_entry.value, __Medline_entry.set, None, None)

    _ElementMap.update({
        __Medline_entry.name() : __Medline_entry
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_129 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1730, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-art uses Python identifier Cit_art
    __Cit_art = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-art'), 'Cit_art', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_129_httpwww_ncbi_nlm_nih_govCit_art', False, pyxb.utils.utility.Location('./pubchem.xsd', 618, 0), )

    
    Cit_art = property(__Cit_art.value, __Cit_art.set, None, None)

    _ElementMap.update({
        __Cit_art.name() : __Cit_art
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_130 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1737, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-jour uses Python identifier Cit_jour
    __Cit_jour = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-jour'), 'Cit_jour', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_130_httpwww_ncbi_nlm_nih_govCit_jour', False, pyxb.utils.utility.Location('./pubchem.xsd', 677, 0), )

    
    Cit_jour = property(__Cit_jour.value, __Cit_jour.set, None, None)

    _ElementMap.update({
        __Cit_jour.name() : __Cit_jour
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_131 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1744, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-book uses Python identifier Cit_book
    __Cit_book = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-book'), 'Cit_book', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_131_httpwww_ncbi_nlm_nih_govCit_book', False, pyxb.utils.utility.Location('./pubchem.xsd', 700, 0), )

    
    Cit_book = property(__Cit_book.value, __Cit_book.set, None, None)

    _ElementMap.update({
        __Cit_book.name() : __Cit_book
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_132 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1752, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-proc uses Python identifier Cit_proc
    __Cit_proc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-proc'), 'Cit_proc', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_132_httpwww_ncbi_nlm_nih_govCit_proc', False, pyxb.utils.utility.Location('./pubchem.xsd', 739, 0), )

    
    Cit_proc = property(__Cit_proc.value, __Cit_proc.set, None, None)

    _ElementMap.update({
        __Cit_proc.name() : __Cit_proc
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_133 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1759, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-pat uses Python identifier Cit_pat
    __Cit_pat = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-pat'), 'Cit_pat', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_133_httpwww_ncbi_nlm_nih_govCit_pat', False, pyxb.utils.utility.Location('./pubchem.xsd', 769, 0), )

    
    Cit_pat = property(__Cit_pat.value, __Cit_pat.set, None, None)

    _ElementMap.update({
        __Cit_pat.name() : __Cit_pat
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_134 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1767, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Id-pat uses Python identifier Id_pat
    __Id_pat = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Id-pat'), 'Id_pat', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_134_httpwww_ncbi_nlm_nih_govId_pat', False, pyxb.utils.utility.Location('./pubchem.xsd', 863, 0), )

    
    Id_pat = property(__Id_pat.value, __Id_pat.set, None, None)

    _ElementMap.update({
        __Id_pat.name() : __Id_pat
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_135 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1775, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-let uses Python identifier Cit_let
    __Cit_let = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-let'), 'Cit_let', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_135_httpwww_ncbi_nlm_nih_govCit_let', False, pyxb.utils.utility.Location('./pubchem.xsd', 885, 0), )

    
    Cit_let = property(__Cit_let.value, __Cit_let.set, None, None)

    _ElementMap.update({
        __Cit_let.name() : __Cit_let
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_136 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1783, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Pub-equiv uses Python identifier Pub_equiv
    __Pub_equiv = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Pub-equiv'), 'Pub_equiv', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_136_httpwww_ncbi_nlm_nih_govPub_equiv', False, pyxb.utils.utility.Location('./pubchem.xsd', 1802, 0), )

    
    Pub_equiv = property(__Pub_equiv.value, __Pub_equiv.set, None, None)

    _ElementMap.update({
        __Pub_equiv.name() : __Pub_equiv
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_137 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1791, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PubMedId uses Python identifier PubMedId
    __PubMedId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PubMedId'), 'PubMedId', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_137_httpwww_ncbi_nlm_nih_govPubMedId', False, pyxb.utils.utility.Location('./pubchem.xsd', 509, 0), )

    
    PubMedId = property(__PubMedId.value, __PubMedId.set, None, None)

    _ElementMap.update({
        __PubMedId.name() : __PubMedId
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_138 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1803, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Pub uses Python identifier Pub
    __Pub = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Pub'), 'Pub', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_138_httpwww_ncbi_nlm_nih_govPub', True, pyxb.utils.utility.Location('./pubchem.xsd', 1701, 0), )

    
    Pub = property(__Pub.value, __Pub.set, None, None)

    _ElementMap.update({
        __Pub.name() : __Pub
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_139 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1811, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Pub-set_pub uses Python identifier Pub_set_pub
    __Pub_set_pub = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Pub-set_pub'), 'Pub_set_pub', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_139_httpwww_ncbi_nlm_nih_govPub_set_pub', False, pyxb.utils.utility.Location('./pubchem.xsd', 1813, 6), )

    
    Pub_set_pub = property(__Pub_set_pub.value, __Pub_set_pub.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Pub-set_medline uses Python identifier Pub_set_medline
    __Pub_set_medline = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Pub-set_medline'), 'Pub_set_medline', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_139_httpwww_ncbi_nlm_nih_govPub_set_medline', False, pyxb.utils.utility.Location('./pubchem.xsd', 1820, 6), )

    
    Pub_set_medline = property(__Pub_set_medline.value, __Pub_set_medline.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Pub-set_article uses Python identifier Pub_set_article
    __Pub_set_article = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Pub-set_article'), 'Pub_set_article', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_139_httpwww_ncbi_nlm_nih_govPub_set_article', False, pyxb.utils.utility.Location('./pubchem.xsd', 1827, 6), )

    
    Pub_set_article = property(__Pub_set_article.value, __Pub_set_article.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Pub-set_journal uses Python identifier Pub_set_journal
    __Pub_set_journal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Pub-set_journal'), 'Pub_set_journal', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_139_httpwww_ncbi_nlm_nih_govPub_set_journal', False, pyxb.utils.utility.Location('./pubchem.xsd', 1834, 6), )

    
    Pub_set_journal = property(__Pub_set_journal.value, __Pub_set_journal.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Pub-set_book uses Python identifier Pub_set_book
    __Pub_set_book = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Pub-set_book'), 'Pub_set_book', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_139_httpwww_ncbi_nlm_nih_govPub_set_book', False, pyxb.utils.utility.Location('./pubchem.xsd', 1841, 6), )

    
    Pub_set_book = property(__Pub_set_book.value, __Pub_set_book.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Pub-set_proc uses Python identifier Pub_set_proc
    __Pub_set_proc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Pub-set_proc'), 'Pub_set_proc', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_139_httpwww_ncbi_nlm_nih_govPub_set_proc', False, pyxb.utils.utility.Location('./pubchem.xsd', 1849, 6), )

    
    Pub_set_proc = property(__Pub_set_proc.value, __Pub_set_proc.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Pub-set_patent uses Python identifier Pub_set_patent
    __Pub_set_patent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Pub-set_patent'), 'Pub_set_patent', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_139_httpwww_ncbi_nlm_nih_govPub_set_patent', False, pyxb.utils.utility.Location('./pubchem.xsd', 1856, 6), )

    
    Pub_set_patent = property(__Pub_set_patent.value, __Pub_set_patent.set, None, None)

    _ElementMap.update({
        __Pub_set_pub.name() : __Pub_set_pub,
        __Pub_set_medline.name() : __Pub_set_medline,
        __Pub_set_article.name() : __Pub_set_article,
        __Pub_set_journal.name() : __Pub_set_journal,
        __Pub_set_book.name() : __Pub_set_book,
        __Pub_set_proc.name() : __Pub_set_proc,
        __Pub_set_patent.name() : __Pub_set_patent
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_140 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1814, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Pub uses Python identifier Pub
    __Pub = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Pub'), 'Pub', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_140_httpwww_ncbi_nlm_nih_govPub', True, pyxb.utils.utility.Location('./pubchem.xsd', 1701, 0), )

    
    Pub = property(__Pub.value, __Pub.set, None, None)

    _ElementMap.update({
        __Pub.name() : __Pub
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_141 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1821, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Medline-entry uses Python identifier Medline_entry
    __Medline_entry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry'), 'Medline_entry', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_141_httpwww_ncbi_nlm_nih_govMedline_entry', True, pyxb.utils.utility.Location('./pubchem.xsd', 1361, 0), )

    
    Medline_entry = property(__Medline_entry.value, __Medline_entry.set, None, None)

    _ElementMap.update({
        __Medline_entry.name() : __Medline_entry
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_142 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1828, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-art uses Python identifier Cit_art
    __Cit_art = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-art'), 'Cit_art', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_142_httpwww_ncbi_nlm_nih_govCit_art', True, pyxb.utils.utility.Location('./pubchem.xsd', 618, 0), )

    
    Cit_art = property(__Cit_art.value, __Cit_art.set, None, None)

    _ElementMap.update({
        __Cit_art.name() : __Cit_art
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_143 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1835, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-jour uses Python identifier Cit_jour
    __Cit_jour = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-jour'), 'Cit_jour', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_143_httpwww_ncbi_nlm_nih_govCit_jour', True, pyxb.utils.utility.Location('./pubchem.xsd', 677, 0), )

    
    Cit_jour = property(__Cit_jour.value, __Cit_jour.set, None, None)

    _ElementMap.update({
        __Cit_jour.name() : __Cit_jour
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_144 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1842, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-book uses Python identifier Cit_book
    __Cit_book = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-book'), 'Cit_book', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_144_httpwww_ncbi_nlm_nih_govCit_book', True, pyxb.utils.utility.Location('./pubchem.xsd', 700, 0), )

    
    Cit_book = property(__Cit_book.value, __Cit_book.set, None, None)

    _ElementMap.update({
        __Cit_book.name() : __Cit_book
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_145 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1850, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-proc uses Python identifier Cit_proc
    __Cit_proc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-proc'), 'Cit_proc', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_145_httpwww_ncbi_nlm_nih_govCit_proc', True, pyxb.utils.utility.Location('./pubchem.xsd', 739, 0), )

    
    Cit_proc = property(__Cit_proc.value, __Cit_proc.set, None, None)

    _ElementMap.update({
        __Cit_proc.name() : __Cit_proc
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_146 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1857, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Cit-pat uses Python identifier Cit_pat
    __Cit_pat = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Cit-pat'), 'Cit_pat', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_146_httpwww_ncbi_nlm_nih_govCit_pat', True, pyxb.utils.utility.Location('./pubchem.xsd', 769, 0), )

    
    Cit_pat = property(__Cit_pat.value, __Cit_pat.set, None, None)

    _ElementMap.update({
        __Cit_pat.name() : __Cit_pat
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_147 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1898, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Org-ref_taxname uses Python identifier Org_ref_taxname
    __Org_ref_taxname = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Org-ref_taxname'), 'Org_ref_taxname', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_147_httpwww_ncbi_nlm_nih_govOrg_ref_taxname', False, pyxb.utils.utility.Location('./pubchem.xsd', 1901, 6), )

    
    Org_ref_taxname = property(__Org_ref_taxname.value, __Org_ref_taxname.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Org-ref_common uses Python identifier Org_ref_common
    __Org_ref_common = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Org-ref_common'), 'Org_ref_common', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_147_httpwww_ncbi_nlm_nih_govOrg_ref_common', False, pyxb.utils.utility.Location('./pubchem.xsd', 1903, 6), )

    
    Org_ref_common = property(__Org_ref_common.value, __Org_ref_common.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Org-ref_mod uses Python identifier Org_ref_mod
    __Org_ref_mod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Org-ref_mod'), 'Org_ref_mod', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_147_httpwww_ncbi_nlm_nih_govOrg_ref_mod', False, pyxb.utils.utility.Location('./pubchem.xsd', 1905, 6), )

    
    Org_ref_mod = property(__Org_ref_mod.value, __Org_ref_mod.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Org-ref_db uses Python identifier Org_ref_db
    __Org_ref_db = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Org-ref_db'), 'Org_ref_db', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_147_httpwww_ncbi_nlm_nih_govOrg_ref_db', False, pyxb.utils.utility.Location('./pubchem.xsd', 1913, 6), )

    
    Org_ref_db = property(__Org_ref_db.value, __Org_ref_db.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Org-ref_syn uses Python identifier Org_ref_syn
    __Org_ref_syn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Org-ref_syn'), 'Org_ref_syn', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_147_httpwww_ncbi_nlm_nih_govOrg_ref_syn', False, pyxb.utils.utility.Location('./pubchem.xsd', 1921, 6), )

    
    Org_ref_syn = property(__Org_ref_syn.value, __Org_ref_syn.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}Org-ref_orgname uses Python identifier Org_ref_orgname
    __Org_ref_orgname = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Org-ref_orgname'), 'Org_ref_orgname', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_147_httpwww_ncbi_nlm_nih_govOrg_ref_orgname', False, pyxb.utils.utility.Location('./pubchem.xsd', 1928, 6), )

    
    Org_ref_orgname = property(__Org_ref_orgname.value, __Org_ref_orgname.set, None, None)

    _ElementMap.update({
        __Org_ref_taxname.name() : __Org_ref_taxname,
        __Org_ref_common.name() : __Org_ref_common,
        __Org_ref_mod.name() : __Org_ref_mod,
        __Org_ref_db.name() : __Org_ref_db,
        __Org_ref_syn.name() : __Org_ref_syn,
        __Org_ref_orgname.name() : __Org_ref_orgname
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_148 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1906, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Org-ref_mod_E uses Python identifier Org_ref_mod_E
    __Org_ref_mod_E = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Org-ref_mod_E'), 'Org_ref_mod_E', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_148_httpwww_ncbi_nlm_nih_govOrg_ref_mod_E', True, pyxb.utils.utility.Location('./pubchem.xsd', 1908, 12), )

    
    Org_ref_mod_E = property(__Org_ref_mod_E.value, __Org_ref_mod_E.set, None, None)

    _ElementMap.update({
        __Org_ref_mod_E.name() : __Org_ref_mod_E
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_149 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1914, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Dbtag uses Python identifier Dbtag
    __Dbtag = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Dbtag'), 'Dbtag', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_149_httpwww_ncbi_nlm_nih_govDbtag', True, pyxb.utils.utility.Location('./pubchem.xsd', 133, 0), )

    
    Dbtag = property(__Dbtag.value, __Dbtag.set, None, None)

    _ElementMap.update({
        __Dbtag.name() : __Dbtag
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_150 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1922, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Org-ref_syn_E uses Python identifier Org_ref_syn_E
    __Org_ref_syn_E = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Org-ref_syn_E'), 'Org_ref_syn_E', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_150_httpwww_ncbi_nlm_nih_govOrg_ref_syn_E', True, pyxb.utils.utility.Location('./pubchem.xsd', 1924, 12), )

    
    Org_ref_syn_E = property(__Org_ref_syn_E.value, __Org_ref_syn_E.set, None, None)

    _ElementMap.update({
        __Org_ref_syn_E.name() : __Org_ref_syn_E
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_151 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1929, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}OrgName uses Python identifier OrgName
    __OrgName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrgName'), 'OrgName', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_151_httpwww_ncbi_nlm_nih_govOrgName', False, pyxb.utils.utility.Location('./pubchem.xsd', 1939, 0), )

    
    OrgName = property(__OrgName.value, __OrgName.set, None, None)

    _ElementMap.update({
        __OrgName.name() : __OrgName
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_152 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1940, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}OrgName_name uses Python identifier OrgName_name
    __OrgName_name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrgName_name'), 'OrgName_name', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_152_httpwww_ncbi_nlm_nih_govOrgName_name', False, pyxb.utils.utility.Location('./pubchem.xsd', 1942, 6), )

    
    OrgName_name = property(__OrgName_name.value, __OrgName_name.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}OrgName_attrib uses Python identifier OrgName_attrib
    __OrgName_attrib = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrgName_attrib'), 'OrgName_attrib', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_152_httpwww_ncbi_nlm_nih_govOrgName_attrib', False, pyxb.utils.utility.Location('./pubchem.xsd', 1983, 6), )

    
    OrgName_attrib = property(__OrgName_attrib.value, __OrgName_attrib.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}OrgName_mod uses Python identifier OrgName_mod
    __OrgName_mod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrgName_mod'), 'OrgName_mod', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_152_httpwww_ncbi_nlm_nih_govOrgName_mod', False, pyxb.utils.utility.Location('./pubchem.xsd', 1984, 6), )

    
    OrgName_mod = property(__OrgName_mod.value, __OrgName_mod.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}OrgName_lineage uses Python identifier OrgName_lineage
    __OrgName_lineage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrgName_lineage'), 'OrgName_lineage', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_152_httpwww_ncbi_nlm_nih_govOrgName_lineage', False, pyxb.utils.utility.Location('./pubchem.xsd', 1992, 6), )

    
    OrgName_lineage = property(__OrgName_lineage.value, __OrgName_lineage.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}OrgName_gcode uses Python identifier OrgName_gcode
    __OrgName_gcode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrgName_gcode'), 'OrgName_gcode', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_152_httpwww_ncbi_nlm_nih_govOrgName_gcode', False, pyxb.utils.utility.Location('./pubchem.xsd', 1994, 6), )

    
    OrgName_gcode = property(__OrgName_gcode.value, __OrgName_gcode.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}OrgName_mgcode uses Python identifier OrgName_mgcode
    __OrgName_mgcode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrgName_mgcode'), 'OrgName_mgcode', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_152_httpwww_ncbi_nlm_nih_govOrgName_mgcode', False, pyxb.utils.utility.Location('./pubchem.xsd', 1996, 6), )

    
    OrgName_mgcode = property(__OrgName_mgcode.value, __OrgName_mgcode.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}OrgName_div uses Python identifier OrgName_div
    __OrgName_div = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrgName_div'), 'OrgName_div', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_152_httpwww_ncbi_nlm_nih_govOrgName_div', False, pyxb.utils.utility.Location('./pubchem.xsd', 1998, 6), )

    
    OrgName_div = property(__OrgName_div.value, __OrgName_div.set, None, None)

    _ElementMap.update({
        __OrgName_name.name() : __OrgName_name,
        __OrgName_attrib.name() : __OrgName_attrib,
        __OrgName_mod.name() : __OrgName_mod,
        __OrgName_lineage.name() : __OrgName_lineage,
        __OrgName_gcode.name() : __OrgName_gcode,
        __OrgName_mgcode.name() : __OrgName_mgcode,
        __OrgName_div.name() : __OrgName_div
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_153 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1943, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}OrgName_name_binomial uses Python identifier OrgName_name_binomial
    __OrgName_name_binomial = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrgName_name_binomial'), 'OrgName_name_binomial', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_153_httpwww_ncbi_nlm_nih_govOrgName_name_binomial', False, pyxb.utils.utility.Location('./pubchem.xsd', 1946, 12), )

    
    OrgName_name_binomial = property(__OrgName_name_binomial.value, __OrgName_name_binomial.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}OrgName_name_virus uses Python identifier OrgName_name_virus
    __OrgName_name_virus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrgName_name_virus'), 'OrgName_name_virus', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_153_httpwww_ncbi_nlm_nih_govOrgName_name_virus', False, pyxb.utils.utility.Location('./pubchem.xsd', 1954, 12), )

    
    OrgName_name_virus = property(__OrgName_name_virus.value, __OrgName_name_virus.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}OrgName_name_hybrid uses Python identifier OrgName_name_hybrid
    __OrgName_name_hybrid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrgName_name_hybrid'), 'OrgName_name_hybrid', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_153_httpwww_ncbi_nlm_nih_govOrgName_name_hybrid', False, pyxb.utils.utility.Location('./pubchem.xsd', 1956, 12), )

    
    OrgName_name_hybrid = property(__OrgName_name_hybrid.value, __OrgName_name_hybrid.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}OrgName_name_namedhybrid uses Python identifier OrgName_name_namedhybrid
    __OrgName_name_namedhybrid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrgName_name_namedhybrid'), 'OrgName_name_namedhybrid', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_153_httpwww_ncbi_nlm_nih_govOrgName_name_namedhybrid', False, pyxb.utils.utility.Location('./pubchem.xsd', 1964, 12), )

    
    OrgName_name_namedhybrid = property(__OrgName_name_namedhybrid.value, __OrgName_name_namedhybrid.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}OrgName_name_partial uses Python identifier OrgName_name_partial
    __OrgName_name_partial = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrgName_name_partial'), 'OrgName_name_partial', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_153_httpwww_ncbi_nlm_nih_govOrgName_name_partial', False, pyxb.utils.utility.Location('./pubchem.xsd', 1972, 12), )

    
    OrgName_name_partial = property(__OrgName_name_partial.value, __OrgName_name_partial.set, None, None)

    _ElementMap.update({
        __OrgName_name_binomial.name() : __OrgName_name_binomial,
        __OrgName_name_virus.name() : __OrgName_name_virus,
        __OrgName_name_hybrid.name() : __OrgName_name_hybrid,
        __OrgName_name_namedhybrid.name() : __OrgName_name_namedhybrid,
        __OrgName_name_partial.name() : __OrgName_name_partial
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_154 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1947, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}BinomialOrgName uses Python identifier BinomialOrgName
    __BinomialOrgName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BinomialOrgName'), 'BinomialOrgName', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_154_httpwww_ncbi_nlm_nih_govBinomialOrgName', False, pyxb.utils.utility.Location('./pubchem.xsd', 2071, 0), )

    
    BinomialOrgName = property(__BinomialOrgName.value, __BinomialOrgName.set, None, None)

    _ElementMap.update({
        __BinomialOrgName.name() : __BinomialOrgName
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_155 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1957, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}MultiOrgName uses Python identifier MultiOrgName
    __MultiOrgName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MultiOrgName'), 'MultiOrgName', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_155_httpwww_ncbi_nlm_nih_govMultiOrgName', False, pyxb.utils.utility.Location('./pubchem.xsd', 2084, 0), )

    
    MultiOrgName = property(__MultiOrgName.value, __MultiOrgName.set, None, None)

    _ElementMap.update({
        __MultiOrgName.name() : __MultiOrgName
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_156 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1965, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}BinomialOrgName uses Python identifier BinomialOrgName
    __BinomialOrgName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BinomialOrgName'), 'BinomialOrgName', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_156_httpwww_ncbi_nlm_nih_govBinomialOrgName', False, pyxb.utils.utility.Location('./pubchem.xsd', 2071, 0), )

    
    BinomialOrgName = property(__BinomialOrgName.value, __BinomialOrgName.set, None, None)

    _ElementMap.update({
        __BinomialOrgName.name() : __BinomialOrgName
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_157 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1973, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PartialOrgName uses Python identifier PartialOrgName
    __PartialOrgName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PartialOrgName'), 'PartialOrgName', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_157_httpwww_ncbi_nlm_nih_govPartialOrgName', False, pyxb.utils.utility.Location('./pubchem.xsd', 2093, 0), )

    
    PartialOrgName = property(__PartialOrgName.value, __PartialOrgName.set, None, None)

    _ElementMap.update({
        __PartialOrgName.name() : __PartialOrgName
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_158 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1985, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}OrgMod uses Python identifier OrgMod
    __OrgMod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrgMod'), 'OrgMod', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_158_httpwww_ncbi_nlm_nih_govOrgMod', True, pyxb.utils.utility.Location('./pubchem.xsd', 2003, 0), )

    
    OrgMod = property(__OrgMod.value, __OrgMod.set, None, None)

    _ElementMap.update({
        __OrgMod.name() : __OrgMod
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_159 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2004, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}OrgMod_subtype uses Python identifier OrgMod_subtype
    __OrgMod_subtype = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrgMod_subtype'), 'OrgMod_subtype', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_159_httpwww_ncbi_nlm_nih_govOrgMod_subtype', False, pyxb.utils.utility.Location('./pubchem.xsd', 2006, 6), )

    
    OrgMod_subtype = property(__OrgMod_subtype.value, __OrgMod_subtype.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}OrgMod_subname uses Python identifier OrgMod_subname
    __OrgMod_subname = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrgMod_subname'), 'OrgMod_subname', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_159_httpwww_ncbi_nlm_nih_govOrgMod_subname', False, pyxb.utils.utility.Location('./pubchem.xsd', 2064, 6), )

    
    OrgMod_subname = property(__OrgMod_subname.value, __OrgMod_subname.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}OrgMod_attrib uses Python identifier OrgMod_attrib
    __OrgMod_attrib = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrgMod_attrib'), 'OrgMod_attrib', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_159_httpwww_ncbi_nlm_nih_govOrgMod_attrib', False, pyxb.utils.utility.Location('./pubchem.xsd', 2066, 6), )

    
    OrgMod_attrib = property(__OrgMod_attrib.value, __OrgMod_attrib.set, None, None)

    _ElementMap.update({
        __OrgMod_subtype.name() : __OrgMod_subtype,
        __OrgMod_subname.name() : __OrgMod_subname,
        __OrgMod_attrib.name() : __OrgMod_attrib
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_160 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2072, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}BinomialOrgName_genus uses Python identifier BinomialOrgName_genus
    __BinomialOrgName_genus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BinomialOrgName_genus'), 'BinomialOrgName_genus', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_160_httpwww_ncbi_nlm_nih_govBinomialOrgName_genus', False, pyxb.utils.utility.Location('./pubchem.xsd', 2075, 6), )

    
    BinomialOrgName_genus = property(__BinomialOrgName_genus.value, __BinomialOrgName_genus.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}BinomialOrgName_species uses Python identifier BinomialOrgName_species
    __BinomialOrgName_species = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BinomialOrgName_species'), 'BinomialOrgName_species', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_160_httpwww_ncbi_nlm_nih_govBinomialOrgName_species', False, pyxb.utils.utility.Location('./pubchem.xsd', 2077, 6), )

    
    BinomialOrgName_species = property(__BinomialOrgName_species.value, __BinomialOrgName_species.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}BinomialOrgName_subspecies uses Python identifier BinomialOrgName_subspecies
    __BinomialOrgName_subspecies = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BinomialOrgName_subspecies'), 'BinomialOrgName_subspecies', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_160_httpwww_ncbi_nlm_nih_govBinomialOrgName_subspecies', False, pyxb.utils.utility.Location('./pubchem.xsd', 2078, 6), )

    
    BinomialOrgName_subspecies = property(__BinomialOrgName_subspecies.value, __BinomialOrgName_subspecies.set, None, None)

    _ElementMap.update({
        __BinomialOrgName_genus.name() : __BinomialOrgName_genus,
        __BinomialOrgName_species.name() : __BinomialOrgName_species,
        __BinomialOrgName_subspecies.name() : __BinomialOrgName_subspecies
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_161 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2085, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}OrgName uses Python identifier OrgName
    __OrgName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OrgName'), 'OrgName', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_161_httpwww_ncbi_nlm_nih_govOrgName', True, pyxb.utils.utility.Location('./pubchem.xsd', 1939, 0), )

    
    OrgName = property(__OrgName.value, __OrgName.set, None, None)

    _ElementMap.update({
        __OrgName.name() : __OrgName
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_162 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2094, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}TaxElement uses Python identifier TaxElement
    __TaxElement = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TaxElement'), 'TaxElement', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_162_httpwww_ncbi_nlm_nih_govTaxElement', True, pyxb.utils.utility.Location('./pubchem.xsd', 2101, 0), )

    
    TaxElement = property(__TaxElement.value, __TaxElement.set, None, None)

    _ElementMap.update({
        __TaxElement.name() : __TaxElement
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_163 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2102, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}TaxElement_fixed-level uses Python identifier TaxElement_fixed_level
    __TaxElement_fixed_level = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TaxElement_fixed-level'), 'TaxElement_fixed_level', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_163_httpwww_ncbi_nlm_nih_govTaxElement_fixed_level', False, pyxb.utils.utility.Location('./pubchem.xsd', 2104, 6), )

    
    TaxElement_fixed_level = property(__TaxElement_fixed_level.value, __TaxElement_fixed_level.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}TaxElement_level uses Python identifier TaxElement_level
    __TaxElement_level = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TaxElement_level'), 'TaxElement_level', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_163_httpwww_ncbi_nlm_nih_govTaxElement_level', False, pyxb.utils.utility.Location('./pubchem.xsd', 2125, 6), )

    
    TaxElement_level = property(__TaxElement_level.value, __TaxElement_level.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}TaxElement_name uses Python identifier TaxElement_name
    __TaxElement_name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TaxElement_name'), 'TaxElement_name', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_163_httpwww_ncbi_nlm_nih_govTaxElement_name', False, pyxb.utils.utility.Location('./pubchem.xsd', 2126, 6), )

    
    TaxElement_name = property(__TaxElement_name.value, __TaxElement_name.set, None, None)

    _ElementMap.update({
        __TaxElement_fixed_level.name() : __TaxElement_fixed_level,
        __TaxElement_level.name() : __TaxElement_level,
        __TaxElement_name.name() : __TaxElement_name
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_164 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2162, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}BioSource_genome uses Python identifier BioSource_genome
    __BioSource_genome = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BioSource_genome'), 'BioSource_genome', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_164_httpwww_ncbi_nlm_nih_govBioSource_genome', False, pyxb.utils.utility.Location('./pubchem.xsd', 2164, 6), )

    
    BioSource_genome = property(__BioSource_genome.value, __BioSource_genome.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}BioSource_origin uses Python identifier BioSource_origin
    __BioSource_origin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BioSource_origin'), 'BioSource_origin', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_164_httpwww_ncbi_nlm_nih_govBioSource_origin', False, pyxb.utils.utility.Location('./pubchem.xsd', 2200, 6), )

    
    BioSource_origin = property(__BioSource_origin.value, __BioSource_origin.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}BioSource_org uses Python identifier BioSource_org
    __BioSource_org = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BioSource_org'), 'BioSource_org', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_164_httpwww_ncbi_nlm_nih_govBioSource_org', False, pyxb.utils.utility.Location('./pubchem.xsd', 2228, 6), )

    
    BioSource_org = property(__BioSource_org.value, __BioSource_org.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}BioSource_subtype uses Python identifier BioSource_subtype
    __BioSource_subtype = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BioSource_subtype'), 'BioSource_subtype', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_164_httpwww_ncbi_nlm_nih_govBioSource_subtype', False, pyxb.utils.utility.Location('./pubchem.xsd', 2235, 6), )

    
    BioSource_subtype = property(__BioSource_subtype.value, __BioSource_subtype.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}BioSource_is-focus uses Python identifier BioSource_is_focus
    __BioSource_is_focus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BioSource_is-focus'), 'BioSource_is_focus', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_164_httpwww_ncbi_nlm_nih_govBioSource_is_focus', False, pyxb.utils.utility.Location('./pubchem.xsd', 2243, 6), )

    
    BioSource_is_focus = property(__BioSource_is_focus.value, __BioSource_is_focus.set, None, None)

    _ElementMap.update({
        __BioSource_genome.name() : __BioSource_genome,
        __BioSource_origin.name() : __BioSource_origin,
        __BioSource_org.name() : __BioSource_org,
        __BioSource_subtype.name() : __BioSource_subtype,
        __BioSource_is_focus.name() : __BioSource_is_focus
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_165 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2229, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Org-ref uses Python identifier Org_ref
    __Org_ref = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Org-ref'), 'Org_ref', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_165_httpwww_ncbi_nlm_nih_govOrg_ref', False, pyxb.utils.utility.Location('./pubchem.xsd', 1897, 0), )

    
    Org_ref = property(__Org_ref.value, __Org_ref.set, None, None)

    _ElementMap.update({
        __Org_ref.name() : __Org_ref
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_166 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2236, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}SubSource uses Python identifier SubSource
    __SubSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SubSource'), 'SubSource', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_166_httpwww_ncbi_nlm_nih_govSubSource', True, pyxb.utils.utility.Location('./pubchem.xsd', 2250, 0), )

    
    SubSource = property(__SubSource.value, __SubSource.set, None, None)

    _ElementMap.update({
        __SubSource.name() : __SubSource
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type EMPTY
class CTD_ANON_167 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2244, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    _ElementMap.update({
        
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_168 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2251, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}SubSource_subtype uses Python identifier SubSource_subtype
    __SubSource_subtype = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SubSource_subtype'), 'SubSource_subtype', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_168_httpwww_ncbi_nlm_nih_govSubSource_subtype', False, pyxb.utils.utility.Location('./pubchem.xsd', 2253, 6), )

    
    SubSource_subtype = property(__SubSource_subtype.value, __SubSource_subtype.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}SubSource_name uses Python identifier SubSource_name
    __SubSource_name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SubSource_name'), 'SubSource_name', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_168_httpwww_ncbi_nlm_nih_govSubSource_name', False, pyxb.utils.utility.Location('./pubchem.xsd', 2313, 6), )

    
    SubSource_name = property(__SubSource_name.value, __SubSource_name.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}SubSource_attrib uses Python identifier SubSource_attrib
    __SubSource_attrib = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SubSource_attrib'), 'SubSource_attrib', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_168_httpwww_ncbi_nlm_nih_govSubSource_attrib', False, pyxb.utils.utility.Location('./pubchem.xsd', 2315, 6), )

    
    SubSource_attrib = property(__SubSource_attrib.value, __SubSource_attrib.set, None, None)

    _ElementMap.update({
        __SubSource_subtype.name() : __SubSource_subtype,
        __SubSource_name.name() : __SubSource_name,
        __SubSource_attrib.name() : __SubSource_attrib
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_169 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2377, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Substance_sid uses Python identifier PC_Substance_sid
    __PC_Substance_sid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Substance_sid'), 'PC_Substance_sid', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_169_httpwww_ncbi_nlm_nih_govPC_Substance_sid', False, pyxb.utils.utility.Location('./pubchem.xsd', 2386, 6), )

    
    PC_Substance_sid = property(__PC_Substance_sid.value, __PC_Substance_sid.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Substance_source uses Python identifier PC_Substance_source
    __PC_Substance_source = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Substance_source'), 'PC_Substance_source', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_169_httpwww_ncbi_nlm_nih_govPC_Substance_source', False, pyxb.utils.utility.Location('./pubchem.xsd', 2394, 6), )

    
    PC_Substance_source = property(__PC_Substance_source.value, __PC_Substance_source.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Substance_pub uses Python identifier PC_Substance_pub
    __PC_Substance_pub = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Substance_pub'), 'PC_Substance_pub', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_169_httpwww_ncbi_nlm_nih_govPC_Substance_pub', False, pyxb.utils.utility.Location('./pubchem.xsd', 2405, 6), )

    
    PC_Substance_pub = property(__PC_Substance_pub.value, __PC_Substance_pub.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Substance_synonyms uses Python identifier PC_Substance_synonyms
    __PC_Substance_synonyms = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Substance_synonyms'), 'PC_Substance_synonyms', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_169_httpwww_ncbi_nlm_nih_govPC_Substance_synonyms', False, pyxb.utils.utility.Location('./pubchem.xsd', 2413, 6), )

    
    PC_Substance_synonyms = property(__PC_Substance_synonyms.value, __PC_Substance_synonyms.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Substance_comment uses Python identifier PC_Substance_comment
    __PC_Substance_comment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Substance_comment'), 'PC_Substance_comment', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_169_httpwww_ncbi_nlm_nih_govPC_Substance_comment', False, pyxb.utils.utility.Location('./pubchem.xsd', 2421, 6), )

    
    PC_Substance_comment = property(__PC_Substance_comment.value, __PC_Substance_comment.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Substance_xref uses Python identifier PC_Substance_xref
    __PC_Substance_xref = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Substance_xref'), 'PC_Substance_xref', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_169_httpwww_ncbi_nlm_nih_govPC_Substance_xref', False, pyxb.utils.utility.Location('./pubchem.xsd', 2429, 6), )

    
    PC_Substance_xref = property(__PC_Substance_xref.value, __PC_Substance_xref.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Substance_compound uses Python identifier PC_Substance_compound
    __PC_Substance_compound = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Substance_compound'), 'PC_Substance_compound', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_169_httpwww_ncbi_nlm_nih_govPC_Substance_compound', False, pyxb.utils.utility.Location('./pubchem.xsd', 2440, 6), )

    
    PC_Substance_compound = property(__PC_Substance_compound.value, __PC_Substance_compound.set, None, None)

    _ElementMap.update({
        __PC_Substance_sid.name() : __PC_Substance_sid,
        __PC_Substance_source.name() : __PC_Substance_source,
        __PC_Substance_pub.name() : __PC_Substance_pub,
        __PC_Substance_synonyms.name() : __PC_Substance_synonyms,
        __PC_Substance_comment.name() : __PC_Substance_comment,
        __PC_Substance_xref.name() : __PC_Substance_xref,
        __PC_Substance_compound.name() : __PC_Substance_compound
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_170 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2387, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-ID uses Python identifier PC_ID
    __PC_ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-ID'), 'PC_ID', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_170_httpwww_ncbi_nlm_nih_govPC_ID', False, pyxb.utils.utility.Location('./pubchem.xsd', 2461, 0), )

    
    PC_ID = property(__PC_ID.value, __PC_ID.set, None, None)

    _ElementMap.update({
        __PC_ID.name() : __PC_ID
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_171 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2395, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Source uses Python identifier PC_Source
    __PC_Source = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Source'), 'PC_Source', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_171_httpwww_ncbi_nlm_nih_govPC_Source', False, pyxb.utils.utility.Location('./pubchem.xsd', 2479, 0), )

    
    PC_Source = property(__PC_Source.value, __PC_Source.set, None, None)

    _ElementMap.update({
        __PC_Source.name() : __PC_Source
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_172 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2406, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Pub uses Python identifier Pub
    __Pub = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Pub'), 'Pub', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_172_httpwww_ncbi_nlm_nih_govPub', True, pyxb.utils.utility.Location('./pubchem.xsd', 1701, 0), )

    
    Pub = property(__Pub.value, __Pub.set, None, None)

    _ElementMap.update({
        __Pub.name() : __Pub
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_173 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2414, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Substance_synonyms_E uses Python identifier PC_Substance_synonyms_E
    __PC_Substance_synonyms_E = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Substance_synonyms_E'), 'PC_Substance_synonyms_E', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_173_httpwww_ncbi_nlm_nih_govPC_Substance_synonyms_E', True, pyxb.utils.utility.Location('./pubchem.xsd', 2416, 12), )

    
    PC_Substance_synonyms_E = property(__PC_Substance_synonyms_E.value, __PC_Substance_synonyms_E.set, None, None)

    _ElementMap.update({
        __PC_Substance_synonyms_E.name() : __PC_Substance_synonyms_E
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_174 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2422, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Substance_comment_E uses Python identifier PC_Substance_comment_E
    __PC_Substance_comment_E = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Substance_comment_E'), 'PC_Substance_comment_E', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_174_httpwww_ncbi_nlm_nih_govPC_Substance_comment_E', True, pyxb.utils.utility.Location('./pubchem.xsd', 2424, 12), )

    
    PC_Substance_comment_E = property(__PC_Substance_comment_E.value, __PC_Substance_comment_E.set, None, None)

    _ElementMap.update({
        __PC_Substance_comment_E.name() : __PC_Substance_comment_E
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_175 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2430, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-XRefData uses Python identifier PC_XRefData
    __PC_XRefData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData'), 'PC_XRefData', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_175_httpwww_ncbi_nlm_nih_govPC_XRefData', True, pyxb.utils.utility.Location('./pubchem.xsd', 2587, 0), )

    
    PC_XRefData = property(__PC_XRefData.value, __PC_XRefData.set, None, None)

    _ElementMap.update({
        __PC_XRefData.name() : __PC_XRefData
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_176 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2441, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Compounds uses Python identifier PC_Compounds
    __PC_Compounds = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Compounds'), 'PC_Compounds', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_176_httpwww_ncbi_nlm_nih_govPC_Compounds', False, pyxb.utils.utility.Location('./pubchem.xsd', 2770, 0), )

    
    PC_Compounds = property(__PC_Compounds.value, __PC_Compounds.set, None, None)

    _ElementMap.update({
        __PC_Compounds.name() : __PC_Compounds
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_177 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2453, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Substance uses Python identifier PC_Substance
    __PC_Substance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Substance'), 'PC_Substance', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_177_httpwww_ncbi_nlm_nih_govPC_Substance', True, pyxb.utils.utility.Location('./pubchem.xsd', 2376, 0), )

    
    PC_Substance = property(__PC_Substance.value, __PC_Substance.set, None, None)

    _ElementMap.update({
        __PC_Substance.name() : __PC_Substance
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_178 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2462, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-ID_id uses Python identifier PC_ID_id
    __PC_ID_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-ID_id'), 'PC_ID_id', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_178_httpwww_ncbi_nlm_nih_govPC_ID_id', False, pyxb.utils.utility.Location('./pubchem.xsd', 2468, 6), )

    
    PC_ID_id = property(__PC_ID_id.value, __PC_ID_id.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-ID_version uses Python identifier PC_ID_version
    __PC_ID_version = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-ID_version'), 'PC_ID_version', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_178_httpwww_ncbi_nlm_nih_govPC_ID_version', False, pyxb.utils.utility.Location('./pubchem.xsd', 2473, 6), )

    
    PC_ID_version = property(__PC_ID_version.value, __PC_ID_version.set, None, None)

    _ElementMap.update({
        __PC_ID_id.name() : __PC_ID_id,
        __PC_ID_version.name() : __PC_ID_version
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_179 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2480, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Source_individual uses Python identifier PC_Source_individual
    __PC_Source_individual = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Source_individual'), 'PC_Source_individual', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_179_httpwww_ncbi_nlm_nih_govPC_Source_individual', False, pyxb.utils.utility.Location('./pubchem.xsd', 2483, 6), )

    
    PC_Source_individual = property(__PC_Source_individual.value, __PC_Source_individual.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Source_db uses Python identifier PC_Source_db
    __PC_Source_db = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Source_db'), 'PC_Source_db', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_179_httpwww_ncbi_nlm_nih_govPC_Source_db', False, pyxb.utils.utility.Location('./pubchem.xsd', 2491, 6), )

    
    PC_Source_db = property(__PC_Source_db.value, __PC_Source_db.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Source_mmdb uses Python identifier PC_Source_mmdb
    __PC_Source_mmdb = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Source_mmdb'), 'PC_Source_mmdb', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_179_httpwww_ncbi_nlm_nih_govPC_Source_mmdb', False, pyxb.utils.utility.Location('./pubchem.xsd', 2499, 6), )

    
    PC_Source_mmdb = property(__PC_Source_mmdb.value, __PC_Source_mmdb.set, None, None)

    _ElementMap.update({
        __PC_Source_individual.name() : __PC_Source_individual,
        __PC_Source_db.name() : __PC_Source_db,
        __PC_Source_mmdb.name() : __PC_Source_mmdb
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_180 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2484, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Pub uses Python identifier Pub
    __Pub = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Pub'), 'Pub', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_180_httpwww_ncbi_nlm_nih_govPub', False, pyxb.utils.utility.Location('./pubchem.xsd', 1701, 0), )

    
    Pub = property(__Pub.value, __Pub.set, None, None)

    _ElementMap.update({
        __Pub.name() : __Pub
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_181 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2492, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-DBTracking uses Python identifier PC_DBTracking
    __PC_DBTracking = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-DBTracking'), 'PC_DBTracking', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_181_httpwww_ncbi_nlm_nih_govPC_DBTracking', False, pyxb.utils.utility.Location('./pubchem.xsd', 2511, 0), )

    
    PC_DBTracking = property(__PC_DBTracking.value, __PC_DBTracking.set, None, None)

    _ElementMap.update({
        __PC_DBTracking.name() : __PC_DBTracking
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_182 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2500, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-MMDBSource uses Python identifier PC_MMDBSource
    __PC_MMDBSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-MMDBSource'), 'PC_MMDBSource', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_182_httpwww_ncbi_nlm_nih_govPC_MMDBSource', False, pyxb.utils.utility.Location('./pubchem.xsd', 2547, 0), )

    
    PC_MMDBSource = property(__PC_MMDBSource.value, __PC_MMDBSource.set, None, None)

    _ElementMap.update({
        __PC_MMDBSource.name() : __PC_MMDBSource
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_183 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2512, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-DBTracking_name uses Python identifier PC_DBTracking_name
    __PC_DBTracking_name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-DBTracking_name'), 'PC_DBTracking_name', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_183_httpwww_ncbi_nlm_nih_govPC_DBTracking_name', False, pyxb.utils.utility.Location('./pubchem.xsd', 2515, 6), )

    
    PC_DBTracking_name = property(__PC_DBTracking_name.value, __PC_DBTracking_name.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-DBTracking_source-id uses Python identifier PC_DBTracking_source_id
    __PC_DBTracking_source_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-DBTracking_source-id'), 'PC_DBTracking_source_id', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_183_httpwww_ncbi_nlm_nih_govPC_DBTracking_source_id', False, pyxb.utils.utility.Location('./pubchem.xsd', 2517, 6), )

    
    PC_DBTracking_source_id = property(__PC_DBTracking_source_id.value, __PC_DBTracking_source_id.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-DBTracking_date uses Python identifier PC_DBTracking_date
    __PC_DBTracking_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-DBTracking_date'), 'PC_DBTracking_date', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_183_httpwww_ncbi_nlm_nih_govPC_DBTracking_date', False, pyxb.utils.utility.Location('./pubchem.xsd', 2525, 6), )

    
    PC_DBTracking_date = property(__PC_DBTracking_date.value, __PC_DBTracking_date.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-DBTracking_description uses Python identifier PC_DBTracking_description
    __PC_DBTracking_description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-DBTracking_description'), 'PC_DBTracking_description', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_183_httpwww_ncbi_nlm_nih_govPC_DBTracking_description', False, pyxb.utils.utility.Location('./pubchem.xsd', 2533, 6), )

    
    PC_DBTracking_description = property(__PC_DBTracking_description.value, __PC_DBTracking_description.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-DBTracking_pub uses Python identifier PC_DBTracking_pub
    __PC_DBTracking_pub = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-DBTracking_pub'), 'PC_DBTracking_pub', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_183_httpwww_ncbi_nlm_nih_govPC_DBTracking_pub', False, pyxb.utils.utility.Location('./pubchem.xsd', 2535, 6), )

    
    PC_DBTracking_pub = property(__PC_DBTracking_pub.value, __PC_DBTracking_pub.set, None, None)

    _ElementMap.update({
        __PC_DBTracking_name.name() : __PC_DBTracking_name,
        __PC_DBTracking_source_id.name() : __PC_DBTracking_source_id,
        __PC_DBTracking_date.name() : __PC_DBTracking_date,
        __PC_DBTracking_description.name() : __PC_DBTracking_description,
        __PC_DBTracking_pub.name() : __PC_DBTracking_pub
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_184 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2518, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Object-id uses Python identifier Object_id
    __Object_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Object-id'), 'Object_id', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_184_httpwww_ncbi_nlm_nih_govObject_id', False, pyxb.utils.utility.Location('./pubchem.xsd', 154, 0), )

    
    Object_id = property(__Object_id.value, __Object_id.set, None, None)

    _ElementMap.update({
        __Object_id.name() : __Object_id
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_185 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2526, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Date uses Python identifier Date
    __Date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Date'), 'Date', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_185_httpwww_ncbi_nlm_nih_govDate', False, pyxb.utils.utility.Location('./pubchem.xsd', 89, 0), )

    
    Date = property(__Date.value, __Date.set, None, None)

    _ElementMap.update({
        __Date.name() : __Date
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_186 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2536, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Pub uses Python identifier Pub
    __Pub = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Pub'), 'Pub', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_186_httpwww_ncbi_nlm_nih_govPub', False, pyxb.utils.utility.Location('./pubchem.xsd', 1701, 0), )

    
    Pub = property(__Pub.value, __Pub.set, None, None)

    _ElementMap.update({
        __Pub.name() : __Pub
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_187 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2548, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-MMDBSource_mmdb-id uses Python identifier PC_MMDBSource_mmdb_id
    __PC_MMDBSource_mmdb_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-MMDBSource_mmdb-id'), 'PC_MMDBSource_mmdb_id', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_187_httpwww_ncbi_nlm_nih_govPC_MMDBSource_mmdb_id', False, pyxb.utils.utility.Location('./pubchem.xsd', 2554, 6), )

    
    PC_MMDBSource_mmdb_id = property(__PC_MMDBSource_mmdb_id.value, __PC_MMDBSource_mmdb_id.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-MMDBSource_molecule-id uses Python identifier PC_MMDBSource_molecule_id
    __PC_MMDBSource_molecule_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-MMDBSource_molecule-id'), 'PC_MMDBSource_molecule_id', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_187_httpwww_ncbi_nlm_nih_govPC_MMDBSource_molecule_id', False, pyxb.utils.utility.Location('./pubchem.xsd', 2559, 6), )

    
    PC_MMDBSource_molecule_id = property(__PC_MMDBSource_molecule_id.value, __PC_MMDBSource_molecule_id.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-MMDBSource_molecule-name uses Python identifier PC_MMDBSource_molecule_name
    __PC_MMDBSource_molecule_name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-MMDBSource_molecule-name'), 'PC_MMDBSource_molecule_name', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_187_httpwww_ncbi_nlm_nih_govPC_MMDBSource_molecule_name', False, pyxb.utils.utility.Location('./pubchem.xsd', 2561, 6), )

    
    PC_MMDBSource_molecule_name = property(__PC_MMDBSource_molecule_name.value, __PC_MMDBSource_molecule_name.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-MMDBSource_residue-id uses Python identifier PC_MMDBSource_residue_id
    __PC_MMDBSource_residue_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-MMDBSource_residue-id'), 'PC_MMDBSource_residue_id', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_187_httpwww_ncbi_nlm_nih_govPC_MMDBSource_residue_id', False, pyxb.utils.utility.Location('./pubchem.xsd', 2572, 6), )

    
    PC_MMDBSource_residue_id = property(__PC_MMDBSource_residue_id.value, __PC_MMDBSource_residue_id.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-MMDBSource_residue-name uses Python identifier PC_MMDBSource_residue_name
    __PC_MMDBSource_residue_name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-MMDBSource_residue-name'), 'PC_MMDBSource_residue_name', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_187_httpwww_ncbi_nlm_nih_govPC_MMDBSource_residue_name', False, pyxb.utils.utility.Location('./pubchem.xsd', 2574, 6), )

    
    PC_MMDBSource_residue_name = property(__PC_MMDBSource_residue_name.value, __PC_MMDBSource_residue_name.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-MMDBSource_atom-id uses Python identifier PC_MMDBSource_atom_id
    __PC_MMDBSource_atom_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-MMDBSource_atom-id'), 'PC_MMDBSource_atom_id', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_187_httpwww_ncbi_nlm_nih_govPC_MMDBSource_atom_id', False, pyxb.utils.utility.Location('./pubchem.xsd', 2579, 6), )

    
    PC_MMDBSource_atom_id = property(__PC_MMDBSource_atom_id.value, __PC_MMDBSource_atom_id.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-MMDBSource_atom-name uses Python identifier PC_MMDBSource_atom_name
    __PC_MMDBSource_atom_name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-MMDBSource_atom-name'), 'PC_MMDBSource_atom_name', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_187_httpwww_ncbi_nlm_nih_govPC_MMDBSource_atom_name', False, pyxb.utils.utility.Location('./pubchem.xsd', 2581, 6), )

    
    PC_MMDBSource_atom_name = property(__PC_MMDBSource_atom_name.value, __PC_MMDBSource_atom_name.set, None, None)

    _ElementMap.update({
        __PC_MMDBSource_mmdb_id.name() : __PC_MMDBSource_mmdb_id,
        __PC_MMDBSource_molecule_id.name() : __PC_MMDBSource_molecule_id,
        __PC_MMDBSource_molecule_name.name() : __PC_MMDBSource_molecule_name,
        __PC_MMDBSource_residue_id.name() : __PC_MMDBSource_residue_id,
        __PC_MMDBSource_residue_name.name() : __PC_MMDBSource_residue_name,
        __PC_MMDBSource_atom_id.name() : __PC_MMDBSource_atom_id,
        __PC_MMDBSource_atom_name.name() : __PC_MMDBSource_atom_name
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_188 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2562, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-MMDBSource_molecule-name_E uses Python identifier PC_MMDBSource_molecule_name_E
    __PC_MMDBSource_molecule_name_E = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-MMDBSource_molecule-name_E'), 'PC_MMDBSource_molecule_name_E', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_188_httpwww_ncbi_nlm_nih_govPC_MMDBSource_molecule_name_E', True, pyxb.utils.utility.Location('./pubchem.xsd', 2564, 12), )

    
    PC_MMDBSource_molecule_name_E = property(__PC_MMDBSource_molecule_name_E.value, __PC_MMDBSource_molecule_name_E.set, None, None)

    _ElementMap.update({
        __PC_MMDBSource_molecule_name_E.name() : __PC_MMDBSource_molecule_name_E
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_189 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2588, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-XRefData_regid uses Python identifier PC_XRefData_regid
    __PC_XRefData_regid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_regid'), 'PC_XRefData_regid', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_189_httpwww_ncbi_nlm_nih_govPC_XRefData_regid', False, pyxb.utils.utility.Location('./pubchem.xsd', 2591, 6), )

    
    PC_XRefData_regid = property(__PC_XRefData_regid.value, __PC_XRefData_regid.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-XRefData_rn uses Python identifier PC_XRefData_rn
    __PC_XRefData_rn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_rn'), 'PC_XRefData_rn', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_189_httpwww_ncbi_nlm_nih_govPC_XRefData_rn', False, pyxb.utils.utility.Location('./pubchem.xsd', 2593, 6), )

    
    PC_XRefData_rn = property(__PC_XRefData_rn.value, __PC_XRefData_rn.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-XRefData_mesh uses Python identifier PC_XRefData_mesh
    __PC_XRefData_mesh = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_mesh'), 'PC_XRefData_mesh', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_189_httpwww_ncbi_nlm_nih_govPC_XRefData_mesh', False, pyxb.utils.utility.Location('./pubchem.xsd', 2595, 6), )

    
    PC_XRefData_mesh = property(__PC_XRefData_mesh.value, __PC_XRefData_mesh.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-XRefData_pmid uses Python identifier PC_XRefData_pmid
    __PC_XRefData_pmid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_pmid'), 'PC_XRefData_pmid', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_189_httpwww_ncbi_nlm_nih_govPC_XRefData_pmid', False, pyxb.utils.utility.Location('./pubchem.xsd', 2600, 6), )

    
    PC_XRefData_pmid = property(__PC_XRefData_pmid.value, __PC_XRefData_pmid.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-XRefData_gi uses Python identifier PC_XRefData_gi
    __PC_XRefData_gi = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_gi'), 'PC_XRefData_gi', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_189_httpwww_ncbi_nlm_nih_govPC_XRefData_gi', False, pyxb.utils.utility.Location('./pubchem.xsd', 2606, 6), )

    
    PC_XRefData_gi = property(__PC_XRefData_gi.value, __PC_XRefData_gi.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-XRefData_mmdb uses Python identifier PC_XRefData_mmdb
    __PC_XRefData_mmdb = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_mmdb'), 'PC_XRefData_mmdb', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_189_httpwww_ncbi_nlm_nih_govPC_XRefData_mmdb', False, pyxb.utils.utility.Location('./pubchem.xsd', 2611, 6), )

    
    PC_XRefData_mmdb = property(__PC_XRefData_mmdb.value, __PC_XRefData_mmdb.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-XRefData_sid uses Python identifier PC_XRefData_sid
    __PC_XRefData_sid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_sid'), 'PC_XRefData_sid', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_189_httpwww_ncbi_nlm_nih_govPC_XRefData_sid', False, pyxb.utils.utility.Location('./pubchem.xsd', 2616, 6), )

    
    PC_XRefData_sid = property(__PC_XRefData_sid.value, __PC_XRefData_sid.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-XRefData_cid uses Python identifier PC_XRefData_cid
    __PC_XRefData_cid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_cid'), 'PC_XRefData_cid', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_189_httpwww_ncbi_nlm_nih_govPC_XRefData_cid', False, pyxb.utils.utility.Location('./pubchem.xsd', 2621, 6), )

    
    PC_XRefData_cid = property(__PC_XRefData_cid.value, __PC_XRefData_cid.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-XRefData_dburl uses Python identifier PC_XRefData_dburl
    __PC_XRefData_dburl = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_dburl'), 'PC_XRefData_dburl', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_189_httpwww_ncbi_nlm_nih_govPC_XRefData_dburl', False, pyxb.utils.utility.Location('./pubchem.xsd', 2623, 6), )

    
    PC_XRefData_dburl = property(__PC_XRefData_dburl.value, __PC_XRefData_dburl.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-XRefData_sburl uses Python identifier PC_XRefData_sburl
    __PC_XRefData_sburl = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_sburl'), 'PC_XRefData_sburl', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_189_httpwww_ncbi_nlm_nih_govPC_XRefData_sburl', False, pyxb.utils.utility.Location('./pubchem.xsd', 2625, 6), )

    
    PC_XRefData_sburl = property(__PC_XRefData_sburl.value, __PC_XRefData_sburl.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-XRefData_asurl uses Python identifier PC_XRefData_asurl
    __PC_XRefData_asurl = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_asurl'), 'PC_XRefData_asurl', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_189_httpwww_ncbi_nlm_nih_govPC_XRefData_asurl', False, pyxb.utils.utility.Location('./pubchem.xsd', 2627, 6), )

    
    PC_XRefData_asurl = property(__PC_XRefData_asurl.value, __PC_XRefData_asurl.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-XRefData_protein-gi uses Python identifier PC_XRefData_protein_gi
    __PC_XRefData_protein_gi = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_protein-gi'), 'PC_XRefData_protein_gi', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_189_httpwww_ncbi_nlm_nih_govPC_XRefData_protein_gi', False, pyxb.utils.utility.Location('./pubchem.xsd', 2632, 6), )

    
    PC_XRefData_protein_gi = property(__PC_XRefData_protein_gi.value, __PC_XRefData_protein_gi.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-XRefData_nucleotide-gi uses Python identifier PC_XRefData_nucleotide_gi
    __PC_XRefData_nucleotide_gi = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_nucleotide-gi'), 'PC_XRefData_nucleotide_gi', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_189_httpwww_ncbi_nlm_nih_govPC_XRefData_nucleotide_gi', False, pyxb.utils.utility.Location('./pubchem.xsd', 2637, 6), )

    
    PC_XRefData_nucleotide_gi = property(__PC_XRefData_nucleotide_gi.value, __PC_XRefData_nucleotide_gi.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-XRefData_taxonomy uses Python identifier PC_XRefData_taxonomy
    __PC_XRefData_taxonomy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_taxonomy'), 'PC_XRefData_taxonomy', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_189_httpwww_ncbi_nlm_nih_govPC_XRefData_taxonomy', False, pyxb.utils.utility.Location('./pubchem.xsd', 2642, 6), )

    
    PC_XRefData_taxonomy = property(__PC_XRefData_taxonomy.value, __PC_XRefData_taxonomy.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-XRefData_aid uses Python identifier PC_XRefData_aid
    __PC_XRefData_aid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_aid'), 'PC_XRefData_aid', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_189_httpwww_ncbi_nlm_nih_govPC_XRefData_aid', False, pyxb.utils.utility.Location('./pubchem.xsd', 2647, 6), )

    
    PC_XRefData_aid = property(__PC_XRefData_aid.value, __PC_XRefData_aid.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-XRefData_mim uses Python identifier PC_XRefData_mim
    __PC_XRefData_mim = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_mim'), 'PC_XRefData_mim', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_189_httpwww_ncbi_nlm_nih_govPC_XRefData_mim', False, pyxb.utils.utility.Location('./pubchem.xsd', 2652, 6), )

    
    PC_XRefData_mim = property(__PC_XRefData_mim.value, __PC_XRefData_mim.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-XRefData_gene uses Python identifier PC_XRefData_gene
    __PC_XRefData_gene = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_gene'), 'PC_XRefData_gene', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_189_httpwww_ncbi_nlm_nih_govPC_XRefData_gene', False, pyxb.utils.utility.Location('./pubchem.xsd', 2657, 6), )

    
    PC_XRefData_gene = property(__PC_XRefData_gene.value, __PC_XRefData_gene.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-XRefData_probe uses Python identifier PC_XRefData_probe
    __PC_XRefData_probe = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_probe'), 'PC_XRefData_probe', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_189_httpwww_ncbi_nlm_nih_govPC_XRefData_probe', False, pyxb.utils.utility.Location('./pubchem.xsd', 2662, 6), )

    
    PC_XRefData_probe = property(__PC_XRefData_probe.value, __PC_XRefData_probe.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-XRefData_biosystem uses Python identifier PC_XRefData_biosystem
    __PC_XRefData_biosystem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_biosystem'), 'PC_XRefData_biosystem', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_189_httpwww_ncbi_nlm_nih_govPC_XRefData_biosystem', False, pyxb.utils.utility.Location('./pubchem.xsd', 2667, 6), )

    
    PC_XRefData_biosystem = property(__PC_XRefData_biosystem.value, __PC_XRefData_biosystem.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-XRefData_geogse uses Python identifier PC_XRefData_geogse
    __PC_XRefData_geogse = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_geogse'), 'PC_XRefData_geogse', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_189_httpwww_ncbi_nlm_nih_govPC_XRefData_geogse', False, pyxb.utils.utility.Location('./pubchem.xsd', 2672, 6), )

    
    PC_XRefData_geogse = property(__PC_XRefData_geogse.value, __PC_XRefData_geogse.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-XRefData_geogsm uses Python identifier PC_XRefData_geogsm
    __PC_XRefData_geogsm = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_geogsm'), 'PC_XRefData_geogsm', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_189_httpwww_ncbi_nlm_nih_govPC_XRefData_geogsm', False, pyxb.utils.utility.Location('./pubchem.xsd', 2677, 6), )

    
    PC_XRefData_geogsm = property(__PC_XRefData_geogsm.value, __PC_XRefData_geogsm.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-XRefData_patent uses Python identifier PC_XRefData_patent
    __PC_XRefData_patent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_patent'), 'PC_XRefData_patent', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_189_httpwww_ncbi_nlm_nih_govPC_XRefData_patent', False, pyxb.utils.utility.Location('./pubchem.xsd', 2679, 6), )

    
    PC_XRefData_patent = property(__PC_XRefData_patent.value, __PC_XRefData_patent.set, None, None)

    _ElementMap.update({
        __PC_XRefData_regid.name() : __PC_XRefData_regid,
        __PC_XRefData_rn.name() : __PC_XRefData_rn,
        __PC_XRefData_mesh.name() : __PC_XRefData_mesh,
        __PC_XRefData_pmid.name() : __PC_XRefData_pmid,
        __PC_XRefData_gi.name() : __PC_XRefData_gi,
        __PC_XRefData_mmdb.name() : __PC_XRefData_mmdb,
        __PC_XRefData_sid.name() : __PC_XRefData_sid,
        __PC_XRefData_cid.name() : __PC_XRefData_cid,
        __PC_XRefData_dburl.name() : __PC_XRefData_dburl,
        __PC_XRefData_sburl.name() : __PC_XRefData_sburl,
        __PC_XRefData_asurl.name() : __PC_XRefData_asurl,
        __PC_XRefData_protein_gi.name() : __PC_XRefData_protein_gi,
        __PC_XRefData_nucleotide_gi.name() : __PC_XRefData_nucleotide_gi,
        __PC_XRefData_taxonomy.name() : __PC_XRefData_taxonomy,
        __PC_XRefData_aid.name() : __PC_XRefData_aid,
        __PC_XRefData_mim.name() : __PC_XRefData_mim,
        __PC_XRefData_gene.name() : __PC_XRefData_gene,
        __PC_XRefData_probe.name() : __PC_XRefData_probe,
        __PC_XRefData_biosystem.name() : __PC_XRefData_biosystem,
        __PC_XRefData_geogse.name() : __PC_XRefData_geogse,
        __PC_XRefData_geogsm.name() : __PC_XRefData_geogsm,
        __PC_XRefData_patent.name() : __PC_XRefData_patent
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_190 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2686, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Compound_id uses Python identifier PC_Compound_id
    __PC_Compound_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Compound_id'), 'PC_Compound_id', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_190_httpwww_ncbi_nlm_nih_govPC_Compound_id', False, pyxb.utils.utility.Location('./pubchem.xsd', 2692, 6), )

    
    PC_Compound_id = property(__PC_Compound_id.value, __PC_Compound_id.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Compound_atoms uses Python identifier PC_Compound_atoms
    __PC_Compound_atoms = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Compound_atoms'), 'PC_Compound_atoms', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_190_httpwww_ncbi_nlm_nih_govPC_Compound_atoms', False, pyxb.utils.utility.Location('./pubchem.xsd', 2700, 6), )

    
    PC_Compound_atoms = property(__PC_Compound_atoms.value, __PC_Compound_atoms.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Compound_bonds uses Python identifier PC_Compound_bonds
    __PC_Compound_bonds = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Compound_bonds'), 'PC_Compound_bonds', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_190_httpwww_ncbi_nlm_nih_govPC_Compound_bonds', False, pyxb.utils.utility.Location('./pubchem.xsd', 2708, 6), )

    
    PC_Compound_bonds = property(__PC_Compound_bonds.value, __PC_Compound_bonds.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Compound_stereo uses Python identifier PC_Compound_stereo
    __PC_Compound_stereo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Compound_stereo'), 'PC_Compound_stereo', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_190_httpwww_ncbi_nlm_nih_govPC_Compound_stereo', False, pyxb.utils.utility.Location('./pubchem.xsd', 2716, 6), )

    
    PC_Compound_stereo = property(__PC_Compound_stereo.value, __PC_Compound_stereo.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Compound_coords uses Python identifier PC_Compound_coords
    __PC_Compound_coords = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Compound_coords'), 'PC_Compound_coords', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_190_httpwww_ncbi_nlm_nih_govPC_Compound_coords', False, pyxb.utils.utility.Location('./pubchem.xsd', 2724, 6), )

    
    PC_Compound_coords = property(__PC_Compound_coords.value, __PC_Compound_coords.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Compound_charge uses Python identifier PC_Compound_charge
    __PC_Compound_charge = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Compound_charge'), 'PC_Compound_charge', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_190_httpwww_ncbi_nlm_nih_govPC_Compound_charge', False, pyxb.utils.utility.Location('./pubchem.xsd', 2732, 6), )

    
    PC_Compound_charge = property(__PC_Compound_charge.value, __PC_Compound_charge.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Compound_props uses Python identifier PC_Compound_props
    __PC_Compound_props = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Compound_props'), 'PC_Compound_props', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_190_httpwww_ncbi_nlm_nih_govPC_Compound_props', False, pyxb.utils.utility.Location('./pubchem.xsd', 2734, 6), )

    
    PC_Compound_props = property(__PC_Compound_props.value, __PC_Compound_props.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Compound_stereogroups uses Python identifier PC_Compound_stereogroups
    __PC_Compound_stereogroups = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Compound_stereogroups'), 'PC_Compound_stereogroups', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_190_httpwww_ncbi_nlm_nih_govPC_Compound_stereogroups', False, pyxb.utils.utility.Location('./pubchem.xsd', 2742, 6), )

    
    PC_Compound_stereogroups = property(__PC_Compound_stereogroups.value, __PC_Compound_stereogroups.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Compound_count uses Python identifier PC_Compound_count
    __PC_Compound_count = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Compound_count'), 'PC_Compound_count', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_190_httpwww_ncbi_nlm_nih_govPC_Compound_count', False, pyxb.utils.utility.Location('./pubchem.xsd', 2750, 6), )

    
    PC_Compound_count = property(__PC_Compound_count.value, __PC_Compound_count.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Compound_vbalt uses Python identifier PC_Compound_vbalt
    __PC_Compound_vbalt = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Compound_vbalt'), 'PC_Compound_vbalt', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_190_httpwww_ncbi_nlm_nih_govPC_Compound_vbalt', False, pyxb.utils.utility.Location('./pubchem.xsd', 2758, 6), )

    
    PC_Compound_vbalt = property(__PC_Compound_vbalt.value, __PC_Compound_vbalt.set, None, None)

    _ElementMap.update({
        __PC_Compound_id.name() : __PC_Compound_id,
        __PC_Compound_atoms.name() : __PC_Compound_atoms,
        __PC_Compound_bonds.name() : __PC_Compound_bonds,
        __PC_Compound_stereo.name() : __PC_Compound_stereo,
        __PC_Compound_coords.name() : __PC_Compound_coords,
        __PC_Compound_charge.name() : __PC_Compound_charge,
        __PC_Compound_props.name() : __PC_Compound_props,
        __PC_Compound_stereogroups.name() : __PC_Compound_stereogroups,
        __PC_Compound_count.name() : __PC_Compound_count,
        __PC_Compound_vbalt.name() : __PC_Compound_vbalt
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_191 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2693, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-CompoundType uses Python identifier PC_CompoundType
    __PC_CompoundType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-CompoundType'), 'PC_CompoundType', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_191_httpwww_ncbi_nlm_nih_govPC_CompoundType', False, pyxb.utils.utility.Location('./pubchem.xsd', 2782, 0), )

    
    PC_CompoundType = property(__PC_CompoundType.value, __PC_CompoundType.set, None, None)

    _ElementMap.update({
        __PC_CompoundType.name() : __PC_CompoundType
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_192 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2701, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Atoms uses Python identifier PC_Atoms
    __PC_Atoms = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Atoms'), 'PC_Atoms', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_192_httpwww_ncbi_nlm_nih_govPC_Atoms', False, pyxb.utils.utility.Location('./pubchem.xsd', 3372, 0), )

    
    PC_Atoms = property(__PC_Atoms.value, __PC_Atoms.set, None, None)

    _ElementMap.update({
        __PC_Atoms.name() : __PC_Atoms
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_193 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2709, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Bonds uses Python identifier PC_Bonds
    __PC_Bonds = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Bonds'), 'PC_Bonds', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_193_httpwww_ncbi_nlm_nih_govPC_Bonds', False, pyxb.utils.utility.Location('./pubchem.xsd', 3688, 0), )

    
    PC_Bonds = property(__PC_Bonds.value, __PC_Bonds.set, None, None)

    _ElementMap.update({
        __PC_Bonds.name() : __PC_Bonds
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_194 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2717, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoCenter uses Python identifier PC_StereoCenter
    __PC_StereoCenter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoCenter'), 'PC_StereoCenter', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_194_httpwww_ncbi_nlm_nih_govPC_StereoCenter', True, pyxb.utils.utility.Location('./pubchem.xsd', 3764, 0), )

    
    PC_StereoCenter = property(__PC_StereoCenter.value, __PC_StereoCenter.set, None, None)

    _ElementMap.update({
        __PC_StereoCenter.name() : __PC_StereoCenter
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_195 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2725, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Coordinates uses Python identifier PC_Coordinates
    __PC_Coordinates = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Coordinates'), 'PC_Coordinates', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_195_httpwww_ncbi_nlm_nih_govPC_Coordinates', True, pyxb.utils.utility.Location('./pubchem.xsd', 3121, 0), )

    
    PC_Coordinates = property(__PC_Coordinates.value, __PC_Coordinates.set, None, None)

    _ElementMap.update({
        __PC_Coordinates.name() : __PC_Coordinates
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_196 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2735, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-InfoData uses Python identifier PC_InfoData
    __PC_InfoData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData'), 'PC_InfoData', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_196_httpwww_ncbi_nlm_nih_govPC_InfoData', True, pyxb.utils.utility.Location('./pubchem.xsd', 2925, 0), )

    
    PC_InfoData = property(__PC_InfoData.value, __PC_InfoData.set, None, None)

    _ElementMap.update({
        __PC_InfoData.name() : __PC_InfoData
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_197 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2743, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoGroup uses Python identifier PC_StereoGroup
    __PC_StereoGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoGroup'), 'PC_StereoGroup', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_197_httpwww_ncbi_nlm_nih_govPC_StereoGroup', True, pyxb.utils.utility.Location('./pubchem.xsd', 2882, 0), )

    
    PC_StereoGroup = property(__PC_StereoGroup.value, __PC_StereoGroup.set, None, None)

    _ElementMap.update({
        __PC_StereoGroup.name() : __PC_StereoGroup
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_198 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2751, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Count uses Python identifier PC_Count
    __PC_Count = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Count'), 'PC_Count', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_198_httpwww_ncbi_nlm_nih_govPC_Count', False, pyxb.utils.utility.Location('./pubchem.xsd', 2837, 0), )

    
    PC_Count = property(__PC_Count.value, __PC_Count.set, None, None)

    _ElementMap.update({
        __PC_Count.name() : __PC_Count
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_199 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2759, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Compounds uses Python identifier PC_Compounds
    __PC_Compounds = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Compounds'), 'PC_Compounds', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_199_httpwww_ncbi_nlm_nih_govPC_Compounds', False, pyxb.utils.utility.Location('./pubchem.xsd', 2770, 0), )

    
    PC_Compounds = property(__PC_Compounds.value, __PC_Compounds.set, None, None)

    _ElementMap.update({
        __PC_Compounds.name() : __PC_Compounds
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_200 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2771, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Compound uses Python identifier PC_Compound
    __PC_Compound = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Compound'), 'PC_Compound', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_200_httpwww_ncbi_nlm_nih_govPC_Compound', True, pyxb.utils.utility.Location('./pubchem.xsd', 2685, 0), )

    
    PC_Compound = property(__PC_Compound.value, __PC_Compound.set, None, None)

    _ElementMap.update({
        __PC_Compound.name() : __PC_Compound
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_201 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2783, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-CompoundType_type uses Python identifier PC_CompoundType_type
    __PC_CompoundType_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-CompoundType_type'), 'PC_CompoundType_type', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_201_httpwww_ncbi_nlm_nih_govPC_CompoundType_type', False, pyxb.utils.utility.Location('./pubchem.xsd', 2785, 6), )

    
    PC_CompoundType_type = property(__PC_CompoundType_type.value, __PC_CompoundType_type.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-CompoundType_id uses Python identifier PC_CompoundType_id
    __PC_CompoundType_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-CompoundType_id'), 'PC_CompoundType_id', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_201_httpwww_ncbi_nlm_nih_govPC_CompoundType_id', False, pyxb.utils.utility.Location('./pubchem.xsd', 2820, 6), )

    
    PC_CompoundType_id = property(__PC_CompoundType_id.value, __PC_CompoundType_id.set, None, None)

    _ElementMap.update({
        __PC_CompoundType_type.name() : __PC_CompoundType_type,
        __PC_CompoundType_id.name() : __PC_CompoundType_id
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_202 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2821, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-CompoundType_id_cid uses Python identifier PC_CompoundType_id_cid
    __PC_CompoundType_id_cid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-CompoundType_id_cid'), 'PC_CompoundType_id_cid', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_202_httpwww_ncbi_nlm_nih_govPC_CompoundType_id_cid', False, pyxb.utils.utility.Location('./pubchem.xsd', 2824, 12), )

    
    PC_CompoundType_id_cid = property(__PC_CompoundType_id_cid.value, __PC_CompoundType_id_cid.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-CompoundType_id_sid uses Python identifier PC_CompoundType_id_sid
    __PC_CompoundType_id_sid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-CompoundType_id_sid'), 'PC_CompoundType_id_sid', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_202_httpwww_ncbi_nlm_nih_govPC_CompoundType_id_sid', False, pyxb.utils.utility.Location('./pubchem.xsd', 2826, 12), )

    
    PC_CompoundType_id_sid = property(__PC_CompoundType_id_sid.value, __PC_CompoundType_id_sid.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-CompoundType_id_xid uses Python identifier PC_CompoundType_id_xid
    __PC_CompoundType_id_xid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-CompoundType_id_xid'), 'PC_CompoundType_id_xid', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_202_httpwww_ncbi_nlm_nih_govPC_CompoundType_id_xid', False, pyxb.utils.utility.Location('./pubchem.xsd', 2828, 12), )

    
    PC_CompoundType_id_xid = property(__PC_CompoundType_id_xid.value, __PC_CompoundType_id_xid.set, None, None)

    _ElementMap.update({
        __PC_CompoundType_id_cid.name() : __PC_CompoundType_id_cid,
        __PC_CompoundType_id_sid.name() : __PC_CompoundType_id_sid,
        __PC_CompoundType_id_xid.name() : __PC_CompoundType_id_xid
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_203 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2838, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Count_heavy-atom uses Python identifier PC_Count_heavy_atom
    __PC_Count_heavy_atom = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Count_heavy-atom'), 'PC_Count_heavy_atom', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_203_httpwww_ncbi_nlm_nih_govPC_Count_heavy_atom', False, pyxb.utils.utility.Location('./pubchem.xsd', 2841, 6), )

    
    PC_Count_heavy_atom = property(__PC_Count_heavy_atom.value, __PC_Count_heavy_atom.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Count_atom-chiral uses Python identifier PC_Count_atom_chiral
    __PC_Count_atom_chiral = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Count_atom-chiral'), 'PC_Count_atom_chiral', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_203_httpwww_ncbi_nlm_nih_govPC_Count_atom_chiral', False, pyxb.utils.utility.Location('./pubchem.xsd', 2846, 6), )

    
    PC_Count_atom_chiral = property(__PC_Count_atom_chiral.value, __PC_Count_atom_chiral.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Count_atom-chiral-def uses Python identifier PC_Count_atom_chiral_def
    __PC_Count_atom_chiral_def = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Count_atom-chiral-def'), 'PC_Count_atom_chiral_def', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_203_httpwww_ncbi_nlm_nih_govPC_Count_atom_chiral_def', False, pyxb.utils.utility.Location('./pubchem.xsd', 2848, 6), )

    
    PC_Count_atom_chiral_def = property(__PC_Count_atom_chiral_def.value, __PC_Count_atom_chiral_def.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Count_atom-chiral-undef uses Python identifier PC_Count_atom_chiral_undef
    __PC_Count_atom_chiral_undef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Count_atom-chiral-undef'), 'PC_Count_atom_chiral_undef', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_203_httpwww_ncbi_nlm_nih_govPC_Count_atom_chiral_undef', False, pyxb.utils.utility.Location('./pubchem.xsd', 2850, 6), )

    
    PC_Count_atom_chiral_undef = property(__PC_Count_atom_chiral_undef.value, __PC_Count_atom_chiral_undef.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Count_bond-chiral uses Python identifier PC_Count_bond_chiral
    __PC_Count_bond_chiral = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Count_bond-chiral'), 'PC_Count_bond_chiral', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_203_httpwww_ncbi_nlm_nih_govPC_Count_bond_chiral', False, pyxb.utils.utility.Location('./pubchem.xsd', 2852, 6), )

    
    PC_Count_bond_chiral = property(__PC_Count_bond_chiral.value, __PC_Count_bond_chiral.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Count_bond-chiral-def uses Python identifier PC_Count_bond_chiral_def
    __PC_Count_bond_chiral_def = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Count_bond-chiral-def'), 'PC_Count_bond_chiral_def', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_203_httpwww_ncbi_nlm_nih_govPC_Count_bond_chiral_def', False, pyxb.utils.utility.Location('./pubchem.xsd', 2854, 6), )

    
    PC_Count_bond_chiral_def = property(__PC_Count_bond_chiral_def.value, __PC_Count_bond_chiral_def.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Count_bond-chiral-undef uses Python identifier PC_Count_bond_chiral_undef
    __PC_Count_bond_chiral_undef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Count_bond-chiral-undef'), 'PC_Count_bond_chiral_undef', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_203_httpwww_ncbi_nlm_nih_govPC_Count_bond_chiral_undef', False, pyxb.utils.utility.Location('./pubchem.xsd', 2856, 6), )

    
    PC_Count_bond_chiral_undef = property(__PC_Count_bond_chiral_undef.value, __PC_Count_bond_chiral_undef.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Count_isotope-atom uses Python identifier PC_Count_isotope_atom
    __PC_Count_isotope_atom = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Count_isotope-atom'), 'PC_Count_isotope_atom', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_203_httpwww_ncbi_nlm_nih_govPC_Count_isotope_atom', False, pyxb.utils.utility.Location('./pubchem.xsd', 2861, 6), )

    
    PC_Count_isotope_atom = property(__PC_Count_isotope_atom.value, __PC_Count_isotope_atom.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Count_covalent-unit uses Python identifier PC_Count_covalent_unit
    __PC_Count_covalent_unit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Count_covalent-unit'), 'PC_Count_covalent_unit', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_203_httpwww_ncbi_nlm_nih_govPC_Count_covalent_unit', False, pyxb.utils.utility.Location('./pubchem.xsd', 2866, 6), )

    
    PC_Count_covalent_unit = property(__PC_Count_covalent_unit.value, __PC_Count_covalent_unit.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Count_tautomers uses Python identifier PC_Count_tautomers
    __PC_Count_tautomers = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Count_tautomers'), 'PC_Count_tautomers', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_203_httpwww_ncbi_nlm_nih_govPC_Count_tautomers', False, pyxb.utils.utility.Location('./pubchem.xsd', 2868, 6), )

    
    PC_Count_tautomers = property(__PC_Count_tautomers.value, __PC_Count_tautomers.set, None, None)

    _ElementMap.update({
        __PC_Count_heavy_atom.name() : __PC_Count_heavy_atom,
        __PC_Count_atom_chiral.name() : __PC_Count_atom_chiral,
        __PC_Count_atom_chiral_def.name() : __PC_Count_atom_chiral_def,
        __PC_Count_atom_chiral_undef.name() : __PC_Count_atom_chiral_undef,
        __PC_Count_bond_chiral.name() : __PC_Count_bond_chiral,
        __PC_Count_bond_chiral_def.name() : __PC_Count_bond_chiral_def,
        __PC_Count_bond_chiral_undef.name() : __PC_Count_bond_chiral_undef,
        __PC_Count_isotope_atom.name() : __PC_Count_isotope_atom,
        __PC_Count_covalent_unit.name() : __PC_Count_covalent_unit,
        __PC_Count_tautomers.name() : __PC_Count_tautomers
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_204 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2883, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoGroup_type uses Python identifier PC_StereoGroup_type
    __PC_StereoGroup_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoGroup_type'), 'PC_StereoGroup_type', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_204_httpwww_ncbi_nlm_nih_govPC_StereoGroup_type', False, pyxb.utils.utility.Location('./pubchem.xsd', 2885, 6), )

    
    PC_StereoGroup_type = property(__PC_StereoGroup_type.value, __PC_StereoGroup_type.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoGroup_aid uses Python identifier PC_StereoGroup_aid
    __PC_StereoGroup_aid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoGroup_aid'), 'PC_StereoGroup_aid', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_204_httpwww_ncbi_nlm_nih_govPC_StereoGroup_aid', False, pyxb.utils.utility.Location('./pubchem.xsd', 2913, 6), )

    
    PC_StereoGroup_aid = property(__PC_StereoGroup_aid.value, __PC_StereoGroup_aid.set, None, None)

    _ElementMap.update({
        __PC_StereoGroup_type.name() : __PC_StereoGroup_type,
        __PC_StereoGroup_aid.name() : __PC_StereoGroup_aid
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_205 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2914, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoGroup_aid_E uses Python identifier PC_StereoGroup_aid_E
    __PC_StereoGroup_aid_E = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoGroup_aid_E'), 'PC_StereoGroup_aid_E', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_205_httpwww_ncbi_nlm_nih_govPC_StereoGroup_aid_E', True, pyxb.utils.utility.Location('./pubchem.xsd', 2916, 12), )

    
    PC_StereoGroup_aid_E = property(__PC_StereoGroup_aid_E.value, __PC_StereoGroup_aid_E.set, None, None)

    _ElementMap.update({
        __PC_StereoGroup_aid_E.name() : __PC_StereoGroup_aid_E
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_206 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2926, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-InfoData_urn uses Python identifier PC_InfoData_urn
    __PC_InfoData_urn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData_urn'), 'PC_InfoData_urn', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_206_httpwww_ncbi_nlm_nih_govPC_InfoData_urn', False, pyxb.utils.utility.Location('./pubchem.xsd', 2929, 6), )

    
    PC_InfoData_urn = property(__PC_InfoData_urn.value, __PC_InfoData_urn.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-InfoData_value uses Python identifier PC_InfoData_value
    __PC_InfoData_value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData_value'), 'PC_InfoData_value', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_206_httpwww_ncbi_nlm_nih_govPC_InfoData_value', False, pyxb.utils.utility.Location('./pubchem.xsd', 2936, 6), )

    
    PC_InfoData_value = property(__PC_InfoData_value.value, __PC_InfoData_value.set, None, None)

    _ElementMap.update({
        __PC_InfoData_urn.name() : __PC_InfoData_urn,
        __PC_InfoData_value.name() : __PC_InfoData_value
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_207 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2930, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Urn uses Python identifier PC_Urn
    __PC_Urn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Urn'), 'PC_Urn', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_207_httpwww_ncbi_nlm_nih_govPC_Urn', False, pyxb.utils.utility.Location('./pubchem.xsd', 3030, 0), )

    
    PC_Urn = property(__PC_Urn.value, __PC_Urn.set, None, None)

    _ElementMap.update({
        __PC_Urn.name() : __PC_Urn
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_208 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2937, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-InfoData_value_bval uses Python identifier PC_InfoData_value_bval
    __PC_InfoData_value_bval = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData_value_bval'), 'PC_InfoData_value_bval', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_208_httpwww_ncbi_nlm_nih_govPC_InfoData_value_bval', False, pyxb.utils.utility.Location('./pubchem.xsd', 2940, 12), )

    
    PC_InfoData_value_bval = property(__PC_InfoData_value_bval.value, __PC_InfoData_value_bval.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-InfoData_value_bvec uses Python identifier PC_InfoData_value_bvec
    __PC_InfoData_value_bvec = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData_value_bvec'), 'PC_InfoData_value_bvec', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_208_httpwww_ncbi_nlm_nih_govPC_InfoData_value_bvec', False, pyxb.utils.utility.Location('./pubchem.xsd', 2953, 12), )

    
    PC_InfoData_value_bvec = property(__PC_InfoData_value_bvec.value, __PC_InfoData_value_bvec.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-InfoData_value_ival uses Python identifier PC_InfoData_value_ival
    __PC_InfoData_value_ival = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData_value_ival'), 'PC_InfoData_value_ival', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_208_httpwww_ncbi_nlm_nih_govPC_InfoData_value_ival', False, pyxb.utils.utility.Location('./pubchem.xsd', 2972, 12), )

    
    PC_InfoData_value_ival = property(__PC_InfoData_value_ival.value, __PC_InfoData_value_ival.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-InfoData_value_ivec uses Python identifier PC_InfoData_value_ivec
    __PC_InfoData_value_ivec = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData_value_ivec'), 'PC_InfoData_value_ivec', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_208_httpwww_ncbi_nlm_nih_govPC_InfoData_value_ivec', False, pyxb.utils.utility.Location('./pubchem.xsd', 2974, 12), )

    
    PC_InfoData_value_ivec = property(__PC_InfoData_value_ivec.value, __PC_InfoData_value_ivec.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-InfoData_value_fval uses Python identifier PC_InfoData_value_fval
    __PC_InfoData_value_fval = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData_value_fval'), 'PC_InfoData_value_fval', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_208_httpwww_ncbi_nlm_nih_govPC_InfoData_value_fval', False, pyxb.utils.utility.Location('./pubchem.xsd', 2982, 12), )

    
    PC_InfoData_value_fval = property(__PC_InfoData_value_fval.value, __PC_InfoData_value_fval.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-InfoData_value_fvec uses Python identifier PC_InfoData_value_fvec
    __PC_InfoData_value_fvec = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData_value_fvec'), 'PC_InfoData_value_fvec', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_208_httpwww_ncbi_nlm_nih_govPC_InfoData_value_fvec', False, pyxb.utils.utility.Location('./pubchem.xsd', 2984, 12), )

    
    PC_InfoData_value_fvec = property(__PC_InfoData_value_fvec.value, __PC_InfoData_value_fvec.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-InfoData_value_sval uses Python identifier PC_InfoData_value_sval
    __PC_InfoData_value_sval = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData_value_sval'), 'PC_InfoData_value_sval', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_208_httpwww_ncbi_nlm_nih_govPC_InfoData_value_sval', False, pyxb.utils.utility.Location('./pubchem.xsd', 2992, 12), )

    
    PC_InfoData_value_sval = property(__PC_InfoData_value_sval.value, __PC_InfoData_value_sval.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-InfoData_value_slist uses Python identifier PC_InfoData_value_slist
    __PC_InfoData_value_slist = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData_value_slist'), 'PC_InfoData_value_slist', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_208_httpwww_ncbi_nlm_nih_govPC_InfoData_value_slist', False, pyxb.utils.utility.Location('./pubchem.xsd', 2994, 12), )

    
    PC_InfoData_value_slist = property(__PC_InfoData_value_slist.value, __PC_InfoData_value_slist.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-InfoData_value_date uses Python identifier PC_InfoData_value_date
    __PC_InfoData_value_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData_value_date'), 'PC_InfoData_value_date', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_208_httpwww_ncbi_nlm_nih_govPC_InfoData_value_date', False, pyxb.utils.utility.Location('./pubchem.xsd', 3002, 12), )

    
    PC_InfoData_value_date = property(__PC_InfoData_value_date.value, __PC_InfoData_value_date.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-InfoData_value_binary uses Python identifier PC_InfoData_value_binary
    __PC_InfoData_value_binary = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData_value_binary'), 'PC_InfoData_value_binary', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_208_httpwww_ncbi_nlm_nih_govPC_InfoData_value_binary', False, pyxb.utils.utility.Location('./pubchem.xsd', 3010, 12), )

    
    PC_InfoData_value_binary = property(__PC_InfoData_value_binary.value, __PC_InfoData_value_binary.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-InfoData_value_bitlist uses Python identifier PC_InfoData_value_bitlist
    __PC_InfoData_value_bitlist = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData_value_bitlist'), 'PC_InfoData_value_bitlist', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_208_httpwww_ncbi_nlm_nih_govPC_InfoData_value_bitlist', False, pyxb.utils.utility.Location('./pubchem.xsd', 3012, 12), )

    
    PC_InfoData_value_bitlist = property(__PC_InfoData_value_bitlist.value, __PC_InfoData_value_bitlist.set, None, None)

    _ElementMap.update({
        __PC_InfoData_value_bval.name() : __PC_InfoData_value_bval,
        __PC_InfoData_value_bvec.name() : __PC_InfoData_value_bvec,
        __PC_InfoData_value_ival.name() : __PC_InfoData_value_ival,
        __PC_InfoData_value_ivec.name() : __PC_InfoData_value_ivec,
        __PC_InfoData_value_fval.name() : __PC_InfoData_value_fval,
        __PC_InfoData_value_fvec.name() : __PC_InfoData_value_fvec,
        __PC_InfoData_value_sval.name() : __PC_InfoData_value_sval,
        __PC_InfoData_value_slist.name() : __PC_InfoData_value_slist,
        __PC_InfoData_value_date.name() : __PC_InfoData_value_date,
        __PC_InfoData_value_binary.name() : __PC_InfoData_value_binary,
        __PC_InfoData_value_bitlist.name() : __PC_InfoData_value_bitlist
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_209 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2954, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-InfoData_value_bvec_E uses Python identifier PC_InfoData_value_bvec_E
    __PC_InfoData_value_bvec_E = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData_value_bvec_E'), 'PC_InfoData_value_bvec_E', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_209_httpwww_ncbi_nlm_nih_govPC_InfoData_value_bvec_E', True, pyxb.utils.utility.Location('./pubchem.xsd', 2956, 18), )

    
    PC_InfoData_value_bvec_E = property(__PC_InfoData_value_bvec_E.value, __PC_InfoData_value_bvec_E.set, None, None)

    _ElementMap.update({
        __PC_InfoData_value_bvec_E.name() : __PC_InfoData_value_bvec_E
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_210 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2975, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-InfoData_value_ivec_E uses Python identifier PC_InfoData_value_ivec_E
    __PC_InfoData_value_ivec_E = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData_value_ivec_E'), 'PC_InfoData_value_ivec_E', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_210_httpwww_ncbi_nlm_nih_govPC_InfoData_value_ivec_E', True, pyxb.utils.utility.Location('./pubchem.xsd', 2977, 18), )

    
    PC_InfoData_value_ivec_E = property(__PC_InfoData_value_ivec_E.value, __PC_InfoData_value_ivec_E.set, None, None)

    _ElementMap.update({
        __PC_InfoData_value_ivec_E.name() : __PC_InfoData_value_ivec_E
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_211 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2985, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-InfoData_value_fvec_E uses Python identifier PC_InfoData_value_fvec_E
    __PC_InfoData_value_fvec_E = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData_value_fvec_E'), 'PC_InfoData_value_fvec_E', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_211_httpwww_ncbi_nlm_nih_govPC_InfoData_value_fvec_E', True, pyxb.utils.utility.Location('./pubchem.xsd', 2987, 18), )

    
    PC_InfoData_value_fvec_E = property(__PC_InfoData_value_fvec_E.value, __PC_InfoData_value_fvec_E.set, None, None)

    _ElementMap.update({
        __PC_InfoData_value_fvec_E.name() : __PC_InfoData_value_fvec_E
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_212 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2995, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-InfoData_value_slist_E uses Python identifier PC_InfoData_value_slist_E
    __PC_InfoData_value_slist_E = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData_value_slist_E'), 'PC_InfoData_value_slist_E', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_212_httpwww_ncbi_nlm_nih_govPC_InfoData_value_slist_E', True, pyxb.utils.utility.Location('./pubchem.xsd', 2997, 18), )

    
    PC_InfoData_value_slist_E = property(__PC_InfoData_value_slist_E.value, __PC_InfoData_value_slist_E.set, None, None)

    _ElementMap.update({
        __PC_InfoData_value_slist_E.name() : __PC_InfoData_value_slist_E
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_213 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3003, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Date uses Python identifier Date
    __Date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Date'), 'Date', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_213_httpwww_ncbi_nlm_nih_govDate', False, pyxb.utils.utility.Location('./pubchem.xsd', 89, 0), )

    
    Date = property(__Date.value, __Date.set, None, None)

    _ElementMap.update({
        __Date.name() : __Date
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_214 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3031, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Urn_label uses Python identifier PC_Urn_label
    __PC_Urn_label = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Urn_label'), 'PC_Urn_label', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_214_httpwww_ncbi_nlm_nih_govPC_Urn_label', False, pyxb.utils.utility.Location('./pubchem.xsd', 3034, 6), )

    
    PC_Urn_label = property(__PC_Urn_label.value, __PC_Urn_label.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Urn_name uses Python identifier PC_Urn_name
    __PC_Urn_name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Urn_name'), 'PC_Urn_name', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_214_httpwww_ncbi_nlm_nih_govPC_Urn_name', False, pyxb.utils.utility.Location('./pubchem.xsd', 3036, 6), )

    
    PC_Urn_name = property(__PC_Urn_name.value, __PC_Urn_name.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Urn_datatype uses Python identifier PC_Urn_datatype
    __PC_Urn_datatype = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Urn_datatype'), 'PC_Urn_datatype', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_214_httpwww_ncbi_nlm_nih_govPC_Urn_datatype', False, pyxb.utils.utility.Location('./pubchem.xsd', 3038, 6), )

    
    PC_Urn_datatype = property(__PC_Urn_datatype.value, __PC_Urn_datatype.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Urn_parameters uses Python identifier PC_Urn_parameters
    __PC_Urn_parameters = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Urn_parameters'), 'PC_Urn_parameters', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_214_httpwww_ncbi_nlm_nih_govPC_Urn_parameters', False, pyxb.utils.utility.Location('./pubchem.xsd', 3046, 6), )

    
    PC_Urn_parameters = property(__PC_Urn_parameters.value, __PC_Urn_parameters.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Urn_implementation uses Python identifier PC_Urn_implementation
    __PC_Urn_implementation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Urn_implementation'), 'PC_Urn_implementation', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_214_httpwww_ncbi_nlm_nih_govPC_Urn_implementation', False, pyxb.utils.utility.Location('./pubchem.xsd', 3048, 6), )

    
    PC_Urn_implementation = property(__PC_Urn_implementation.value, __PC_Urn_implementation.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Urn_version uses Python identifier PC_Urn_version
    __PC_Urn_version = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Urn_version'), 'PC_Urn_version', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_214_httpwww_ncbi_nlm_nih_govPC_Urn_version', False, pyxb.utils.utility.Location('./pubchem.xsd', 3050, 6), )

    
    PC_Urn_version = property(__PC_Urn_version.value, __PC_Urn_version.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Urn_software uses Python identifier PC_Urn_software
    __PC_Urn_software = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Urn_software'), 'PC_Urn_software', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_214_httpwww_ncbi_nlm_nih_govPC_Urn_software', False, pyxb.utils.utility.Location('./pubchem.xsd', 3052, 6), )

    
    PC_Urn_software = property(__PC_Urn_software.value, __PC_Urn_software.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Urn_source uses Python identifier PC_Urn_source
    __PC_Urn_source = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Urn_source'), 'PC_Urn_source', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_214_httpwww_ncbi_nlm_nih_govPC_Urn_source', False, pyxb.utils.utility.Location('./pubchem.xsd', 3054, 6), )

    
    PC_Urn_source = property(__PC_Urn_source.value, __PC_Urn_source.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Urn_release uses Python identifier PC_Urn_release
    __PC_Urn_release = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Urn_release'), 'PC_Urn_release', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_214_httpwww_ncbi_nlm_nih_govPC_Urn_release', False, pyxb.utils.utility.Location('./pubchem.xsd', 3056, 6), )

    
    PC_Urn_release = property(__PC_Urn_release.value, __PC_Urn_release.set, None, None)

    _ElementMap.update({
        __PC_Urn_label.name() : __PC_Urn_label,
        __PC_Urn_name.name() : __PC_Urn_name,
        __PC_Urn_datatype.name() : __PC_Urn_datatype,
        __PC_Urn_parameters.name() : __PC_Urn_parameters,
        __PC_Urn_implementation.name() : __PC_Urn_implementation,
        __PC_Urn_version.name() : __PC_Urn_version,
        __PC_Urn_software.name() : __PC_Urn_software,
        __PC_Urn_source.name() : __PC_Urn_source,
        __PC_Urn_release.name() : __PC_Urn_release
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_215 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3039, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-UrnDataType uses Python identifier PC_UrnDataType
    __PC_UrnDataType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-UrnDataType'), 'PC_UrnDataType', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_215_httpwww_ncbi_nlm_nih_govPC_UrnDataType', False, pyxb.utils.utility.Location('./pubchem.xsd', 3066, 0), )

    
    PC_UrnDataType = property(__PC_UrnDataType.value, __PC_UrnDataType.set, None, None)

    _ElementMap.update({
        __PC_UrnDataType.name() : __PC_UrnDataType
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_216 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3122, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Coordinates_type uses Python identifier PC_Coordinates_type
    __PC_Coordinates_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Coordinates_type'), 'PC_Coordinates_type', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_216_httpwww_ncbi_nlm_nih_govPC_Coordinates_type', False, pyxb.utils.utility.Location('./pubchem.xsd', 3125, 6), )

    
    PC_Coordinates_type = property(__PC_Coordinates_type.value, __PC_Coordinates_type.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Coordinates_aid uses Python identifier PC_Coordinates_aid
    __PC_Coordinates_aid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Coordinates_aid'), 'PC_Coordinates_aid', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_216_httpwww_ncbi_nlm_nih_govPC_Coordinates_aid', False, pyxb.utils.utility.Location('./pubchem.xsd', 3137, 6), )

    
    PC_Coordinates_aid = property(__PC_Coordinates_aid.value, __PC_Coordinates_aid.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Coordinates_conformers uses Python identifier PC_Coordinates_conformers
    __PC_Coordinates_conformers = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Coordinates_conformers'), 'PC_Coordinates_conformers', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_216_httpwww_ncbi_nlm_nih_govPC_Coordinates_conformers', False, pyxb.utils.utility.Location('./pubchem.xsd', 3145, 6), )

    
    PC_Coordinates_conformers = property(__PC_Coordinates_conformers.value, __PC_Coordinates_conformers.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Coordinates_atomlabels uses Python identifier PC_Coordinates_atomlabels
    __PC_Coordinates_atomlabels = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Coordinates_atomlabels'), 'PC_Coordinates_atomlabels', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_216_httpwww_ncbi_nlm_nih_govPC_Coordinates_atomlabels', False, pyxb.utils.utility.Location('./pubchem.xsd', 3153, 6), )

    
    PC_Coordinates_atomlabels = property(__PC_Coordinates_atomlabels.value, __PC_Coordinates_atomlabels.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Coordinates_data uses Python identifier PC_Coordinates_data
    __PC_Coordinates_data = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Coordinates_data'), 'PC_Coordinates_data', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_216_httpwww_ncbi_nlm_nih_govPC_Coordinates_data', False, pyxb.utils.utility.Location('./pubchem.xsd', 3161, 6), )

    
    PC_Coordinates_data = property(__PC_Coordinates_data.value, __PC_Coordinates_data.set, None, None)

    _ElementMap.update({
        __PC_Coordinates_type.name() : __PC_Coordinates_type,
        __PC_Coordinates_aid.name() : __PC_Coordinates_aid,
        __PC_Coordinates_conformers.name() : __PC_Coordinates_conformers,
        __PC_Coordinates_atomlabels.name() : __PC_Coordinates_atomlabels,
        __PC_Coordinates_data.name() : __PC_Coordinates_data
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_217 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3126, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-CoordinateType uses Python identifier PC_CoordinateType
    __PC_CoordinateType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-CoordinateType'), 'PC_CoordinateType', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_217_httpwww_ncbi_nlm_nih_govPC_CoordinateType', True, pyxb.utils.utility.Location('./pubchem.xsd', 3236, 0), )

    
    PC_CoordinateType = property(__PC_CoordinateType.value, __PC_CoordinateType.set, None, None)

    _ElementMap.update({
        __PC_CoordinateType.name() : __PC_CoordinateType
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_218 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3138, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Coordinates_aid_E uses Python identifier PC_Coordinates_aid_E
    __PC_Coordinates_aid_E = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Coordinates_aid_E'), 'PC_Coordinates_aid_E', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_218_httpwww_ncbi_nlm_nih_govPC_Coordinates_aid_E', True, pyxb.utils.utility.Location('./pubchem.xsd', 3140, 12), )

    
    PC_Coordinates_aid_E = property(__PC_Coordinates_aid_E.value, __PC_Coordinates_aid_E.set, None, None)

    _ElementMap.update({
        __PC_Coordinates_aid_E.name() : __PC_Coordinates_aid_E
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_219 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3146, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Conformer uses Python identifier PC_Conformer
    __PC_Conformer = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Conformer'), 'PC_Conformer', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_219_httpwww_ncbi_nlm_nih_govPC_Conformer', True, pyxb.utils.utility.Location('./pubchem.xsd', 3176, 0), )

    
    PC_Conformer = property(__PC_Conformer.value, __PC_Conformer.set, None, None)

    _ElementMap.update({
        __PC_Conformer.name() : __PC_Conformer
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_220 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3154, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AtomString uses Python identifier PC_AtomString
    __PC_AtomString = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AtomString'), 'PC_AtomString', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_220_httpwww_ncbi_nlm_nih_govPC_AtomString', True, pyxb.utils.utility.Location('./pubchem.xsd', 3487, 0), )

    
    PC_AtomString = property(__PC_AtomString.value, __PC_AtomString.set, None, None)

    _ElementMap.update({
        __PC_AtomString.name() : __PC_AtomString
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_221 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3162, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-InfoData uses Python identifier PC_InfoData
    __PC_InfoData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData'), 'PC_InfoData', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_221_httpwww_ncbi_nlm_nih_govPC_InfoData', True, pyxb.utils.utility.Location('./pubchem.xsd', 2925, 0), )

    
    PC_InfoData = property(__PC_InfoData.value, __PC_InfoData.set, None, None)

    _ElementMap.update({
        __PC_InfoData.name() : __PC_InfoData
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_222 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3177, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Conformer_x uses Python identifier PC_Conformer_x
    __PC_Conformer_x = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Conformer_x'), 'PC_Conformer_x', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_222_httpwww_ncbi_nlm_nih_govPC_Conformer_x', False, pyxb.utils.utility.Location('./pubchem.xsd', 3183, 6), )

    
    PC_Conformer_x = property(__PC_Conformer_x.value, __PC_Conformer_x.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Conformer_y uses Python identifier PC_Conformer_y
    __PC_Conformer_y = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Conformer_y'), 'PC_Conformer_y', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_222_httpwww_ncbi_nlm_nih_govPC_Conformer_y', False, pyxb.utils.utility.Location('./pubchem.xsd', 3191, 6), )

    
    PC_Conformer_y = property(__PC_Conformer_y.value, __PC_Conformer_y.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Conformer_z uses Python identifier PC_Conformer_z
    __PC_Conformer_z = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Conformer_z'), 'PC_Conformer_z', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_222_httpwww_ncbi_nlm_nih_govPC_Conformer_z', False, pyxb.utils.utility.Location('./pubchem.xsd', 3199, 6), )

    
    PC_Conformer_z = property(__PC_Conformer_z.value, __PC_Conformer_z.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Conformer_style uses Python identifier PC_Conformer_style
    __PC_Conformer_style = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Conformer_style'), 'PC_Conformer_style', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_222_httpwww_ncbi_nlm_nih_govPC_Conformer_style', False, pyxb.utils.utility.Location('./pubchem.xsd', 3207, 6), )

    
    PC_Conformer_style = property(__PC_Conformer_style.value, __PC_Conformer_style.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Conformer_data uses Python identifier PC_Conformer_data
    __PC_Conformer_data = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Conformer_data'), 'PC_Conformer_data', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_222_httpwww_ncbi_nlm_nih_govPC_Conformer_data', False, pyxb.utils.utility.Location('./pubchem.xsd', 3215, 6), )

    
    PC_Conformer_data = property(__PC_Conformer_data.value, __PC_Conformer_data.set, None, None)

    _ElementMap.update({
        __PC_Conformer_x.name() : __PC_Conformer_x,
        __PC_Conformer_y.name() : __PC_Conformer_y,
        __PC_Conformer_z.name() : __PC_Conformer_z,
        __PC_Conformer_style.name() : __PC_Conformer_style,
        __PC_Conformer_data.name() : __PC_Conformer_data
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_223 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3184, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Conformer_x_E uses Python identifier PC_Conformer_x_E
    __PC_Conformer_x_E = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Conformer_x_E'), 'PC_Conformer_x_E', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_223_httpwww_ncbi_nlm_nih_govPC_Conformer_x_E', True, pyxb.utils.utility.Location('./pubchem.xsd', 3186, 12), )

    
    PC_Conformer_x_E = property(__PC_Conformer_x_E.value, __PC_Conformer_x_E.set, None, None)

    _ElementMap.update({
        __PC_Conformer_x_E.name() : __PC_Conformer_x_E
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_224 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3192, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Conformer_y_E uses Python identifier PC_Conformer_y_E
    __PC_Conformer_y_E = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Conformer_y_E'), 'PC_Conformer_y_E', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_224_httpwww_ncbi_nlm_nih_govPC_Conformer_y_E', True, pyxb.utils.utility.Location('./pubchem.xsd', 3194, 12), )

    
    PC_Conformer_y_E = property(__PC_Conformer_y_E.value, __PC_Conformer_y_E.set, None, None)

    _ElementMap.update({
        __PC_Conformer_y_E.name() : __PC_Conformer_y_E
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_225 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3200, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Conformer_z_E uses Python identifier PC_Conformer_z_E
    __PC_Conformer_z_E = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Conformer_z_E'), 'PC_Conformer_z_E', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_225_httpwww_ncbi_nlm_nih_govPC_Conformer_z_E', True, pyxb.utils.utility.Location('./pubchem.xsd', 3202, 12), )

    
    PC_Conformer_z_E = property(__PC_Conformer_z_E.value, __PC_Conformer_z_E.set, None, None)

    _ElementMap.update({
        __PC_Conformer_z_E.name() : __PC_Conformer_z_E
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_226 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3208, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-DrawAnnotations uses Python identifier PC_DrawAnnotations
    __PC_DrawAnnotations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-DrawAnnotations'), 'PC_DrawAnnotations', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_226_httpwww_ncbi_nlm_nih_govPC_DrawAnnotations', False, pyxb.utils.utility.Location('./pubchem.xsd', 3287, 0), )

    
    PC_DrawAnnotations = property(__PC_DrawAnnotations.value, __PC_DrawAnnotations.set, None, None)

    _ElementMap.update({
        __PC_DrawAnnotations.name() : __PC_DrawAnnotations
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_227 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3216, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-InfoData uses Python identifier PC_InfoData
    __PC_InfoData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData'), 'PC_InfoData', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_227_httpwww_ncbi_nlm_nih_govPC_InfoData', True, pyxb.utils.utility.Location('./pubchem.xsd', 2925, 0), )

    
    PC_InfoData = property(__PC_InfoData.value, __PC_InfoData.set, None, None)

    _ElementMap.update({
        __PC_InfoData.name() : __PC_InfoData
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_228 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3228, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Conformer uses Python identifier PC_Conformer
    __PC_Conformer = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Conformer'), 'PC_Conformer', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_228_httpwww_ncbi_nlm_nih_govPC_Conformer', True, pyxb.utils.utility.Location('./pubchem.xsd', 3176, 0), )

    
    PC_Conformer = property(__PC_Conformer.value, __PC_Conformer.set, None, None)

    _ElementMap.update({
        __PC_Conformer.name() : __PC_Conformer
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_229 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3288, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-DrawAnnotations_annotation uses Python identifier PC_DrawAnnotations_annotation
    __PC_DrawAnnotations_annotation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-DrawAnnotations_annotation'), 'PC_DrawAnnotations_annotation', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_229_httpwww_ncbi_nlm_nih_govPC_DrawAnnotations_annotation', False, pyxb.utils.utility.Location('./pubchem.xsd', 3294, 6), )

    
    PC_DrawAnnotations_annotation = property(__PC_DrawAnnotations_annotation.value, __PC_DrawAnnotations_annotation.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-DrawAnnotations_aid1 uses Python identifier PC_DrawAnnotations_aid1
    __PC_DrawAnnotations_aid1 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-DrawAnnotations_aid1'), 'PC_DrawAnnotations_aid1', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_229_httpwww_ncbi_nlm_nih_govPC_DrawAnnotations_aid1', False, pyxb.utils.utility.Location('./pubchem.xsd', 3305, 6), )

    
    PC_DrawAnnotations_aid1 = property(__PC_DrawAnnotations_aid1.value, __PC_DrawAnnotations_aid1.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-DrawAnnotations_aid2 uses Python identifier PC_DrawAnnotations_aid2
    __PC_DrawAnnotations_aid2 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-DrawAnnotations_aid2'), 'PC_DrawAnnotations_aid2', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_229_httpwww_ncbi_nlm_nih_govPC_DrawAnnotations_aid2', False, pyxb.utils.utility.Location('./pubchem.xsd', 3316, 6), )

    
    PC_DrawAnnotations_aid2 = property(__PC_DrawAnnotations_aid2.value, __PC_DrawAnnotations_aid2.set, None, None)

    _ElementMap.update({
        __PC_DrawAnnotations_annotation.name() : __PC_DrawAnnotations_annotation,
        __PC_DrawAnnotations_aid1.name() : __PC_DrawAnnotations_aid1,
        __PC_DrawAnnotations_aid2.name() : __PC_DrawAnnotations_aid2
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_230 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3295, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-BondAnnotation uses Python identifier PC_BondAnnotation
    __PC_BondAnnotation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-BondAnnotation'), 'PC_BondAnnotation', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_230_httpwww_ncbi_nlm_nih_govPC_BondAnnotation', True, pyxb.utils.utility.Location('./pubchem.xsd', 3328, 0), )

    
    PC_BondAnnotation = property(__PC_BondAnnotation.value, __PC_BondAnnotation.set, None, None)

    _ElementMap.update({
        __PC_BondAnnotation.name() : __PC_BondAnnotation
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_231 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3306, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-DrawAnnotations_aid1_E uses Python identifier PC_DrawAnnotations_aid1_E
    __PC_DrawAnnotations_aid1_E = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-DrawAnnotations_aid1_E'), 'PC_DrawAnnotations_aid1_E', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_231_httpwww_ncbi_nlm_nih_govPC_DrawAnnotations_aid1_E', True, pyxb.utils.utility.Location('./pubchem.xsd', 3308, 12), )

    
    PC_DrawAnnotations_aid1_E = property(__PC_DrawAnnotations_aid1_E.value, __PC_DrawAnnotations_aid1_E.set, None, None)

    _ElementMap.update({
        __PC_DrawAnnotations_aid1_E.name() : __PC_DrawAnnotations_aid1_E
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_232 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3317, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-DrawAnnotations_aid2_E uses Python identifier PC_DrawAnnotations_aid2_E
    __PC_DrawAnnotations_aid2_E = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-DrawAnnotations_aid2_E'), 'PC_DrawAnnotations_aid2_E', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_232_httpwww_ncbi_nlm_nih_govPC_DrawAnnotations_aid2_E', True, pyxb.utils.utility.Location('./pubchem.xsd', 3319, 12), )

    
    PC_DrawAnnotations_aid2_E = property(__PC_DrawAnnotations_aid2_E.value, __PC_DrawAnnotations_aid2_E.set, None, None)

    _ElementMap.update({
        __PC_DrawAnnotations_aid2_E.name() : __PC_DrawAnnotations_aid2_E
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_233 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3373, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Atoms_aid uses Python identifier PC_Atoms_aid
    __PC_Atoms_aid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Atoms_aid'), 'PC_Atoms_aid', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_233_httpwww_ncbi_nlm_nih_govPC_Atoms_aid', False, pyxb.utils.utility.Location('./pubchem.xsd', 3380, 6), )

    
    PC_Atoms_aid = property(__PC_Atoms_aid.value, __PC_Atoms_aid.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Atoms_element uses Python identifier PC_Atoms_element
    __PC_Atoms_element = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Atoms_element'), 'PC_Atoms_element', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_233_httpwww_ncbi_nlm_nih_govPC_Atoms_element', False, pyxb.utils.utility.Location('./pubchem.xsd', 3388, 6), )

    
    PC_Atoms_element = property(__PC_Atoms_element.value, __PC_Atoms_element.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Atoms_label uses Python identifier PC_Atoms_label
    __PC_Atoms_label = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Atoms_label'), 'PC_Atoms_label', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_233_httpwww_ncbi_nlm_nih_govPC_Atoms_label', False, pyxb.utils.utility.Location('./pubchem.xsd', 3399, 6), )

    
    PC_Atoms_label = property(__PC_Atoms_label.value, __PC_Atoms_label.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Atoms_isotope uses Python identifier PC_Atoms_isotope
    __PC_Atoms_isotope = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Atoms_isotope'), 'PC_Atoms_isotope', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_233_httpwww_ncbi_nlm_nih_govPC_Atoms_isotope', False, pyxb.utils.utility.Location('./pubchem.xsd', 3407, 6), )

    
    PC_Atoms_isotope = property(__PC_Atoms_isotope.value, __PC_Atoms_isotope.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Atoms_charge uses Python identifier PC_Atoms_charge
    __PC_Atoms_charge = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Atoms_charge'), 'PC_Atoms_charge', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_233_httpwww_ncbi_nlm_nih_govPC_Atoms_charge', False, pyxb.utils.utility.Location('./pubchem.xsd', 3415, 6), )

    
    PC_Atoms_charge = property(__PC_Atoms_charge.value, __PC_Atoms_charge.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Atoms_radical uses Python identifier PC_Atoms_radical
    __PC_Atoms_radical = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Atoms_radical'), 'PC_Atoms_radical', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_233_httpwww_ncbi_nlm_nih_govPC_Atoms_radical', False, pyxb.utils.utility.Location('./pubchem.xsd', 3423, 6), )

    
    PC_Atoms_radical = property(__PC_Atoms_radical.value, __PC_Atoms_radical.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Atoms_source uses Python identifier PC_Atoms_source
    __PC_Atoms_source = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Atoms_source'), 'PC_Atoms_source', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_233_httpwww_ncbi_nlm_nih_govPC_Atoms_source', False, pyxb.utils.utility.Location('./pubchem.xsd', 3431, 6), )

    
    PC_Atoms_source = property(__PC_Atoms_source.value, __PC_Atoms_source.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Atoms_comment uses Python identifier PC_Atoms_comment
    __PC_Atoms_comment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Atoms_comment'), 'PC_Atoms_comment', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_233_httpwww_ncbi_nlm_nih_govPC_Atoms_comment', False, pyxb.utils.utility.Location('./pubchem.xsd', 3439, 6), )

    
    PC_Atoms_comment = property(__PC_Atoms_comment.value, __PC_Atoms_comment.set, None, None)

    _ElementMap.update({
        __PC_Atoms_aid.name() : __PC_Atoms_aid,
        __PC_Atoms_element.name() : __PC_Atoms_element,
        __PC_Atoms_label.name() : __PC_Atoms_label,
        __PC_Atoms_isotope.name() : __PC_Atoms_isotope,
        __PC_Atoms_charge.name() : __PC_Atoms_charge,
        __PC_Atoms_radical.name() : __PC_Atoms_radical,
        __PC_Atoms_source.name() : __PC_Atoms_source,
        __PC_Atoms_comment.name() : __PC_Atoms_comment
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_234 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3381, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Atoms_aid_E uses Python identifier PC_Atoms_aid_E
    __PC_Atoms_aid_E = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Atoms_aid_E'), 'PC_Atoms_aid_E', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_234_httpwww_ncbi_nlm_nih_govPC_Atoms_aid_E', True, pyxb.utils.utility.Location('./pubchem.xsd', 3383, 12), )

    
    PC_Atoms_aid_E = property(__PC_Atoms_aid_E.value, __PC_Atoms_aid_E.set, None, None)

    _ElementMap.update({
        __PC_Atoms_aid_E.name() : __PC_Atoms_aid_E
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_235 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3389, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Element uses Python identifier PC_Element
    __PC_Element = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Element'), 'PC_Element', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_235_httpwww_ncbi_nlm_nih_govPC_Element', True, pyxb.utils.utility.Location('./pubchem.xsd', 3549, 0), )

    
    PC_Element = property(__PC_Element.value, __PC_Element.set, None, None)

    _ElementMap.update({
        __PC_Element.name() : __PC_Element
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_236 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3400, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AtomString uses Python identifier PC_AtomString
    __PC_AtomString = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AtomString'), 'PC_AtomString', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_236_httpwww_ncbi_nlm_nih_govPC_AtomString', True, pyxb.utils.utility.Location('./pubchem.xsd', 3487, 0), )

    
    PC_AtomString = property(__PC_AtomString.value, __PC_AtomString.set, None, None)

    _ElementMap.update({
        __PC_AtomString.name() : __PC_AtomString
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_237 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3408, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AtomInt uses Python identifier PC_AtomInt
    __PC_AtomInt = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AtomInt'), 'PC_AtomInt', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_237_httpwww_ncbi_nlm_nih_govPC_AtomInt', True, pyxb.utils.utility.Location('./pubchem.xsd', 3472, 0), )

    
    PC_AtomInt = property(__PC_AtomInt.value, __PC_AtomInt.set, None, None)

    _ElementMap.update({
        __PC_AtomInt.name() : __PC_AtomInt
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_238 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3416, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AtomInt uses Python identifier PC_AtomInt
    __PC_AtomInt = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AtomInt'), 'PC_AtomInt', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_238_httpwww_ncbi_nlm_nih_govPC_AtomInt', True, pyxb.utils.utility.Location('./pubchem.xsd', 3472, 0), )

    
    PC_AtomInt = property(__PC_AtomInt.value, __PC_AtomInt.set, None, None)

    _ElementMap.update({
        __PC_AtomInt.name() : __PC_AtomInt
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_239 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3424, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AtomRadical uses Python identifier PC_AtomRadical
    __PC_AtomRadical = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AtomRadical'), 'PC_AtomRadical', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_239_httpwww_ncbi_nlm_nih_govPC_AtomRadical', True, pyxb.utils.utility.Location('./pubchem.xsd', 3502, 0), )

    
    PC_AtomRadical = property(__PC_AtomRadical.value, __PC_AtomRadical.set, None, None)

    _ElementMap.update({
        __PC_AtomRadical.name() : __PC_AtomRadical
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_240 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3432, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AtomSource uses Python identifier PC_AtomSource
    __PC_AtomSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AtomSource'), 'PC_AtomSource', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_240_httpwww_ncbi_nlm_nih_govPC_AtomSource', True, pyxb.utils.utility.Location('./pubchem.xsd', 3451, 0), )

    
    PC_AtomSource = property(__PC_AtomSource.value, __PC_AtomSource.set, None, None)

    _ElementMap.update({
        __PC_AtomSource.name() : __PC_AtomSource
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_241 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3440, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AtomString uses Python identifier PC_AtomString
    __PC_AtomString = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AtomString'), 'PC_AtomString', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_241_httpwww_ncbi_nlm_nih_govPC_AtomString', True, pyxb.utils.utility.Location('./pubchem.xsd', 3487, 0), )

    
    PC_AtomString = property(__PC_AtomString.value, __PC_AtomString.set, None, None)

    _ElementMap.update({
        __PC_AtomString.name() : __PC_AtomString
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_242 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3452, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AtomSource_aid uses Python identifier PC_AtomSource_aid
    __PC_AtomSource_aid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AtomSource_aid'), 'PC_AtomSource_aid', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_242_httpwww_ncbi_nlm_nih_govPC_AtomSource_aid', False, pyxb.utils.utility.Location('./pubchem.xsd', 3458, 6), )

    
    PC_AtomSource_aid = property(__PC_AtomSource_aid.value, __PC_AtomSource_aid.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AtomSource_source uses Python identifier PC_AtomSource_source
    __PC_AtomSource_source = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AtomSource_source'), 'PC_AtomSource_source', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_242_httpwww_ncbi_nlm_nih_govPC_AtomSource_source', False, pyxb.utils.utility.Location('./pubchem.xsd', 3460, 6), )

    
    PC_AtomSource_source = property(__PC_AtomSource_source.value, __PC_AtomSource_source.set, None, None)

    _ElementMap.update({
        __PC_AtomSource_aid.name() : __PC_AtomSource_aid,
        __PC_AtomSource_source.name() : __PC_AtomSource_source
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_243 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3461, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-MMDBSource uses Python identifier PC_MMDBSource
    __PC_MMDBSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-MMDBSource'), 'PC_MMDBSource', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_243_httpwww_ncbi_nlm_nih_govPC_MMDBSource', False, pyxb.utils.utility.Location('./pubchem.xsd', 2547, 0), )

    
    PC_MMDBSource = property(__PC_MMDBSource.value, __PC_MMDBSource.set, None, None)

    _ElementMap.update({
        __PC_MMDBSource.name() : __PC_MMDBSource
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_244 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3473, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AtomInt_aid uses Python identifier PC_AtomInt_aid
    __PC_AtomInt_aid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AtomInt_aid'), 'PC_AtomInt_aid', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_244_httpwww_ncbi_nlm_nih_govPC_AtomInt_aid', False, pyxb.utils.utility.Location('./pubchem.xsd', 3479, 6), )

    
    PC_AtomInt_aid = property(__PC_AtomInt_aid.value, __PC_AtomInt_aid.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AtomInt_value uses Python identifier PC_AtomInt_value
    __PC_AtomInt_value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AtomInt_value'), 'PC_AtomInt_value', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_244_httpwww_ncbi_nlm_nih_govPC_AtomInt_value', False, pyxb.utils.utility.Location('./pubchem.xsd', 3481, 6), )

    
    PC_AtomInt_value = property(__PC_AtomInt_value.value, __PC_AtomInt_value.set, None, None)

    _ElementMap.update({
        __PC_AtomInt_aid.name() : __PC_AtomInt_aid,
        __PC_AtomInt_value.name() : __PC_AtomInt_value
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_245 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3488, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AtomString_aid uses Python identifier PC_AtomString_aid
    __PC_AtomString_aid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AtomString_aid'), 'PC_AtomString_aid', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_245_httpwww_ncbi_nlm_nih_govPC_AtomString_aid', False, pyxb.utils.utility.Location('./pubchem.xsd', 3494, 6), )

    
    PC_AtomString_aid = property(__PC_AtomString_aid.value, __PC_AtomString_aid.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AtomString_value uses Python identifier PC_AtomString_value
    __PC_AtomString_value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AtomString_value'), 'PC_AtomString_value', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_245_httpwww_ncbi_nlm_nih_govPC_AtomString_value', False, pyxb.utils.utility.Location('./pubchem.xsd', 3496, 6), )

    
    PC_AtomString_value = property(__PC_AtomString_value.value, __PC_AtomString_value.set, None, None)

    _ElementMap.update({
        __PC_AtomString_aid.name() : __PC_AtomString_aid,
        __PC_AtomString_value.name() : __PC_AtomString_value
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_246 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3503, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AtomRadical_aid uses Python identifier PC_AtomRadical_aid
    __PC_AtomRadical_aid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AtomRadical_aid'), 'PC_AtomRadical_aid', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_246_httpwww_ncbi_nlm_nih_govPC_AtomRadical_aid', False, pyxb.utils.utility.Location('./pubchem.xsd', 3509, 6), )

    
    PC_AtomRadical_aid = property(__PC_AtomRadical_aid.value, __PC_AtomRadical_aid.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AtomRadical_type uses Python identifier PC_AtomRadical_type
    __PC_AtomRadical_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AtomRadical_type'), 'PC_AtomRadical_type', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_246_httpwww_ncbi_nlm_nih_govPC_AtomRadical_type', False, pyxb.utils.utility.Location('./pubchem.xsd', 3510, 6), )

    
    PC_AtomRadical_type = property(__PC_AtomRadical_type.value, __PC_AtomRadical_type.set, None, None)

    _ElementMap.update({
        __PC_AtomRadical_aid.name() : __PC_AtomRadical_aid,
        __PC_AtomRadical_type.name() : __PC_AtomRadical_type
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_247 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3689, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Bonds_aid1 uses Python identifier PC_Bonds_aid1
    __PC_Bonds_aid1 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Bonds_aid1'), 'PC_Bonds_aid1', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_247_httpwww_ncbi_nlm_nih_govPC_Bonds_aid1', False, pyxb.utils.utility.Location('./pubchem.xsd', 3696, 6), )

    
    PC_Bonds_aid1 = property(__PC_Bonds_aid1.value, __PC_Bonds_aid1.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Bonds_aid2 uses Python identifier PC_Bonds_aid2
    __PC_Bonds_aid2 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Bonds_aid2'), 'PC_Bonds_aid2', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_247_httpwww_ncbi_nlm_nih_govPC_Bonds_aid2', False, pyxb.utils.utility.Location('./pubchem.xsd', 3707, 6), )

    
    PC_Bonds_aid2 = property(__PC_Bonds_aid2.value, __PC_Bonds_aid2.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Bonds_order uses Python identifier PC_Bonds_order
    __PC_Bonds_order = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Bonds_order'), 'PC_Bonds_order', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_247_httpwww_ncbi_nlm_nih_govPC_Bonds_order', False, pyxb.utils.utility.Location('./pubchem.xsd', 3715, 6), )

    
    PC_Bonds_order = property(__PC_Bonds_order.value, __PC_Bonds_order.set, None, None)

    _ElementMap.update({
        __PC_Bonds_aid1.name() : __PC_Bonds_aid1,
        __PC_Bonds_aid2.name() : __PC_Bonds_aid2,
        __PC_Bonds_order.name() : __PC_Bonds_order
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_248 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3697, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Bonds_aid1_E uses Python identifier PC_Bonds_aid1_E
    __PC_Bonds_aid1_E = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Bonds_aid1_E'), 'PC_Bonds_aid1_E', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_248_httpwww_ncbi_nlm_nih_govPC_Bonds_aid1_E', True, pyxb.utils.utility.Location('./pubchem.xsd', 3699, 12), )

    
    PC_Bonds_aid1_E = property(__PC_Bonds_aid1_E.value, __PC_Bonds_aid1_E.set, None, None)

    _ElementMap.update({
        __PC_Bonds_aid1_E.name() : __PC_Bonds_aid1_E
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_249 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3708, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Bonds_aid2_E uses Python identifier PC_Bonds_aid2_E
    __PC_Bonds_aid2_E = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Bonds_aid2_E'), 'PC_Bonds_aid2_E', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_249_httpwww_ncbi_nlm_nih_govPC_Bonds_aid2_E', True, pyxb.utils.utility.Location('./pubchem.xsd', 3710, 12), )

    
    PC_Bonds_aid2_E = property(__PC_Bonds_aid2_E.value, __PC_Bonds_aid2_E.set, None, None)

    _ElementMap.update({
        __PC_Bonds_aid2_E.name() : __PC_Bonds_aid2_E
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_250 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3716, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-BondType uses Python identifier PC_BondType
    __PC_BondType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-BondType'), 'PC_BondType', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_250_httpwww_ncbi_nlm_nih_govPC_BondType', True, pyxb.utils.utility.Location('./pubchem.xsd', 3727, 0), )

    
    PC_BondType = property(__PC_BondType.value, __PC_BondType.set, None, None)

    _ElementMap.update({
        __PC_BondType.name() : __PC_BondType
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_251 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3765, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoCenter_tetrahedral uses Python identifier PC_StereoCenter_tetrahedral
    __PC_StereoCenter_tetrahedral = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoCenter_tetrahedral'), 'PC_StereoCenter_tetrahedral', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_251_httpwww_ncbi_nlm_nih_govPC_StereoCenter_tetrahedral', False, pyxb.utils.utility.Location('./pubchem.xsd', 3768, 6), )

    
    PC_StereoCenter_tetrahedral = property(__PC_StereoCenter_tetrahedral.value, __PC_StereoCenter_tetrahedral.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoCenter_planar uses Python identifier PC_StereoCenter_planar
    __PC_StereoCenter_planar = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoCenter_planar'), 'PC_StereoCenter_planar', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_251_httpwww_ncbi_nlm_nih_govPC_StereoCenter_planar', False, pyxb.utils.utility.Location('./pubchem.xsd', 3776, 6), )

    
    PC_StereoCenter_planar = property(__PC_StereoCenter_planar.value, __PC_StereoCenter_planar.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoCenter_squareplanar uses Python identifier PC_StereoCenter_squareplanar
    __PC_StereoCenter_squareplanar = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoCenter_squareplanar'), 'PC_StereoCenter_squareplanar', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_251_httpwww_ncbi_nlm_nih_govPC_StereoCenter_squareplanar', False, pyxb.utils.utility.Location('./pubchem.xsd', 3784, 6), )

    
    PC_StereoCenter_squareplanar = property(__PC_StereoCenter_squareplanar.value, __PC_StereoCenter_squareplanar.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoCenter_octahedral uses Python identifier PC_StereoCenter_octahedral
    __PC_StereoCenter_octahedral = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoCenter_octahedral'), 'PC_StereoCenter_octahedral', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_251_httpwww_ncbi_nlm_nih_govPC_StereoCenter_octahedral', False, pyxb.utils.utility.Location('./pubchem.xsd', 3792, 6), )

    
    PC_StereoCenter_octahedral = property(__PC_StereoCenter_octahedral.value, __PC_StereoCenter_octahedral.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoCenter_bipyramid uses Python identifier PC_StereoCenter_bipyramid
    __PC_StereoCenter_bipyramid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoCenter_bipyramid'), 'PC_StereoCenter_bipyramid', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_251_httpwww_ncbi_nlm_nih_govPC_StereoCenter_bipyramid', False, pyxb.utils.utility.Location('./pubchem.xsd', 3800, 6), )

    
    PC_StereoCenter_bipyramid = property(__PC_StereoCenter_bipyramid.value, __PC_StereoCenter_bipyramid.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoCenter_tshape uses Python identifier PC_StereoCenter_tshape
    __PC_StereoCenter_tshape = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoCenter_tshape'), 'PC_StereoCenter_tshape', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_251_httpwww_ncbi_nlm_nih_govPC_StereoCenter_tshape', False, pyxb.utils.utility.Location('./pubchem.xsd', 3808, 6), )

    
    PC_StereoCenter_tshape = property(__PC_StereoCenter_tshape.value, __PC_StereoCenter_tshape.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoCenter_pentagonal uses Python identifier PC_StereoCenter_pentagonal
    __PC_StereoCenter_pentagonal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoCenter_pentagonal'), 'PC_StereoCenter_pentagonal', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_251_httpwww_ncbi_nlm_nih_govPC_StereoCenter_pentagonal', False, pyxb.utils.utility.Location('./pubchem.xsd', 3816, 6), )

    
    PC_StereoCenter_pentagonal = property(__PC_StereoCenter_pentagonal.value, __PC_StereoCenter_pentagonal.set, None, None)

    _ElementMap.update({
        __PC_StereoCenter_tetrahedral.name() : __PC_StereoCenter_tetrahedral,
        __PC_StereoCenter_planar.name() : __PC_StereoCenter_planar,
        __PC_StereoCenter_squareplanar.name() : __PC_StereoCenter_squareplanar,
        __PC_StereoCenter_octahedral.name() : __PC_StereoCenter_octahedral,
        __PC_StereoCenter_bipyramid.name() : __PC_StereoCenter_bipyramid,
        __PC_StereoCenter_tshape.name() : __PC_StereoCenter_tshape,
        __PC_StereoCenter_pentagonal.name() : __PC_StereoCenter_pentagonal
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_252 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3769, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoTetrahedral uses Python identifier PC_StereoTetrahedral
    __PC_StereoTetrahedral = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTetrahedral'), 'PC_StereoTetrahedral', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_252_httpwww_ncbi_nlm_nih_govPC_StereoTetrahedral', False, pyxb.utils.utility.Location('./pubchem.xsd', 3835, 0), )

    
    PC_StereoTetrahedral = property(__PC_StereoTetrahedral.value, __PC_StereoTetrahedral.set, None, None)

    _ElementMap.update({
        __PC_StereoTetrahedral.name() : __PC_StereoTetrahedral
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_253 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3777, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoPlanar uses Python identifier PC_StereoPlanar
    __PC_StereoPlanar = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPlanar'), 'PC_StereoPlanar', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_253_httpwww_ncbi_nlm_nih_govPC_StereoPlanar', False, pyxb.utils.utility.Location('./pubchem.xsd', 3913, 0), )

    
    PC_StereoPlanar = property(__PC_StereoPlanar.value, __PC_StereoPlanar.set, None, None)

    _ElementMap.update({
        __PC_StereoPlanar.name() : __PC_StereoPlanar
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_254 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3785, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoSquarePlanar uses Python identifier PC_StereoSquarePlanar
    __PC_StereoSquarePlanar = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoSquarePlanar'), 'PC_StereoSquarePlanar', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_254_httpwww_ncbi_nlm_nih_govPC_StereoSquarePlanar', False, pyxb.utils.utility.Location('./pubchem.xsd', 3993, 0), )

    
    PC_StereoSquarePlanar = property(__PC_StereoSquarePlanar.value, __PC_StereoSquarePlanar.set, None, None)

    _ElementMap.update({
        __PC_StereoSquarePlanar.name() : __PC_StereoSquarePlanar
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_255 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3793, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoOctahedral uses Python identifier PC_StereoOctahedral
    __PC_StereoOctahedral = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoOctahedral'), 'PC_StereoOctahedral', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_255_httpwww_ncbi_nlm_nih_govPC_StereoOctahedral', False, pyxb.utils.utility.Location('./pubchem.xsd', 4055, 0), )

    
    PC_StereoOctahedral = property(__PC_StereoOctahedral.value, __PC_StereoOctahedral.set, None, None)

    _ElementMap.update({
        __PC_StereoOctahedral.name() : __PC_StereoOctahedral
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_256 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3801, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoTrigonalBiPyramid uses Python identifier PC_StereoTrigonalBiPyramid
    __PC_StereoTrigonalBiPyramid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTrigonalBiPyramid'), 'PC_StereoTrigonalBiPyramid', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_256_httpwww_ncbi_nlm_nih_govPC_StereoTrigonalBiPyramid', False, pyxb.utils.utility.Location('./pubchem.xsd', 4102, 0), )

    
    PC_StereoTrigonalBiPyramid = property(__PC_StereoTrigonalBiPyramid.value, __PC_StereoTrigonalBiPyramid.set, None, None)

    _ElementMap.update({
        __PC_StereoTrigonalBiPyramid.name() : __PC_StereoTrigonalBiPyramid
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_257 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3809, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoTShape uses Python identifier PC_StereoTShape
    __PC_StereoTShape = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTShape'), 'PC_StereoTShape', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_257_httpwww_ncbi_nlm_nih_govPC_StereoTShape', False, pyxb.utils.utility.Location('./pubchem.xsd', 4144, 0), )

    
    PC_StereoTShape = property(__PC_StereoTShape.value, __PC_StereoTShape.set, None, None)

    _ElementMap.update({
        __PC_StereoTShape.name() : __PC_StereoTShape
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_258 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3817, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoPentagonalBiPyramid uses Python identifier PC_StereoPentagonalBiPyramid
    __PC_StereoPentagonalBiPyramid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPentagonalBiPyramid'), 'PC_StereoPentagonalBiPyramid', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_258_httpwww_ncbi_nlm_nih_govPC_StereoPentagonalBiPyramid', False, pyxb.utils.utility.Location('./pubchem.xsd', 4176, 0), )

    
    PC_StereoPentagonalBiPyramid = property(__PC_StereoPentagonalBiPyramid.value, __PC_StereoPentagonalBiPyramid.set, None, None)

    _ElementMap.update({
        __PC_StereoPentagonalBiPyramid.name() : __PC_StereoPentagonalBiPyramid
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_259 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3836, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoTetrahedral_center uses Python identifier PC_StereoTetrahedral_center
    __PC_StereoTetrahedral_center = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTetrahedral_center'), 'PC_StereoTetrahedral_center', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_259_httpwww_ncbi_nlm_nih_govPC_StereoTetrahedral_center', False, pyxb.utils.utility.Location('./pubchem.xsd', 3842, 6), )

    
    PC_StereoTetrahedral_center = property(__PC_StereoTetrahedral_center.value, __PC_StereoTetrahedral_center.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoTetrahedral_above uses Python identifier PC_StereoTetrahedral_above
    __PC_StereoTetrahedral_above = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTetrahedral_above'), 'PC_StereoTetrahedral_above', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_259_httpwww_ncbi_nlm_nih_govPC_StereoTetrahedral_above', False, pyxb.utils.utility.Location('./pubchem.xsd', 3847, 6), )

    
    PC_StereoTetrahedral_above = property(__PC_StereoTetrahedral_above.value, __PC_StereoTetrahedral_above.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoTetrahedral_top uses Python identifier PC_StereoTetrahedral_top
    __PC_StereoTetrahedral_top = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTetrahedral_top'), 'PC_StereoTetrahedral_top', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_259_httpwww_ncbi_nlm_nih_govPC_StereoTetrahedral_top', False, pyxb.utils.utility.Location('./pubchem.xsd', 3852, 6), )

    
    PC_StereoTetrahedral_top = property(__PC_StereoTetrahedral_top.value, __PC_StereoTetrahedral_top.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoTetrahedral_bottom uses Python identifier PC_StereoTetrahedral_bottom
    __PC_StereoTetrahedral_bottom = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTetrahedral_bottom'), 'PC_StereoTetrahedral_bottom', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_259_httpwww_ncbi_nlm_nih_govPC_StereoTetrahedral_bottom', False, pyxb.utils.utility.Location('./pubchem.xsd', 3857, 6), )

    
    PC_StereoTetrahedral_bottom = property(__PC_StereoTetrahedral_bottom.value, __PC_StereoTetrahedral_bottom.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoTetrahedral_below uses Python identifier PC_StereoTetrahedral_below
    __PC_StereoTetrahedral_below = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTetrahedral_below'), 'PC_StereoTetrahedral_below', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_259_httpwww_ncbi_nlm_nih_govPC_StereoTetrahedral_below', False, pyxb.utils.utility.Location('./pubchem.xsd', 3862, 6), )

    
    PC_StereoTetrahedral_below = property(__PC_StereoTetrahedral_below.value, __PC_StereoTetrahedral_below.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoTetrahedral_parity uses Python identifier PC_StereoTetrahedral_parity
    __PC_StereoTetrahedral_parity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTetrahedral_parity'), 'PC_StereoTetrahedral_parity', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_259_httpwww_ncbi_nlm_nih_govPC_StereoTetrahedral_parity', False, pyxb.utils.utility.Location('./pubchem.xsd', 3863, 6), )

    
    PC_StereoTetrahedral_parity = property(__PC_StereoTetrahedral_parity.value, __PC_StereoTetrahedral_parity.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoTetrahedral_type uses Python identifier PC_StereoTetrahedral_type
    __PC_StereoTetrahedral_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTetrahedral_type'), 'PC_StereoTetrahedral_type', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_259_httpwww_ncbi_nlm_nih_govPC_StereoTetrahedral_type', False, pyxb.utils.utility.Location('./pubchem.xsd', 3881, 6), )

    
    PC_StereoTetrahedral_type = property(__PC_StereoTetrahedral_type.value, __PC_StereoTetrahedral_type.set, None, None)

    _ElementMap.update({
        __PC_StereoTetrahedral_center.name() : __PC_StereoTetrahedral_center,
        __PC_StereoTetrahedral_above.name() : __PC_StereoTetrahedral_above,
        __PC_StereoTetrahedral_top.name() : __PC_StereoTetrahedral_top,
        __PC_StereoTetrahedral_bottom.name() : __PC_StereoTetrahedral_bottom,
        __PC_StereoTetrahedral_below.name() : __PC_StereoTetrahedral_below,
        __PC_StereoTetrahedral_parity.name() : __PC_StereoTetrahedral_parity,
        __PC_StereoTetrahedral_type.name() : __PC_StereoTetrahedral_type
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_260 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3914, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoPlanar_left uses Python identifier PC_StereoPlanar_left
    __PC_StereoPlanar_left = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPlanar_left'), 'PC_StereoPlanar_left', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_260_httpwww_ncbi_nlm_nih_govPC_StereoPlanar_left', False, pyxb.utils.utility.Location('./pubchem.xsd', 3920, 6), )

    
    PC_StereoPlanar_left = property(__PC_StereoPlanar_left.value, __PC_StereoPlanar_left.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoPlanar_ltop uses Python identifier PC_StereoPlanar_ltop
    __PC_StereoPlanar_ltop = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPlanar_ltop'), 'PC_StereoPlanar_ltop', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_260_httpwww_ncbi_nlm_nih_govPC_StereoPlanar_ltop', False, pyxb.utils.utility.Location('./pubchem.xsd', 3925, 6), )

    
    PC_StereoPlanar_ltop = property(__PC_StereoPlanar_ltop.value, __PC_StereoPlanar_ltop.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoPlanar_lbottom uses Python identifier PC_StereoPlanar_lbottom
    __PC_StereoPlanar_lbottom = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPlanar_lbottom'), 'PC_StereoPlanar_lbottom', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_260_httpwww_ncbi_nlm_nih_govPC_StereoPlanar_lbottom', False, pyxb.utils.utility.Location('./pubchem.xsd', 3930, 6), )

    
    PC_StereoPlanar_lbottom = property(__PC_StereoPlanar_lbottom.value, __PC_StereoPlanar_lbottom.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoPlanar_right uses Python identifier PC_StereoPlanar_right
    __PC_StereoPlanar_right = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPlanar_right'), 'PC_StereoPlanar_right', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_260_httpwww_ncbi_nlm_nih_govPC_StereoPlanar_right', False, pyxb.utils.utility.Location('./pubchem.xsd', 3935, 6), )

    
    PC_StereoPlanar_right = property(__PC_StereoPlanar_right.value, __PC_StereoPlanar_right.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoPlanar_rtop uses Python identifier PC_StereoPlanar_rtop
    __PC_StereoPlanar_rtop = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPlanar_rtop'), 'PC_StereoPlanar_rtop', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_260_httpwww_ncbi_nlm_nih_govPC_StereoPlanar_rtop', False, pyxb.utils.utility.Location('./pubchem.xsd', 3940, 6), )

    
    PC_StereoPlanar_rtop = property(__PC_StereoPlanar_rtop.value, __PC_StereoPlanar_rtop.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoPlanar_rbottom uses Python identifier PC_StereoPlanar_rbottom
    __PC_StereoPlanar_rbottom = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPlanar_rbottom'), 'PC_StereoPlanar_rbottom', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_260_httpwww_ncbi_nlm_nih_govPC_StereoPlanar_rbottom', False, pyxb.utils.utility.Location('./pubchem.xsd', 3945, 6), )

    
    PC_StereoPlanar_rbottom = property(__PC_StereoPlanar_rbottom.value, __PC_StereoPlanar_rbottom.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoPlanar_parity uses Python identifier PC_StereoPlanar_parity
    __PC_StereoPlanar_parity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPlanar_parity'), 'PC_StereoPlanar_parity', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_260_httpwww_ncbi_nlm_nih_govPC_StereoPlanar_parity', False, pyxb.utils.utility.Location('./pubchem.xsd', 3946, 6), )

    
    PC_StereoPlanar_parity = property(__PC_StereoPlanar_parity.value, __PC_StereoPlanar_parity.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoPlanar_type uses Python identifier PC_StereoPlanar_type
    __PC_StereoPlanar_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPlanar_type'), 'PC_StereoPlanar_type', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_260_httpwww_ncbi_nlm_nih_govPC_StereoPlanar_type', False, pyxb.utils.utility.Location('./pubchem.xsd', 3964, 6), )

    
    PC_StereoPlanar_type = property(__PC_StereoPlanar_type.value, __PC_StereoPlanar_type.set, None, None)

    _ElementMap.update({
        __PC_StereoPlanar_left.name() : __PC_StereoPlanar_left,
        __PC_StereoPlanar_ltop.name() : __PC_StereoPlanar_ltop,
        __PC_StereoPlanar_lbottom.name() : __PC_StereoPlanar_lbottom,
        __PC_StereoPlanar_right.name() : __PC_StereoPlanar_right,
        __PC_StereoPlanar_rtop.name() : __PC_StereoPlanar_rtop,
        __PC_StereoPlanar_rbottom.name() : __PC_StereoPlanar_rbottom,
        __PC_StereoPlanar_parity.name() : __PC_StereoPlanar_parity,
        __PC_StereoPlanar_type.name() : __PC_StereoPlanar_type
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_261 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3994, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoSquarePlanar_center uses Python identifier PC_StereoSquarePlanar_center
    __PC_StereoSquarePlanar_center = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoSquarePlanar_center'), 'PC_StereoSquarePlanar_center', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_261_httpwww_ncbi_nlm_nih_govPC_StereoSquarePlanar_center', False, pyxb.utils.utility.Location('./pubchem.xsd', 4000, 6), )

    
    PC_StereoSquarePlanar_center = property(__PC_StereoSquarePlanar_center.value, __PC_StereoSquarePlanar_center.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoSquarePlanar_lbelow uses Python identifier PC_StereoSquarePlanar_lbelow
    __PC_StereoSquarePlanar_lbelow = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoSquarePlanar_lbelow'), 'PC_StereoSquarePlanar_lbelow', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_261_httpwww_ncbi_nlm_nih_govPC_StereoSquarePlanar_lbelow', False, pyxb.utils.utility.Location('./pubchem.xsd', 4005, 6), )

    
    PC_StereoSquarePlanar_lbelow = property(__PC_StereoSquarePlanar_lbelow.value, __PC_StereoSquarePlanar_lbelow.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoSquarePlanar_rbelow uses Python identifier PC_StereoSquarePlanar_rbelow
    __PC_StereoSquarePlanar_rbelow = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoSquarePlanar_rbelow'), 'PC_StereoSquarePlanar_rbelow', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_261_httpwww_ncbi_nlm_nih_govPC_StereoSquarePlanar_rbelow', False, pyxb.utils.utility.Location('./pubchem.xsd', 4010, 6), )

    
    PC_StereoSquarePlanar_rbelow = property(__PC_StereoSquarePlanar_rbelow.value, __PC_StereoSquarePlanar_rbelow.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoSquarePlanar_labove uses Python identifier PC_StereoSquarePlanar_labove
    __PC_StereoSquarePlanar_labove = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoSquarePlanar_labove'), 'PC_StereoSquarePlanar_labove', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_261_httpwww_ncbi_nlm_nih_govPC_StereoSquarePlanar_labove', False, pyxb.utils.utility.Location('./pubchem.xsd', 4015, 6), )

    
    PC_StereoSquarePlanar_labove = property(__PC_StereoSquarePlanar_labove.value, __PC_StereoSquarePlanar_labove.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoSquarePlanar_rabove uses Python identifier PC_StereoSquarePlanar_rabove
    __PC_StereoSquarePlanar_rabove = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoSquarePlanar_rabove'), 'PC_StereoSquarePlanar_rabove', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_261_httpwww_ncbi_nlm_nih_govPC_StereoSquarePlanar_rabove', False, pyxb.utils.utility.Location('./pubchem.xsd', 4020, 6), )

    
    PC_StereoSquarePlanar_rabove = property(__PC_StereoSquarePlanar_rabove.value, __PC_StereoSquarePlanar_rabove.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoSquarePlanar_parity uses Python identifier PC_StereoSquarePlanar_parity
    __PC_StereoSquarePlanar_parity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoSquarePlanar_parity'), 'PC_StereoSquarePlanar_parity', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_261_httpwww_ncbi_nlm_nih_govPC_StereoSquarePlanar_parity', False, pyxb.utils.utility.Location('./pubchem.xsd', 4021, 6), )

    
    PC_StereoSquarePlanar_parity = property(__PC_StereoSquarePlanar_parity.value, __PC_StereoSquarePlanar_parity.set, None, None)

    _ElementMap.update({
        __PC_StereoSquarePlanar_center.name() : __PC_StereoSquarePlanar_center,
        __PC_StereoSquarePlanar_lbelow.name() : __PC_StereoSquarePlanar_lbelow,
        __PC_StereoSquarePlanar_rbelow.name() : __PC_StereoSquarePlanar_rbelow,
        __PC_StereoSquarePlanar_labove.name() : __PC_StereoSquarePlanar_labove,
        __PC_StereoSquarePlanar_rabove.name() : __PC_StereoSquarePlanar_rabove,
        __PC_StereoSquarePlanar_parity.name() : __PC_StereoSquarePlanar_parity
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_262 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4056, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoOctahedral_center uses Python identifier PC_StereoOctahedral_center
    __PC_StereoOctahedral_center = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoOctahedral_center'), 'PC_StereoOctahedral_center', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_262_httpwww_ncbi_nlm_nih_govPC_StereoOctahedral_center', False, pyxb.utils.utility.Location('./pubchem.xsd', 4062, 6), )

    
    PC_StereoOctahedral_center = property(__PC_StereoOctahedral_center.value, __PC_StereoOctahedral_center.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoOctahedral_top uses Python identifier PC_StereoOctahedral_top
    __PC_StereoOctahedral_top = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoOctahedral_top'), 'PC_StereoOctahedral_top', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_262_httpwww_ncbi_nlm_nih_govPC_StereoOctahedral_top', False, pyxb.utils.utility.Location('./pubchem.xsd', 4067, 6), )

    
    PC_StereoOctahedral_top = property(__PC_StereoOctahedral_top.value, __PC_StereoOctahedral_top.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoOctahedral_bottom uses Python identifier PC_StereoOctahedral_bottom
    __PC_StereoOctahedral_bottom = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoOctahedral_bottom'), 'PC_StereoOctahedral_bottom', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_262_httpwww_ncbi_nlm_nih_govPC_StereoOctahedral_bottom', False, pyxb.utils.utility.Location('./pubchem.xsd', 4072, 6), )

    
    PC_StereoOctahedral_bottom = property(__PC_StereoOctahedral_bottom.value, __PC_StereoOctahedral_bottom.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoOctahedral_labove uses Python identifier PC_StereoOctahedral_labove
    __PC_StereoOctahedral_labove = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoOctahedral_labove'), 'PC_StereoOctahedral_labove', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_262_httpwww_ncbi_nlm_nih_govPC_StereoOctahedral_labove', False, pyxb.utils.utility.Location('./pubchem.xsd', 4077, 6), )

    
    PC_StereoOctahedral_labove = property(__PC_StereoOctahedral_labove.value, __PC_StereoOctahedral_labove.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoOctahedral_lbelow uses Python identifier PC_StereoOctahedral_lbelow
    __PC_StereoOctahedral_lbelow = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoOctahedral_lbelow'), 'PC_StereoOctahedral_lbelow', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_262_httpwww_ncbi_nlm_nih_govPC_StereoOctahedral_lbelow', False, pyxb.utils.utility.Location('./pubchem.xsd', 4082, 6), )

    
    PC_StereoOctahedral_lbelow = property(__PC_StereoOctahedral_lbelow.value, __PC_StereoOctahedral_lbelow.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoOctahedral_rabove uses Python identifier PC_StereoOctahedral_rabove
    __PC_StereoOctahedral_rabove = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoOctahedral_rabove'), 'PC_StereoOctahedral_rabove', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_262_httpwww_ncbi_nlm_nih_govPC_StereoOctahedral_rabove', False, pyxb.utils.utility.Location('./pubchem.xsd', 4087, 6), )

    
    PC_StereoOctahedral_rabove = property(__PC_StereoOctahedral_rabove.value, __PC_StereoOctahedral_rabove.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoOctahedral_rbelow uses Python identifier PC_StereoOctahedral_rbelow
    __PC_StereoOctahedral_rbelow = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoOctahedral_rbelow'), 'PC_StereoOctahedral_rbelow', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_262_httpwww_ncbi_nlm_nih_govPC_StereoOctahedral_rbelow', False, pyxb.utils.utility.Location('./pubchem.xsd', 4092, 6), )

    
    PC_StereoOctahedral_rbelow = property(__PC_StereoOctahedral_rbelow.value, __PC_StereoOctahedral_rbelow.set, None, None)

    _ElementMap.update({
        __PC_StereoOctahedral_center.name() : __PC_StereoOctahedral_center,
        __PC_StereoOctahedral_top.name() : __PC_StereoOctahedral_top,
        __PC_StereoOctahedral_bottom.name() : __PC_StereoOctahedral_bottom,
        __PC_StereoOctahedral_labove.name() : __PC_StereoOctahedral_labove,
        __PC_StereoOctahedral_lbelow.name() : __PC_StereoOctahedral_lbelow,
        __PC_StereoOctahedral_rabove.name() : __PC_StereoOctahedral_rabove,
        __PC_StereoOctahedral_rbelow.name() : __PC_StereoOctahedral_rbelow
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_263 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4103, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoTrigonalBiPyramid_center uses Python identifier PC_StereoTrigonalBiPyramid_center
    __PC_StereoTrigonalBiPyramid_center = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTrigonalBiPyramid_center'), 'PC_StereoTrigonalBiPyramid_center', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_263_httpwww_ncbi_nlm_nih_govPC_StereoTrigonalBiPyramid_center', False, pyxb.utils.utility.Location('./pubchem.xsd', 4109, 6), )

    
    PC_StereoTrigonalBiPyramid_center = property(__PC_StereoTrigonalBiPyramid_center.value, __PC_StereoTrigonalBiPyramid_center.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoTrigonalBiPyramid_above uses Python identifier PC_StereoTrigonalBiPyramid_above
    __PC_StereoTrigonalBiPyramid_above = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTrigonalBiPyramid_above'), 'PC_StereoTrigonalBiPyramid_above', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_263_httpwww_ncbi_nlm_nih_govPC_StereoTrigonalBiPyramid_above', False, pyxb.utils.utility.Location('./pubchem.xsd', 4114, 6), )

    
    PC_StereoTrigonalBiPyramid_above = property(__PC_StereoTrigonalBiPyramid_above.value, __PC_StereoTrigonalBiPyramid_above.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoTrigonalBiPyramid_below uses Python identifier PC_StereoTrigonalBiPyramid_below
    __PC_StereoTrigonalBiPyramid_below = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTrigonalBiPyramid_below'), 'PC_StereoTrigonalBiPyramid_below', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_263_httpwww_ncbi_nlm_nih_govPC_StereoTrigonalBiPyramid_below', False, pyxb.utils.utility.Location('./pubchem.xsd', 4119, 6), )

    
    PC_StereoTrigonalBiPyramid_below = property(__PC_StereoTrigonalBiPyramid_below.value, __PC_StereoTrigonalBiPyramid_below.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoTrigonalBiPyramid_top uses Python identifier PC_StereoTrigonalBiPyramid_top
    __PC_StereoTrigonalBiPyramid_top = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTrigonalBiPyramid_top'), 'PC_StereoTrigonalBiPyramid_top', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_263_httpwww_ncbi_nlm_nih_govPC_StereoTrigonalBiPyramid_top', False, pyxb.utils.utility.Location('./pubchem.xsd', 4124, 6), )

    
    PC_StereoTrigonalBiPyramid_top = property(__PC_StereoTrigonalBiPyramid_top.value, __PC_StereoTrigonalBiPyramid_top.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoTrigonalBiPyramid_bottom uses Python identifier PC_StereoTrigonalBiPyramid_bottom
    __PC_StereoTrigonalBiPyramid_bottom = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTrigonalBiPyramid_bottom'), 'PC_StereoTrigonalBiPyramid_bottom', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_263_httpwww_ncbi_nlm_nih_govPC_StereoTrigonalBiPyramid_bottom', False, pyxb.utils.utility.Location('./pubchem.xsd', 4129, 6), )

    
    PC_StereoTrigonalBiPyramid_bottom = property(__PC_StereoTrigonalBiPyramid_bottom.value, __PC_StereoTrigonalBiPyramid_bottom.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoTrigonalBiPyramid_right uses Python identifier PC_StereoTrigonalBiPyramid_right
    __PC_StereoTrigonalBiPyramid_right = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTrigonalBiPyramid_right'), 'PC_StereoTrigonalBiPyramid_right', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_263_httpwww_ncbi_nlm_nih_govPC_StereoTrigonalBiPyramid_right', False, pyxb.utils.utility.Location('./pubchem.xsd', 4134, 6), )

    
    PC_StereoTrigonalBiPyramid_right = property(__PC_StereoTrigonalBiPyramid_right.value, __PC_StereoTrigonalBiPyramid_right.set, None, None)

    _ElementMap.update({
        __PC_StereoTrigonalBiPyramid_center.name() : __PC_StereoTrigonalBiPyramid_center,
        __PC_StereoTrigonalBiPyramid_above.name() : __PC_StereoTrigonalBiPyramid_above,
        __PC_StereoTrigonalBiPyramid_below.name() : __PC_StereoTrigonalBiPyramid_below,
        __PC_StereoTrigonalBiPyramid_top.name() : __PC_StereoTrigonalBiPyramid_top,
        __PC_StereoTrigonalBiPyramid_bottom.name() : __PC_StereoTrigonalBiPyramid_bottom,
        __PC_StereoTrigonalBiPyramid_right.name() : __PC_StereoTrigonalBiPyramid_right
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_264 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4145, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoTShape_center uses Python identifier PC_StereoTShape_center
    __PC_StereoTShape_center = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTShape_center'), 'PC_StereoTShape_center', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_264_httpwww_ncbi_nlm_nih_govPC_StereoTShape_center', False, pyxb.utils.utility.Location('./pubchem.xsd', 4151, 6), )

    
    PC_StereoTShape_center = property(__PC_StereoTShape_center.value, __PC_StereoTShape_center.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoTShape_top uses Python identifier PC_StereoTShape_top
    __PC_StereoTShape_top = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTShape_top'), 'PC_StereoTShape_top', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_264_httpwww_ncbi_nlm_nih_govPC_StereoTShape_top', False, pyxb.utils.utility.Location('./pubchem.xsd', 4156, 6), )

    
    PC_StereoTShape_top = property(__PC_StereoTShape_top.value, __PC_StereoTShape_top.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoTShape_bottom uses Python identifier PC_StereoTShape_bottom
    __PC_StereoTShape_bottom = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTShape_bottom'), 'PC_StereoTShape_bottom', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_264_httpwww_ncbi_nlm_nih_govPC_StereoTShape_bottom', False, pyxb.utils.utility.Location('./pubchem.xsd', 4161, 6), )

    
    PC_StereoTShape_bottom = property(__PC_StereoTShape_bottom.value, __PC_StereoTShape_bottom.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoTShape_above uses Python identifier PC_StereoTShape_above
    __PC_StereoTShape_above = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTShape_above'), 'PC_StereoTShape_above', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_264_httpwww_ncbi_nlm_nih_govPC_StereoTShape_above', False, pyxb.utils.utility.Location('./pubchem.xsd', 4166, 6), )

    
    PC_StereoTShape_above = property(__PC_StereoTShape_above.value, __PC_StereoTShape_above.set, None, None)

    _ElementMap.update({
        __PC_StereoTShape_center.name() : __PC_StereoTShape_center,
        __PC_StereoTShape_top.name() : __PC_StereoTShape_top,
        __PC_StereoTShape_bottom.name() : __PC_StereoTShape_bottom,
        __PC_StereoTShape_above.name() : __PC_StereoTShape_above
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_265 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4177, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoPentagonalBiPyramid_center uses Python identifier PC_StereoPentagonalBiPyramid_center
    __PC_StereoPentagonalBiPyramid_center = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPentagonalBiPyramid_center'), 'PC_StereoPentagonalBiPyramid_center', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_265_httpwww_ncbi_nlm_nih_govPC_StereoPentagonalBiPyramid_center', False, pyxb.utils.utility.Location('./pubchem.xsd', 4183, 6), )

    
    PC_StereoPentagonalBiPyramid_center = property(__PC_StereoPentagonalBiPyramid_center.value, __PC_StereoPentagonalBiPyramid_center.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoPentagonalBiPyramid_top uses Python identifier PC_StereoPentagonalBiPyramid_top
    __PC_StereoPentagonalBiPyramid_top = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPentagonalBiPyramid_top'), 'PC_StereoPentagonalBiPyramid_top', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_265_httpwww_ncbi_nlm_nih_govPC_StereoPentagonalBiPyramid_top', False, pyxb.utils.utility.Location('./pubchem.xsd', 4188, 6), )

    
    PC_StereoPentagonalBiPyramid_top = property(__PC_StereoPentagonalBiPyramid_top.value, __PC_StereoPentagonalBiPyramid_top.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoPentagonalBiPyramid_bottom uses Python identifier PC_StereoPentagonalBiPyramid_bottom
    __PC_StereoPentagonalBiPyramid_bottom = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPentagonalBiPyramid_bottom'), 'PC_StereoPentagonalBiPyramid_bottom', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_265_httpwww_ncbi_nlm_nih_govPC_StereoPentagonalBiPyramid_bottom', False, pyxb.utils.utility.Location('./pubchem.xsd', 4193, 6), )

    
    PC_StereoPentagonalBiPyramid_bottom = property(__PC_StereoPentagonalBiPyramid_bottom.value, __PC_StereoPentagonalBiPyramid_bottom.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoPentagonalBiPyramid_left uses Python identifier PC_StereoPentagonalBiPyramid_left
    __PC_StereoPentagonalBiPyramid_left = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPentagonalBiPyramid_left'), 'PC_StereoPentagonalBiPyramid_left', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_265_httpwww_ncbi_nlm_nih_govPC_StereoPentagonalBiPyramid_left', False, pyxb.utils.utility.Location('./pubchem.xsd', 4198, 6), )

    
    PC_StereoPentagonalBiPyramid_left = property(__PC_StereoPentagonalBiPyramid_left.value, __PC_StereoPentagonalBiPyramid_left.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoPentagonalBiPyramid_labove uses Python identifier PC_StereoPentagonalBiPyramid_labove
    __PC_StereoPentagonalBiPyramid_labove = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPentagonalBiPyramid_labove'), 'PC_StereoPentagonalBiPyramid_labove', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_265_httpwww_ncbi_nlm_nih_govPC_StereoPentagonalBiPyramid_labove', False, pyxb.utils.utility.Location('./pubchem.xsd', 4203, 6), )

    
    PC_StereoPentagonalBiPyramid_labove = property(__PC_StereoPentagonalBiPyramid_labove.value, __PC_StereoPentagonalBiPyramid_labove.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoPentagonalBiPyramid_lbelow uses Python identifier PC_StereoPentagonalBiPyramid_lbelow
    __PC_StereoPentagonalBiPyramid_lbelow = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPentagonalBiPyramid_lbelow'), 'PC_StereoPentagonalBiPyramid_lbelow', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_265_httpwww_ncbi_nlm_nih_govPC_StereoPentagonalBiPyramid_lbelow', False, pyxb.utils.utility.Location('./pubchem.xsd', 4208, 6), )

    
    PC_StereoPentagonalBiPyramid_lbelow = property(__PC_StereoPentagonalBiPyramid_lbelow.value, __PC_StereoPentagonalBiPyramid_lbelow.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoPentagonalBiPyramid_rabove uses Python identifier PC_StereoPentagonalBiPyramid_rabove
    __PC_StereoPentagonalBiPyramid_rabove = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPentagonalBiPyramid_rabove'), 'PC_StereoPentagonalBiPyramid_rabove', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_265_httpwww_ncbi_nlm_nih_govPC_StereoPentagonalBiPyramid_rabove', False, pyxb.utils.utility.Location('./pubchem.xsd', 4213, 6), )

    
    PC_StereoPentagonalBiPyramid_rabove = property(__PC_StereoPentagonalBiPyramid_rabove.value, __PC_StereoPentagonalBiPyramid_rabove.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-StereoPentagonalBiPyramid_rbelow uses Python identifier PC_StereoPentagonalBiPyramid_rbelow
    __PC_StereoPentagonalBiPyramid_rbelow = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPentagonalBiPyramid_rbelow'), 'PC_StereoPentagonalBiPyramid_rbelow', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_265_httpwww_ncbi_nlm_nih_govPC_StereoPentagonalBiPyramid_rbelow', False, pyxb.utils.utility.Location('./pubchem.xsd', 4218, 6), )

    
    PC_StereoPentagonalBiPyramid_rbelow = property(__PC_StereoPentagonalBiPyramid_rbelow.value, __PC_StereoPentagonalBiPyramid_rbelow.set, None, None)

    _ElementMap.update({
        __PC_StereoPentagonalBiPyramid_center.name() : __PC_StereoPentagonalBiPyramid_center,
        __PC_StereoPentagonalBiPyramid_top.name() : __PC_StereoPentagonalBiPyramid_top,
        __PC_StereoPentagonalBiPyramid_bottom.name() : __PC_StereoPentagonalBiPyramid_bottom,
        __PC_StereoPentagonalBiPyramid_left.name() : __PC_StereoPentagonalBiPyramid_left,
        __PC_StereoPentagonalBiPyramid_labove.name() : __PC_StereoPentagonalBiPyramid_labove,
        __PC_StereoPentagonalBiPyramid_lbelow.name() : __PC_StereoPentagonalBiPyramid_lbelow,
        __PC_StereoPentagonalBiPyramid_rabove.name() : __PC_StereoPentagonalBiPyramid_rabove,
        __PC_StereoPentagonalBiPyramid_rbelow.name() : __PC_StereoPentagonalBiPyramid_rbelow
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_266 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4277, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssaySubmit uses Python identifier PC_AssaySubmit
    __PC_AssaySubmit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssaySubmit'), 'PC_AssaySubmit', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_266_httpwww_ncbi_nlm_nih_govPC_AssaySubmit', True, pyxb.utils.utility.Location('./pubchem.xsd', 4285, 0), )

    
    PC_AssaySubmit = property(__PC_AssaySubmit.value, __PC_AssaySubmit.set, None, None)

    _ElementMap.update({
        __PC_AssaySubmit.name() : __PC_AssaySubmit
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_267 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4286, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssaySubmit_assay uses Python identifier PC_AssaySubmit_assay
    __PC_AssaySubmit_assay = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssaySubmit_assay'), 'PC_AssaySubmit_assay', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_267_httpwww_ncbi_nlm_nih_govPC_AssaySubmit_assay', False, pyxb.utils.utility.Location('./pubchem.xsd', 4288, 6), )

    
    PC_AssaySubmit_assay = property(__PC_AssaySubmit_assay.value, __PC_AssaySubmit_assay.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssaySubmit_data uses Python identifier PC_AssaySubmit_data
    __PC_AssaySubmit_data = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssaySubmit_data'), 'PC_AssaySubmit_data', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_267_httpwww_ncbi_nlm_nih_govPC_AssaySubmit_data', False, pyxb.utils.utility.Location('./pubchem.xsd', 4321, 6), )

    
    PC_AssaySubmit_data = property(__PC_AssaySubmit_data.value, __PC_AssaySubmit_data.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssaySubmit_revoke uses Python identifier PC_AssaySubmit_revoke
    __PC_AssaySubmit_revoke = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssaySubmit_revoke'), 'PC_AssaySubmit_revoke', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_267_httpwww_ncbi_nlm_nih_govPC_AssaySubmit_revoke', False, pyxb.utils.utility.Location('./pubchem.xsd', 4329, 6), )

    
    PC_AssaySubmit_revoke = property(__PC_AssaySubmit_revoke.value, __PC_AssaySubmit_revoke.set, None, None)

    _ElementMap.update({
        __PC_AssaySubmit_assay.name() : __PC_AssaySubmit_assay,
        __PC_AssaySubmit_data.name() : __PC_AssaySubmit_data,
        __PC_AssaySubmit_revoke.name() : __PC_AssaySubmit_revoke
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_268 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4289, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssaySubmit_assay_aid uses Python identifier PC_AssaySubmit_assay_aid
    __PC_AssaySubmit_assay_aid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssaySubmit_assay_aid'), 'PC_AssaySubmit_assay_aid', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_268_httpwww_ncbi_nlm_nih_govPC_AssaySubmit_assay_aid', False, pyxb.utils.utility.Location('./pubchem.xsd', 4292, 12), )

    
    PC_AssaySubmit_assay_aid = property(__PC_AssaySubmit_assay_aid.value, __PC_AssaySubmit_assay_aid.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssaySubmit_assay_aid-source uses Python identifier PC_AssaySubmit_assay_aid_source
    __PC_AssaySubmit_assay_aid_source = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssaySubmit_assay_aid-source'), 'PC_AssaySubmit_assay_aid_source', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_268_httpwww_ncbi_nlm_nih_govPC_AssaySubmit_assay_aid_source', False, pyxb.utils.utility.Location('./pubchem.xsd', 4294, 12), )

    
    PC_AssaySubmit_assay_aid_source = property(__PC_AssaySubmit_assay_aid_source.value, __PC_AssaySubmit_assay_aid_source.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssaySubmit_assay_descr uses Python identifier PC_AssaySubmit_assay_descr
    __PC_AssaySubmit_assay_descr = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssaySubmit_assay_descr'), 'PC_AssaySubmit_assay_descr', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_268_httpwww_ncbi_nlm_nih_govPC_AssaySubmit_assay_descr', False, pyxb.utils.utility.Location('./pubchem.xsd', 4302, 12), )

    
    PC_AssaySubmit_assay_descr = property(__PC_AssaySubmit_assay_descr.value, __PC_AssaySubmit_assay_descr.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssaySubmit_assay_aidver uses Python identifier PC_AssaySubmit_assay_aidver
    __PC_AssaySubmit_assay_aidver = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssaySubmit_assay_aidver'), 'PC_AssaySubmit_assay_aidver', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_268_httpwww_ncbi_nlm_nih_govPC_AssaySubmit_assay_aidver', False, pyxb.utils.utility.Location('./pubchem.xsd', 4310, 12), )

    
    PC_AssaySubmit_assay_aidver = property(__PC_AssaySubmit_assay_aidver.value, __PC_AssaySubmit_assay_aidver.set, None, None)

    _ElementMap.update({
        __PC_AssaySubmit_assay_aid.name() : __PC_AssaySubmit_assay_aid,
        __PC_AssaySubmit_assay_aid_source.name() : __PC_AssaySubmit_assay_aid_source,
        __PC_AssaySubmit_assay_descr.name() : __PC_AssaySubmit_assay_descr,
        __PC_AssaySubmit_assay_aidver.name() : __PC_AssaySubmit_assay_aidver
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_269 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4295, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Source uses Python identifier PC_Source
    __PC_Source = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Source'), 'PC_Source', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_269_httpwww_ncbi_nlm_nih_govPC_Source', False, pyxb.utils.utility.Location('./pubchem.xsd', 2479, 0), )

    
    PC_Source = property(__PC_Source.value, __PC_Source.set, None, None)

    _ElementMap.update({
        __PC_Source.name() : __PC_Source
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_270 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4303, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayDescription uses Python identifier PC_AssayDescription
    __PC_AssayDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription'), 'PC_AssayDescription', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_270_httpwww_ncbi_nlm_nih_govPC_AssayDescription', False, pyxb.utils.utility.Location('./pubchem.xsd', 4485, 0), )

    
    PC_AssayDescription = property(__PC_AssayDescription.value, __PC_AssayDescription.set, None, None)

    _ElementMap.update({
        __PC_AssayDescription.name() : __PC_AssayDescription
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_271 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4311, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-ID uses Python identifier PC_ID
    __PC_ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-ID'), 'PC_ID', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_271_httpwww_ncbi_nlm_nih_govPC_ID', False, pyxb.utils.utility.Location('./pubchem.xsd', 2461, 0), )

    
    PC_ID = property(__PC_ID.value, __PC_ID.set, None, None)

    _ElementMap.update({
        __PC_ID.name() : __PC_ID
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_272 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4322, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayResults uses Python identifier PC_AssayResults
    __PC_AssayResults = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayResults'), 'PC_AssayResults', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_272_httpwww_ncbi_nlm_nih_govPC_AssayResults', True, pyxb.utils.utility.Location('./pubchem.xsd', 4346, 0), )

    
    PC_AssayResults = property(__PC_AssayResults.value, __PC_AssayResults.set, None, None)

    _ElementMap.update({
        __PC_AssayResults.name() : __PC_AssayResults
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_273 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4330, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssaySubmit_revoke_E uses Python identifier PC_AssaySubmit_revoke_E
    __PC_AssaySubmit_revoke_E = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssaySubmit_revoke_E'), 'PC_AssaySubmit_revoke_E', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_273_httpwww_ncbi_nlm_nih_govPC_AssaySubmit_revoke_E', True, pyxb.utils.utility.Location('./pubchem.xsd', 4332, 12), )

    
    PC_AssaySubmit_revoke_E = property(__PC_AssaySubmit_revoke_E.value, __PC_AssaySubmit_revoke_E.set, None, None)

    _ElementMap.update({
        __PC_AssaySubmit_revoke_E.name() : __PC_AssaySubmit_revoke_E
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_274 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4347, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayResults_sid uses Python identifier PC_AssayResults_sid
    __PC_AssayResults_sid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayResults_sid'), 'PC_AssayResults_sid', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_274_httpwww_ncbi_nlm_nih_govPC_AssayResults_sid', False, pyxb.utils.utility.Location('./pubchem.xsd', 4355, 6), )

    
    PC_AssayResults_sid = property(__PC_AssayResults_sid.value, __PC_AssayResults_sid.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayResults_sid-source uses Python identifier PC_AssayResults_sid_source
    __PC_AssayResults_sid_source = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayResults_sid-source'), 'PC_AssayResults_sid_source', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_274_httpwww_ncbi_nlm_nih_govPC_AssayResults_sid_source', False, pyxb.utils.utility.Location('./pubchem.xsd', 4361, 6), )

    
    PC_AssayResults_sid_source = property(__PC_AssayResults_sid_source.value, __PC_AssayResults_sid_source.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayResults_version uses Python identifier PC_AssayResults_version
    __PC_AssayResults_version = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayResults_version'), 'PC_AssayResults_version', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_274_httpwww_ncbi_nlm_nih_govPC_AssayResults_version', False, pyxb.utils.utility.Location('./pubchem.xsd', 4372, 6), )

    
    PC_AssayResults_version = property(__PC_AssayResults_version.value, __PC_AssayResults_version.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayResults_comment uses Python identifier PC_AssayResults_comment
    __PC_AssayResults_comment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayResults_comment'), 'PC_AssayResults_comment', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_274_httpwww_ncbi_nlm_nih_govPC_AssayResults_comment', False, pyxb.utils.utility.Location('./pubchem.xsd', 4377, 6), )

    
    PC_AssayResults_comment = property(__PC_AssayResults_comment.value, __PC_AssayResults_comment.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayResults_outcome uses Python identifier PC_AssayResults_outcome
    __PC_AssayResults_outcome = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayResults_outcome'), 'PC_AssayResults_outcome', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_274_httpwww_ncbi_nlm_nih_govPC_AssayResults_outcome', False, pyxb.utils.utility.Location('./pubchem.xsd', 4378, 6), )

    
    PC_AssayResults_outcome = property(__PC_AssayResults_outcome.value, __PC_AssayResults_outcome.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayResults_rank uses Python identifier PC_AssayResults_rank
    __PC_AssayResults_rank = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayResults_rank'), 'PC_AssayResults_rank', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_274_httpwww_ncbi_nlm_nih_govPC_AssayResults_rank', False, pyxb.utils.utility.Location('./pubchem.xsd', 4408, 6), )

    
    PC_AssayResults_rank = property(__PC_AssayResults_rank.value, __PC_AssayResults_rank.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayResults_data uses Python identifier PC_AssayResults_data
    __PC_AssayResults_data = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayResults_data'), 'PC_AssayResults_data', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_274_httpwww_ncbi_nlm_nih_govPC_AssayResults_data', False, pyxb.utils.utility.Location('./pubchem.xsd', 4410, 6), )

    
    PC_AssayResults_data = property(__PC_AssayResults_data.value, __PC_AssayResults_data.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayResults_url uses Python identifier PC_AssayResults_url
    __PC_AssayResults_url = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayResults_url'), 'PC_AssayResults_url', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_274_httpwww_ncbi_nlm_nih_govPC_AssayResults_url', False, pyxb.utils.utility.Location('./pubchem.xsd', 4418, 6), )

    
    PC_AssayResults_url = property(__PC_AssayResults_url.value, __PC_AssayResults_url.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayResults_xref uses Python identifier PC_AssayResults_xref
    __PC_AssayResults_xref = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayResults_xref'), 'PC_AssayResults_xref', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_274_httpwww_ncbi_nlm_nih_govPC_AssayResults_xref', False, pyxb.utils.utility.Location('./pubchem.xsd', 4425, 6), )

    
    PC_AssayResults_xref = property(__PC_AssayResults_xref.value, __PC_AssayResults_xref.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayResults_date uses Python identifier PC_AssayResults_date
    __PC_AssayResults_date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayResults_date'), 'PC_AssayResults_date', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_274_httpwww_ncbi_nlm_nih_govPC_AssayResults_date', False, pyxb.utils.utility.Location('./pubchem.xsd', 4433, 6), )

    
    PC_AssayResults_date = property(__PC_AssayResults_date.value, __PC_AssayResults_date.set, None, None)

    _ElementMap.update({
        __PC_AssayResults_sid.name() : __PC_AssayResults_sid,
        __PC_AssayResults_sid_source.name() : __PC_AssayResults_sid_source,
        __PC_AssayResults_version.name() : __PC_AssayResults_version,
        __PC_AssayResults_comment.name() : __PC_AssayResults_comment,
        __PC_AssayResults_outcome.name() : __PC_AssayResults_outcome,
        __PC_AssayResults_rank.name() : __PC_AssayResults_rank,
        __PC_AssayResults_data.name() : __PC_AssayResults_data,
        __PC_AssayResults_url.name() : __PC_AssayResults_url,
        __PC_AssayResults_xref.name() : __PC_AssayResults_xref,
        __PC_AssayResults_date.name() : __PC_AssayResults_date
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_275 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4362, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Source uses Python identifier PC_Source
    __PC_Source = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Source'), 'PC_Source', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_275_httpwww_ncbi_nlm_nih_govPC_Source', False, pyxb.utils.utility.Location('./pubchem.xsd', 2479, 0), )

    
    PC_Source = property(__PC_Source.value, __PC_Source.set, None, None)

    _ElementMap.update({
        __PC_Source.name() : __PC_Source
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_276 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4411, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayData uses Python identifier PC_AssayData
    __PC_AssayData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayData'), 'PC_AssayData', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_276_httpwww_ncbi_nlm_nih_govPC_AssayData', True, pyxb.utils.utility.Location('./pubchem.xsd', 4445, 0), )

    
    PC_AssayData = property(__PC_AssayData.value, __PC_AssayData.set, None, None)

    _ElementMap.update({
        __PC_AssayData.name() : __PC_AssayData
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_277 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4426, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AnnotatedXRef uses Python identifier PC_AnnotatedXRef
    __PC_AnnotatedXRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AnnotatedXRef'), 'PC_AnnotatedXRef', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_277_httpwww_ncbi_nlm_nih_govPC_AnnotatedXRef', True, pyxb.utils.utility.Location('./pubchem.xsd', 5006, 0), )

    
    PC_AnnotatedXRef = property(__PC_AnnotatedXRef.value, __PC_AnnotatedXRef.set, None, None)

    _ElementMap.update({
        __PC_AnnotatedXRef.name() : __PC_AnnotatedXRef
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_278 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4434, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Date uses Python identifier Date
    __Date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Date'), 'Date', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_278_httpwww_ncbi_nlm_nih_govDate', False, pyxb.utils.utility.Location('./pubchem.xsd', 89, 0), )

    
    Date = property(__Date.value, __Date.set, None, None)

    _ElementMap.update({
        __Date.name() : __Date
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_279 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4446, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayData_tid uses Python identifier PC_AssayData_tid
    __PC_AssayData_tid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayData_tid'), 'PC_AssayData_tid', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_279_httpwww_ncbi_nlm_nih_govPC_AssayData_tid', False, pyxb.utils.utility.Location('./pubchem.xsd', 4452, 6), )

    
    PC_AssayData_tid = property(__PC_AssayData_tid.value, __PC_AssayData_tid.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayData_value uses Python identifier PC_AssayData_value
    __PC_AssayData_value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayData_value'), 'PC_AssayData_value', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_279_httpwww_ncbi_nlm_nih_govPC_AssayData_value', False, pyxb.utils.utility.Location('./pubchem.xsd', 4453, 6), )

    
    PC_AssayData_value = property(__PC_AssayData_value.value, __PC_AssayData_value.set, None, None)

    _ElementMap.update({
        __PC_AssayData_tid.name() : __PC_AssayData_tid,
        __PC_AssayData_value.name() : __PC_AssayData_value
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_280 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4454, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayData_value_ival uses Python identifier PC_AssayData_value_ival
    __PC_AssayData_value_ival = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayData_value_ival'), 'PC_AssayData_value_ival', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_280_httpwww_ncbi_nlm_nih_govPC_AssayData_value_ival', False, pyxb.utils.utility.Location('./pubchem.xsd', 4456, 12), )

    
    PC_AssayData_value_ival = property(__PC_AssayData_value_ival.value, __PC_AssayData_value_ival.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayData_value_fval uses Python identifier PC_AssayData_value_fval
    __PC_AssayData_value_fval = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayData_value_fval'), 'PC_AssayData_value_fval', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_280_httpwww_ncbi_nlm_nih_govPC_AssayData_value_fval', False, pyxb.utils.utility.Location('./pubchem.xsd', 4457, 12), )

    
    PC_AssayData_value_fval = property(__PC_AssayData_value_fval.value, __PC_AssayData_value_fval.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayData_value_bval uses Python identifier PC_AssayData_value_bval
    __PC_AssayData_value_bval = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayData_value_bval'), 'PC_AssayData_value_bval', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_280_httpwww_ncbi_nlm_nih_govPC_AssayData_value_bval', False, pyxb.utils.utility.Location('./pubchem.xsd', 4458, 12), )

    
    PC_AssayData_value_bval = property(__PC_AssayData_value_bval.value, __PC_AssayData_value_bval.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayData_value_sval uses Python identifier PC_AssayData_value_sval
    __PC_AssayData_value_sval = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayData_value_sval'), 'PC_AssayData_value_sval', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_280_httpwww_ncbi_nlm_nih_govPC_AssayData_value_sval', False, pyxb.utils.utility.Location('./pubchem.xsd', 4470, 12), )

    
    PC_AssayData_value_sval = property(__PC_AssayData_value_sval.value, __PC_AssayData_value_sval.set, None, None)

    _ElementMap.update({
        __PC_AssayData_value_ival.name() : __PC_AssayData_value_ival,
        __PC_AssayData_value_fval.name() : __PC_AssayData_value_fval,
        __PC_AssayData_value_bval.name() : __PC_AssayData_value_bval,
        __PC_AssayData_value_sval.name() : __PC_AssayData_value_sval
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_281 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4486, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayDescription_aid uses Python identifier PC_AssayDescription_aid
    __PC_AssayDescription_aid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_aid'), 'PC_AssayDescription_aid', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_281_httpwww_ncbi_nlm_nih_govPC_AssayDescription_aid', False, pyxb.utils.utility.Location('./pubchem.xsd', 4495, 6), )

    
    PC_AssayDescription_aid = property(__PC_AssayDescription_aid.value, __PC_AssayDescription_aid.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayDescription_aid-source uses Python identifier PC_AssayDescription_aid_source
    __PC_AssayDescription_aid_source = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_aid-source'), 'PC_AssayDescription_aid_source', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_281_httpwww_ncbi_nlm_nih_govPC_AssayDescription_aid_source', False, pyxb.utils.utility.Location('./pubchem.xsd', 4507, 6), )

    
    PC_AssayDescription_aid_source = property(__PC_AssayDescription_aid_source.value, __PC_AssayDescription_aid_source.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayDescription_name uses Python identifier PC_AssayDescription_name
    __PC_AssayDescription_name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_name'), 'PC_AssayDescription_name', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_281_httpwww_ncbi_nlm_nih_govPC_AssayDescription_name', False, pyxb.utils.utility.Location('./pubchem.xsd', 4518, 6), )

    
    PC_AssayDescription_name = property(__PC_AssayDescription_name.value, __PC_AssayDescription_name.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayDescription_description uses Python identifier PC_AssayDescription_description
    __PC_AssayDescription_description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_description'), 'PC_AssayDescription_description', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_281_httpwww_ncbi_nlm_nih_govPC_AssayDescription_description', False, pyxb.utils.utility.Location('./pubchem.xsd', 4520, 6), )

    
    PC_AssayDescription_description = property(__PC_AssayDescription_description.value, __PC_AssayDescription_description.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayDescription_protocol uses Python identifier PC_AssayDescription_protocol
    __PC_AssayDescription_protocol = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_protocol'), 'PC_AssayDescription_protocol', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_281_httpwww_ncbi_nlm_nih_govPC_AssayDescription_protocol', False, pyxb.utils.utility.Location('./pubchem.xsd', 4528, 6), )

    
    PC_AssayDescription_protocol = property(__PC_AssayDescription_protocol.value, __PC_AssayDescription_protocol.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayDescription_comment uses Python identifier PC_AssayDescription_comment
    __PC_AssayDescription_comment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_comment'), 'PC_AssayDescription_comment', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_281_httpwww_ncbi_nlm_nih_govPC_AssayDescription_comment', False, pyxb.utils.utility.Location('./pubchem.xsd', 4536, 6), )

    
    PC_AssayDescription_comment = property(__PC_AssayDescription_comment.value, __PC_AssayDescription_comment.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayDescription_xref uses Python identifier PC_AssayDescription_xref
    __PC_AssayDescription_xref = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_xref'), 'PC_AssayDescription_xref', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_281_httpwww_ncbi_nlm_nih_govPC_AssayDescription_xref', False, pyxb.utils.utility.Location('./pubchem.xsd', 4544, 6), )

    
    PC_AssayDescription_xref = property(__PC_AssayDescription_xref.value, __PC_AssayDescription_xref.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayDescription_results uses Python identifier PC_AssayDescription_results
    __PC_AssayDescription_results = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_results'), 'PC_AssayDescription_results', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_281_httpwww_ncbi_nlm_nih_govPC_AssayDescription_results', False, pyxb.utils.utility.Location('./pubchem.xsd', 4555, 6), )

    
    PC_AssayDescription_results = property(__PC_AssayDescription_results.value, __PC_AssayDescription_results.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayDescription_pub uses Python identifier PC_AssayDescription_pub
    __PC_AssayDescription_pub = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_pub'), 'PC_AssayDescription_pub', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_281_httpwww_ncbi_nlm_nih_govPC_AssayDescription_pub', False, pyxb.utils.utility.Location('./pubchem.xsd', 4566, 6), )

    
    PC_AssayDescription_pub = property(__PC_AssayDescription_pub.value, __PC_AssayDescription_pub.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayDescription_revision uses Python identifier PC_AssayDescription_revision
    __PC_AssayDescription_revision = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_revision'), 'PC_AssayDescription_revision', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_281_httpwww_ncbi_nlm_nih_govPC_AssayDescription_revision', False, pyxb.utils.utility.Location('./pubchem.xsd', 4574, 6), )

    
    PC_AssayDescription_revision = property(__PC_AssayDescription_revision.value, __PC_AssayDescription_revision.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayDescription_target uses Python identifier PC_AssayDescription_target
    __PC_AssayDescription_target = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_target'), 'PC_AssayDescription_target', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_281_httpwww_ncbi_nlm_nih_govPC_AssayDescription_target', False, pyxb.utils.utility.Location('./pubchem.xsd', 4576, 6), )

    
    PC_AssayDescription_target = property(__PC_AssayDescription_target.value, __PC_AssayDescription_target.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayDescription_activity-outcome-method uses Python identifier PC_AssayDescription_activity_outcome_method
    __PC_AssayDescription_activity_outcome_method = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_activity-outcome-method'), 'PC_AssayDescription_activity_outcome_method', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_281_httpwww_ncbi_nlm_nih_govPC_AssayDescription_activity_outcome_method', False, pyxb.utils.utility.Location('./pubchem.xsd', 4583, 6), )

    
    PC_AssayDescription_activity_outcome_method = property(__PC_AssayDescription_activity_outcome_method.value, __PC_AssayDescription_activity_outcome_method.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayDescription_dr uses Python identifier PC_AssayDescription_dr
    __PC_AssayDescription_dr = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_dr'), 'PC_AssayDescription_dr', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_281_httpwww_ncbi_nlm_nih_govPC_AssayDescription_dr', False, pyxb.utils.utility.Location('./pubchem.xsd', 4608, 6), )

    
    PC_AssayDescription_dr = property(__PC_AssayDescription_dr.value, __PC_AssayDescription_dr.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayDescription_substance-type uses Python identifier PC_AssayDescription_substance_type
    __PC_AssayDescription_substance_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_substance-type'), 'PC_AssayDescription_substance_type', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_281_httpwww_ncbi_nlm_nih_govPC_AssayDescription_substance_type', False, pyxb.utils.utility.Location('./pubchem.xsd', 4616, 6), )

    
    PC_AssayDescription_substance_type = property(__PC_AssayDescription_substance_type.value, __PC_AssayDescription_substance_type.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayDescription_grant-number uses Python identifier PC_AssayDescription_grant_number
    __PC_AssayDescription_grant_number = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_grant-number'), 'PC_AssayDescription_grant_number', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_281_httpwww_ncbi_nlm_nih_govPC_AssayDescription_grant_number', False, pyxb.utils.utility.Location('./pubchem.xsd', 4638, 6), )

    
    PC_AssayDescription_grant_number = property(__PC_AssayDescription_grant_number.value, __PC_AssayDescription_grant_number.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayDescription_project-category uses Python identifier PC_AssayDescription_project_category
    __PC_AssayDescription_project_category = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_project-category'), 'PC_AssayDescription_project_category', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_281_httpwww_ncbi_nlm_nih_govPC_AssayDescription_project_category', False, pyxb.utils.utility.Location('./pubchem.xsd', 4658, 6), )

    
    PC_AssayDescription_project_category = property(__PC_AssayDescription_project_category.value, __PC_AssayDescription_project_category.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayDescription_is-panel uses Python identifier PC_AssayDescription_is_panel
    __PC_AssayDescription_is_panel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_is-panel'), 'PC_AssayDescription_is_panel', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_281_httpwww_ncbi_nlm_nih_govPC_AssayDescription_is_panel', False, pyxb.utils.utility.Location('./pubchem.xsd', 4698, 6), )

    
    PC_AssayDescription_is_panel = property(__PC_AssayDescription_is_panel.value, __PC_AssayDescription_is_panel.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayDescription_assay-group uses Python identifier PC_AssayDescription_assay_group
    __PC_AssayDescription_assay_group = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_assay-group'), 'PC_AssayDescription_assay_group', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_281_httpwww_ncbi_nlm_nih_govPC_AssayDescription_assay_group', False, pyxb.utils.utility.Location('./pubchem.xsd', 4722, 6), )

    
    PC_AssayDescription_assay_group = property(__PC_AssayDescription_assay_group.value, __PC_AssayDescription_assay_group.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayDescription_panel-info uses Python identifier PC_AssayDescription_panel_info
    __PC_AssayDescription_panel_info = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_panel-info'), 'PC_AssayDescription_panel_info', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_281_httpwww_ncbi_nlm_nih_govPC_AssayDescription_panel_info', False, pyxb.utils.utility.Location('./pubchem.xsd', 4733, 6), )

    
    PC_AssayDescription_panel_info = property(__PC_AssayDescription_panel_info.value, __PC_AssayDescription_panel_info.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayDescription_is-mlp-late-stage uses Python identifier PC_AssayDescription_is_mlp_late_stage
    __PC_AssayDescription_is_mlp_late_stage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_is-mlp-late-stage'), 'PC_AssayDescription_is_mlp_late_stage', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_281_httpwww_ncbi_nlm_nih_govPC_AssayDescription_is_mlp_late_stage', False, pyxb.utils.utility.Location('./pubchem.xsd', 4741, 6), )

    
    PC_AssayDescription_is_mlp_late_stage = property(__PC_AssayDescription_is_mlp_late_stage.value, __PC_AssayDescription_is_mlp_late_stage.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayDescription_categorized-comment uses Python identifier PC_AssayDescription_categorized_comment
    __PC_AssayDescription_categorized_comment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_categorized-comment'), 'PC_AssayDescription_categorized_comment', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_281_httpwww_ncbi_nlm_nih_govPC_AssayDescription_categorized_comment', False, pyxb.utils.utility.Location('./pubchem.xsd', 4754, 6), )

    
    PC_AssayDescription_categorized_comment = property(__PC_AssayDescription_categorized_comment.value, __PC_AssayDescription_categorized_comment.set, None, None)

    _ElementMap.update({
        __PC_AssayDescription_aid.name() : __PC_AssayDescription_aid,
        __PC_AssayDescription_aid_source.name() : __PC_AssayDescription_aid_source,
        __PC_AssayDescription_name.name() : __PC_AssayDescription_name,
        __PC_AssayDescription_description.name() : __PC_AssayDescription_description,
        __PC_AssayDescription_protocol.name() : __PC_AssayDescription_protocol,
        __PC_AssayDescription_comment.name() : __PC_AssayDescription_comment,
        __PC_AssayDescription_xref.name() : __PC_AssayDescription_xref,
        __PC_AssayDescription_results.name() : __PC_AssayDescription_results,
        __PC_AssayDescription_pub.name() : __PC_AssayDescription_pub,
        __PC_AssayDescription_revision.name() : __PC_AssayDescription_revision,
        __PC_AssayDescription_target.name() : __PC_AssayDescription_target,
        __PC_AssayDescription_activity_outcome_method.name() : __PC_AssayDescription_activity_outcome_method,
        __PC_AssayDescription_dr.name() : __PC_AssayDescription_dr,
        __PC_AssayDescription_substance_type.name() : __PC_AssayDescription_substance_type,
        __PC_AssayDescription_grant_number.name() : __PC_AssayDescription_grant_number,
        __PC_AssayDescription_project_category.name() : __PC_AssayDescription_project_category,
        __PC_AssayDescription_is_panel.name() : __PC_AssayDescription_is_panel,
        __PC_AssayDescription_assay_group.name() : __PC_AssayDescription_assay_group,
        __PC_AssayDescription_panel_info.name() : __PC_AssayDescription_panel_info,
        __PC_AssayDescription_is_mlp_late_stage.name() : __PC_AssayDescription_is_mlp_late_stage,
        __PC_AssayDescription_categorized_comment.name() : __PC_AssayDescription_categorized_comment
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_282 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4496, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-ID uses Python identifier PC_ID
    __PC_ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-ID'), 'PC_ID', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_282_httpwww_ncbi_nlm_nih_govPC_ID', False, pyxb.utils.utility.Location('./pubchem.xsd', 2461, 0), )

    
    PC_ID = property(__PC_ID.value, __PC_ID.set, None, None)

    _ElementMap.update({
        __PC_ID.name() : __PC_ID
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_283 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4508, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-Source uses Python identifier PC_Source
    __PC_Source = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-Source'), 'PC_Source', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_283_httpwww_ncbi_nlm_nih_govPC_Source', False, pyxb.utils.utility.Location('./pubchem.xsd', 2479, 0), )

    
    PC_Source = property(__PC_Source.value, __PC_Source.set, None, None)

    _ElementMap.update({
        __PC_Source.name() : __PC_Source
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_284 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4521, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayDescription_description_E uses Python identifier PC_AssayDescription_description_E
    __PC_AssayDescription_description_E = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_description_E'), 'PC_AssayDescription_description_E', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_284_httpwww_ncbi_nlm_nih_govPC_AssayDescription_description_E', True, pyxb.utils.utility.Location('./pubchem.xsd', 4523, 12), )

    
    PC_AssayDescription_description_E = property(__PC_AssayDescription_description_E.value, __PC_AssayDescription_description_E.set, None, None)

    _ElementMap.update({
        __PC_AssayDescription_description_E.name() : __PC_AssayDescription_description_E
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_285 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4529, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayDescription_protocol_E uses Python identifier PC_AssayDescription_protocol_E
    __PC_AssayDescription_protocol_E = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_protocol_E'), 'PC_AssayDescription_protocol_E', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_285_httpwww_ncbi_nlm_nih_govPC_AssayDescription_protocol_E', True, pyxb.utils.utility.Location('./pubchem.xsd', 4531, 12), )

    
    PC_AssayDescription_protocol_E = property(__PC_AssayDescription_protocol_E.value, __PC_AssayDescription_protocol_E.set, None, None)

    _ElementMap.update({
        __PC_AssayDescription_protocol_E.name() : __PC_AssayDescription_protocol_E
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_286 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4537, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayDescription_comment_E uses Python identifier PC_AssayDescription_comment_E
    __PC_AssayDescription_comment_E = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_comment_E'), 'PC_AssayDescription_comment_E', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_286_httpwww_ncbi_nlm_nih_govPC_AssayDescription_comment_E', True, pyxb.utils.utility.Location('./pubchem.xsd', 4539, 12), )

    
    PC_AssayDescription_comment_E = property(__PC_AssayDescription_comment_E.value, __PC_AssayDescription_comment_E.set, None, None)

    _ElementMap.update({
        __PC_AssayDescription_comment_E.name() : __PC_AssayDescription_comment_E
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_287 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4545, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AnnotatedXRef uses Python identifier PC_AnnotatedXRef
    __PC_AnnotatedXRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AnnotatedXRef'), 'PC_AnnotatedXRef', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_287_httpwww_ncbi_nlm_nih_govPC_AnnotatedXRef', True, pyxb.utils.utility.Location('./pubchem.xsd', 5006, 0), )

    
    PC_AnnotatedXRef = property(__PC_AnnotatedXRef.value, __PC_AnnotatedXRef.set, None, None)

    _ElementMap.update({
        __PC_AnnotatedXRef.name() : __PC_AnnotatedXRef
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_288 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4556, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-ResultType uses Python identifier PC_ResultType
    __PC_ResultType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType'), 'PC_ResultType', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_288_httpwww_ncbi_nlm_nih_govPC_ResultType', True, pyxb.utils.utility.Location('./pubchem.xsd', 5044, 0), )

    
    PC_ResultType = property(__PC_ResultType.value, __PC_ResultType.set, None, None)

    _ElementMap.update({
        __PC_ResultType.name() : __PC_ResultType
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_289 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4567, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}Pub uses Python identifier Pub
    __Pub = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Pub'), 'Pub', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_289_httpwww_ncbi_nlm_nih_govPub', True, pyxb.utils.utility.Location('./pubchem.xsd', 1701, 0), )

    
    Pub = property(__Pub.value, __Pub.set, None, None)

    _ElementMap.update({
        __Pub.name() : __Pub
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_290 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4577, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayTargetInfo uses Python identifier PC_AssayTargetInfo
    __PC_AssayTargetInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayTargetInfo'), 'PC_AssayTargetInfo', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_290_httpwww_ncbi_nlm_nih_govPC_AssayTargetInfo', True, pyxb.utils.utility.Location('./pubchem.xsd', 4949, 0), )

    
    PC_AssayTargetInfo = property(__PC_AssayTargetInfo.value, __PC_AssayTargetInfo.set, None, None)

    _ElementMap.update({
        __PC_AssayTargetInfo.name() : __PC_AssayTargetInfo
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_291 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4609, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayDRAttr uses Python identifier PC_AssayDRAttr
    __PC_AssayDRAttr = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDRAttr'), 'PC_AssayDRAttr', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_291_httpwww_ncbi_nlm_nih_govPC_AssayDRAttr', True, pyxb.utils.utility.Location('./pubchem.xsd', 4907, 0), )

    
    PC_AssayDRAttr = property(__PC_AssayDRAttr.value, __PC_AssayDRAttr.set, None, None)

    _ElementMap.update({
        __PC_AssayDRAttr.name() : __PC_AssayDRAttr
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_292 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4639, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayDescription_grant-number_E uses Python identifier PC_AssayDescription_grant_number_E
    __PC_AssayDescription_grant_number_E = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_grant-number_E'), 'PC_AssayDescription_grant_number_E', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_292_httpwww_ncbi_nlm_nih_govPC_AssayDescription_grant_number_E', True, pyxb.utils.utility.Location('./pubchem.xsd', 4641, 12), )

    
    PC_AssayDescription_grant_number_E = property(__PC_AssayDescription_grant_number_E.value, __PC_AssayDescription_grant_number_E.set, None, None)

    _ElementMap.update({
        __PC_AssayDescription_grant_number_E.name() : __PC_AssayDescription_grant_number_E
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_293 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4723, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayDescription_assay-group_E uses Python identifier PC_AssayDescription_assay_group_E
    __PC_AssayDescription_assay_group_E = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_assay-group_E'), 'PC_AssayDescription_assay_group_E', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_293_httpwww_ncbi_nlm_nih_govPC_AssayDescription_assay_group_E', True, pyxb.utils.utility.Location('./pubchem.xsd', 4725, 12), )

    
    PC_AssayDescription_assay_group_E = property(__PC_AssayDescription_assay_group_E.value, __PC_AssayDescription_assay_group_E.set, None, None)

    _ElementMap.update({
        __PC_AssayDescription_assay_group_E.name() : __PC_AssayDescription_assay_group_E
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_294 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4734, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayPanel uses Python identifier PC_AssayPanel
    __PC_AssayPanel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanel'), 'PC_AssayPanel', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_294_httpwww_ncbi_nlm_nih_govPC_AssayPanel', False, pyxb.utils.utility.Location('./pubchem.xsd', 4769, 0), )

    
    PC_AssayPanel = property(__PC_AssayPanel.value, __PC_AssayPanel.set, None, None)

    _ElementMap.update({
        __PC_AssayPanel.name() : __PC_AssayPanel
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_295 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4755, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-CategorizedComment uses Python identifier PC_CategorizedComment
    __PC_CategorizedComment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-CategorizedComment'), 'PC_CategorizedComment', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_295_httpwww_ncbi_nlm_nih_govPC_CategorizedComment', True, pyxb.utils.utility.Location('./pubchem.xsd', 4886, 0), )

    
    PC_CategorizedComment = property(__PC_CategorizedComment.value, __PC_CategorizedComment.set, None, None)

    _ElementMap.update({
        __PC_CategorizedComment.name() : __PC_CategorizedComment
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_296 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4770, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayPanel_name uses Python identifier PC_AssayPanel_name
    __PC_AssayPanel_name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanel_name'), 'PC_AssayPanel_name', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_296_httpwww_ncbi_nlm_nih_govPC_AssayPanel_name', False, pyxb.utils.utility.Location('./pubchem.xsd', 4773, 6), )

    
    PC_AssayPanel_name = property(__PC_AssayPanel_name.value, __PC_AssayPanel_name.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayPanel_descr uses Python identifier PC_AssayPanel_descr
    __PC_AssayPanel_descr = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanel_descr'), 'PC_AssayPanel_descr', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_296_httpwww_ncbi_nlm_nih_govPC_AssayPanel_descr', False, pyxb.utils.utility.Location('./pubchem.xsd', 4775, 6), )

    
    PC_AssayPanel_descr = property(__PC_AssayPanel_descr.value, __PC_AssayPanel_descr.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayPanel_member uses Python identifier PC_AssayPanel_member
    __PC_AssayPanel_member = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanel_member'), 'PC_AssayPanel_member', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_296_httpwww_ncbi_nlm_nih_govPC_AssayPanel_member', False, pyxb.utils.utility.Location('./pubchem.xsd', 4777, 6), )

    
    PC_AssayPanel_member = property(__PC_AssayPanel_member.value, __PC_AssayPanel_member.set, None, None)

    _ElementMap.update({
        __PC_AssayPanel_name.name() : __PC_AssayPanel_name,
        __PC_AssayPanel_descr.name() : __PC_AssayPanel_descr,
        __PC_AssayPanel_member.name() : __PC_AssayPanel_member
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_297 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4778, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayPanelMember uses Python identifier PC_AssayPanelMember
    __PC_AssayPanelMember = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanelMember'), 'PC_AssayPanelMember', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_297_httpwww_ncbi_nlm_nih_govPC_AssayPanelMember', True, pyxb.utils.utility.Location('./pubchem.xsd', 4789, 0), )

    
    PC_AssayPanelMember = property(__PC_AssayPanelMember.value, __PC_AssayPanelMember.set, None, None)

    _ElementMap.update({
        __PC_AssayPanelMember.name() : __PC_AssayPanelMember
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_298 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4790, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayPanelMember_mid uses Python identifier PC_AssayPanelMember_mid
    __PC_AssayPanelMember_mid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanelMember_mid'), 'PC_AssayPanelMember_mid', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_298_httpwww_ncbi_nlm_nih_govPC_AssayPanelMember_mid', False, pyxb.utils.utility.Location('./pubchem.xsd', 4797, 6), )

    
    PC_AssayPanelMember_mid = property(__PC_AssayPanelMember_mid.value, __PC_AssayPanelMember_mid.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayPanelMember_name uses Python identifier PC_AssayPanelMember_name
    __PC_AssayPanelMember_name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanelMember_name'), 'PC_AssayPanelMember_name', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_298_httpwww_ncbi_nlm_nih_govPC_AssayPanelMember_name', False, pyxb.utils.utility.Location('./pubchem.xsd', 4799, 6), )

    
    PC_AssayPanelMember_name = property(__PC_AssayPanelMember_name.value, __PC_AssayPanelMember_name.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayPanelMember_description uses Python identifier PC_AssayPanelMember_description
    __PC_AssayPanelMember_description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanelMember_description'), 'PC_AssayPanelMember_description', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_298_httpwww_ncbi_nlm_nih_govPC_AssayPanelMember_description', False, pyxb.utils.utility.Location('./pubchem.xsd', 4804, 6), )

    
    PC_AssayPanelMember_description = property(__PC_AssayPanelMember_description.value, __PC_AssayPanelMember_description.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayPanelMember_protocol uses Python identifier PC_AssayPanelMember_protocol
    __PC_AssayPanelMember_protocol = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanelMember_protocol'), 'PC_AssayPanelMember_protocol', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_298_httpwww_ncbi_nlm_nih_govPC_AssayPanelMember_protocol', False, pyxb.utils.utility.Location('./pubchem.xsd', 4806, 6), )

    
    PC_AssayPanelMember_protocol = property(__PC_AssayPanelMember_protocol.value, __PC_AssayPanelMember_protocol.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayPanelMember_comment uses Python identifier PC_AssayPanelMember_comment
    __PC_AssayPanelMember_comment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanelMember_comment'), 'PC_AssayPanelMember_comment', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_298_httpwww_ncbi_nlm_nih_govPC_AssayPanelMember_comment', False, pyxb.utils.utility.Location('./pubchem.xsd', 4814, 6), )

    
    PC_AssayPanelMember_comment = property(__PC_AssayPanelMember_comment.value, __PC_AssayPanelMember_comment.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayPanelMember_target uses Python identifier PC_AssayPanelMember_target
    __PC_AssayPanelMember_target = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanelMember_target'), 'PC_AssayPanelMember_target', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_298_httpwww_ncbi_nlm_nih_govPC_AssayPanelMember_target', False, pyxb.utils.utility.Location('./pubchem.xsd', 4822, 6), )

    
    PC_AssayPanelMember_target = property(__PC_AssayPanelMember_target.value, __PC_AssayPanelMember_target.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayPanelMember_xref uses Python identifier PC_AssayPanelMember_xref
    __PC_AssayPanelMember_xref = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanelMember_xref'), 'PC_AssayPanelMember_xref', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_298_httpwww_ncbi_nlm_nih_govPC_AssayPanelMember_xref', False, pyxb.utils.utility.Location('./pubchem.xsd', 4830, 6), )

    
    PC_AssayPanelMember_xref = property(__PC_AssayPanelMember_xref.value, __PC_AssayPanelMember_xref.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayPanelMember_activity-outcome-method uses Python identifier PC_AssayPanelMember_activity_outcome_method
    __PC_AssayPanelMember_activity_outcome_method = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanelMember_activity-outcome-method'), 'PC_AssayPanelMember_activity_outcome_method', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_298_httpwww_ncbi_nlm_nih_govPC_AssayPanelMember_activity_outcome_method', False, pyxb.utils.utility.Location('./pubchem.xsd', 4837, 6), )

    
    PC_AssayPanelMember_activity_outcome_method = property(__PC_AssayPanelMember_activity_outcome_method.value, __PC_AssayPanelMember_activity_outcome_method.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayPanelMember_dr uses Python identifier PC_AssayPanelMember_dr
    __PC_AssayPanelMember_dr = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanelMember_dr'), 'PC_AssayPanelMember_dr', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_298_httpwww_ncbi_nlm_nih_govPC_AssayPanelMember_dr', False, pyxb.utils.utility.Location('./pubchem.xsd', 4862, 6), )

    
    PC_AssayPanelMember_dr = property(__PC_AssayPanelMember_dr.value, __PC_AssayPanelMember_dr.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayPanelMember_categorized-comment uses Python identifier PC_AssayPanelMember_categorized_comment
    __PC_AssayPanelMember_categorized_comment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanelMember_categorized-comment'), 'PC_AssayPanelMember_categorized_comment', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_298_httpwww_ncbi_nlm_nih_govPC_AssayPanelMember_categorized_comment', False, pyxb.utils.utility.Location('./pubchem.xsd', 4870, 6), )

    
    PC_AssayPanelMember_categorized_comment = property(__PC_AssayPanelMember_categorized_comment.value, __PC_AssayPanelMember_categorized_comment.set, None, None)

    _ElementMap.update({
        __PC_AssayPanelMember_mid.name() : __PC_AssayPanelMember_mid,
        __PC_AssayPanelMember_name.name() : __PC_AssayPanelMember_name,
        __PC_AssayPanelMember_description.name() : __PC_AssayPanelMember_description,
        __PC_AssayPanelMember_protocol.name() : __PC_AssayPanelMember_protocol,
        __PC_AssayPanelMember_comment.name() : __PC_AssayPanelMember_comment,
        __PC_AssayPanelMember_target.name() : __PC_AssayPanelMember_target,
        __PC_AssayPanelMember_xref.name() : __PC_AssayPanelMember_xref,
        __PC_AssayPanelMember_activity_outcome_method.name() : __PC_AssayPanelMember_activity_outcome_method,
        __PC_AssayPanelMember_dr.name() : __PC_AssayPanelMember_dr,
        __PC_AssayPanelMember_categorized_comment.name() : __PC_AssayPanelMember_categorized_comment
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_299 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4807, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayPanelMember_protocol_E uses Python identifier PC_AssayPanelMember_protocol_E
    __PC_AssayPanelMember_protocol_E = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanelMember_protocol_E'), 'PC_AssayPanelMember_protocol_E', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_299_httpwww_ncbi_nlm_nih_govPC_AssayPanelMember_protocol_E', True, pyxb.utils.utility.Location('./pubchem.xsd', 4809, 12), )

    
    PC_AssayPanelMember_protocol_E = property(__PC_AssayPanelMember_protocol_E.value, __PC_AssayPanelMember_protocol_E.set, None, None)

    _ElementMap.update({
        __PC_AssayPanelMember_protocol_E.name() : __PC_AssayPanelMember_protocol_E
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_300 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4815, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayPanelMember_comment_E uses Python identifier PC_AssayPanelMember_comment_E
    __PC_AssayPanelMember_comment_E = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanelMember_comment_E'), 'PC_AssayPanelMember_comment_E', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_300_httpwww_ncbi_nlm_nih_govPC_AssayPanelMember_comment_E', True, pyxb.utils.utility.Location('./pubchem.xsd', 4817, 12), )

    
    PC_AssayPanelMember_comment_E = property(__PC_AssayPanelMember_comment_E.value, __PC_AssayPanelMember_comment_E.set, None, None)

    _ElementMap.update({
        __PC_AssayPanelMember_comment_E.name() : __PC_AssayPanelMember_comment_E
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_301 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4823, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayTargetInfo uses Python identifier PC_AssayTargetInfo
    __PC_AssayTargetInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayTargetInfo'), 'PC_AssayTargetInfo', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_301_httpwww_ncbi_nlm_nih_govPC_AssayTargetInfo', True, pyxb.utils.utility.Location('./pubchem.xsd', 4949, 0), )

    
    PC_AssayTargetInfo = property(__PC_AssayTargetInfo.value, __PC_AssayTargetInfo.set, None, None)

    _ElementMap.update({
        __PC_AssayTargetInfo.name() : __PC_AssayTargetInfo
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_302 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4831, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AnnotatedXRef uses Python identifier PC_AnnotatedXRef
    __PC_AnnotatedXRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AnnotatedXRef'), 'PC_AnnotatedXRef', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_302_httpwww_ncbi_nlm_nih_govPC_AnnotatedXRef', True, pyxb.utils.utility.Location('./pubchem.xsd', 5006, 0), )

    
    PC_AnnotatedXRef = property(__PC_AnnotatedXRef.value, __PC_AnnotatedXRef.set, None, None)

    _ElementMap.update({
        __PC_AnnotatedXRef.name() : __PC_AnnotatedXRef
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_303 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4863, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayDRAttr uses Python identifier PC_AssayDRAttr
    __PC_AssayDRAttr = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDRAttr'), 'PC_AssayDRAttr', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_303_httpwww_ncbi_nlm_nih_govPC_AssayDRAttr', True, pyxb.utils.utility.Location('./pubchem.xsd', 4907, 0), )

    
    PC_AssayDRAttr = property(__PC_AssayDRAttr.value, __PC_AssayDRAttr.set, None, None)

    _ElementMap.update({
        __PC_AssayDRAttr.name() : __PC_AssayDRAttr
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_304 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4871, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-CategorizedComment uses Python identifier PC_CategorizedComment
    __PC_CategorizedComment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-CategorizedComment'), 'PC_CategorizedComment', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_304_httpwww_ncbi_nlm_nih_govPC_CategorizedComment', True, pyxb.utils.utility.Location('./pubchem.xsd', 4886, 0), )

    
    PC_CategorizedComment = property(__PC_CategorizedComment.value, __PC_CategorizedComment.set, None, None)

    _ElementMap.update({
        __PC_CategorizedComment.name() : __PC_CategorizedComment
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_305 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4887, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-CategorizedComment_title uses Python identifier PC_CategorizedComment_title
    __PC_CategorizedComment_title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-CategorizedComment_title'), 'PC_CategorizedComment_title', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_305_httpwww_ncbi_nlm_nih_govPC_CategorizedComment_title', False, pyxb.utils.utility.Location('./pubchem.xsd', 4890, 6), )

    
    PC_CategorizedComment_title = property(__PC_CategorizedComment_title.value, __PC_CategorizedComment_title.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-CategorizedComment_comment uses Python identifier PC_CategorizedComment_comment
    __PC_CategorizedComment_comment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-CategorizedComment_comment'), 'PC_CategorizedComment_comment', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_305_httpwww_ncbi_nlm_nih_govPC_CategorizedComment_comment', False, pyxb.utils.utility.Location('./pubchem.xsd', 4892, 6), )

    
    PC_CategorizedComment_comment = property(__PC_CategorizedComment_comment.value, __PC_CategorizedComment_comment.set, None, None)

    _ElementMap.update({
        __PC_CategorizedComment_title.name() : __PC_CategorizedComment_title,
        __PC_CategorizedComment_comment.name() : __PC_CategorizedComment_comment
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_306 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4893, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-CategorizedComment_comment_E uses Python identifier PC_CategorizedComment_comment_E
    __PC_CategorizedComment_comment_E = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-CategorizedComment_comment_E'), 'PC_CategorizedComment_comment_E', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_306_httpwww_ncbi_nlm_nih_govPC_CategorizedComment_comment_E', True, pyxb.utils.utility.Location('./pubchem.xsd', 4895, 12), )

    
    PC_CategorizedComment_comment_E = property(__PC_CategorizedComment_comment_E.value, __PC_CategorizedComment_comment_E.set, None, None)

    _ElementMap.update({
        __PC_CategorizedComment_comment_E.name() : __PC_CategorizedComment_comment_E
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_307 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4908, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayDRAttr_id uses Python identifier PC_AssayDRAttr_id
    __PC_AssayDRAttr_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDRAttr_id'), 'PC_AssayDRAttr_id', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_307_httpwww_ncbi_nlm_nih_govPC_AssayDRAttr_id', False, pyxb.utils.utility.Location('./pubchem.xsd', 4914, 6), )

    
    PC_AssayDRAttr_id = property(__PC_AssayDRAttr_id.value, __PC_AssayDRAttr_id.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayDRAttr_descr uses Python identifier PC_AssayDRAttr_descr
    __PC_AssayDRAttr_descr = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDRAttr_descr'), 'PC_AssayDRAttr_descr', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_307_httpwww_ncbi_nlm_nih_govPC_AssayDRAttr_descr', False, pyxb.utils.utility.Location('./pubchem.xsd', 4916, 6), )

    
    PC_AssayDRAttr_descr = property(__PC_AssayDRAttr_descr.value, __PC_AssayDRAttr_descr.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayDRAttr_dn uses Python identifier PC_AssayDRAttr_dn
    __PC_AssayDRAttr_dn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDRAttr_dn'), 'PC_AssayDRAttr_dn', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_307_httpwww_ncbi_nlm_nih_govPC_AssayDRAttr_dn', False, pyxb.utils.utility.Location('./pubchem.xsd', 4918, 6), )

    
    PC_AssayDRAttr_dn = property(__PC_AssayDRAttr_dn.value, __PC_AssayDRAttr_dn.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayDRAttr_rn uses Python identifier PC_AssayDRAttr_rn
    __PC_AssayDRAttr_rn = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDRAttr_rn'), 'PC_AssayDRAttr_rn', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_307_httpwww_ncbi_nlm_nih_govPC_AssayDRAttr_rn', False, pyxb.utils.utility.Location('./pubchem.xsd', 4920, 6), )

    
    PC_AssayDRAttr_rn = property(__PC_AssayDRAttr_rn.value, __PC_AssayDRAttr_rn.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayDRAttr_type uses Python identifier PC_AssayDRAttr_type
    __PC_AssayDRAttr_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDRAttr_type'), 'PC_AssayDRAttr_type', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_307_httpwww_ncbi_nlm_nih_govPC_AssayDRAttr_type', False, pyxb.utils.utility.Location('./pubchem.xsd', 4921, 6), )

    
    PC_AssayDRAttr_type = property(__PC_AssayDRAttr_type.value, __PC_AssayDRAttr_type.set, None, None)

    _ElementMap.update({
        __PC_AssayDRAttr_id.name() : __PC_AssayDRAttr_id,
        __PC_AssayDRAttr_descr.name() : __PC_AssayDRAttr_descr,
        __PC_AssayDRAttr_dn.name() : __PC_AssayDRAttr_dn,
        __PC_AssayDRAttr_rn.name() : __PC_AssayDRAttr_rn,
        __PC_AssayDRAttr_type.name() : __PC_AssayDRAttr_type
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_308 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4950, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayTargetInfo_name uses Python identifier PC_AssayTargetInfo_name
    __PC_AssayTargetInfo_name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayTargetInfo_name'), 'PC_AssayTargetInfo_name', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_308_httpwww_ncbi_nlm_nih_govPC_AssayTargetInfo_name', False, pyxb.utils.utility.Location('./pubchem.xsd', 4953, 6), )

    
    PC_AssayTargetInfo_name = property(__PC_AssayTargetInfo_name.value, __PC_AssayTargetInfo_name.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayTargetInfo_mol-id uses Python identifier PC_AssayTargetInfo_mol_id
    __PC_AssayTargetInfo_mol_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayTargetInfo_mol-id'), 'PC_AssayTargetInfo_mol_id', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_308_httpwww_ncbi_nlm_nih_govPC_AssayTargetInfo_mol_id', False, pyxb.utils.utility.Location('./pubchem.xsd', 4955, 6), )

    
    PC_AssayTargetInfo_mol_id = property(__PC_AssayTargetInfo_mol_id.value, __PC_AssayTargetInfo_mol_id.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayTargetInfo_molecule-type uses Python identifier PC_AssayTargetInfo_molecule_type
    __PC_AssayTargetInfo_molecule_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayTargetInfo_molecule-type'), 'PC_AssayTargetInfo_molecule_type', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_308_httpwww_ncbi_nlm_nih_govPC_AssayTargetInfo_molecule_type', False, pyxb.utils.utility.Location('./pubchem.xsd', 4956, 6), )

    
    PC_AssayTargetInfo_molecule_type = property(__PC_AssayTargetInfo_molecule_type.value, __PC_AssayTargetInfo_molecule_type.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayTargetInfo_organism uses Python identifier PC_AssayTargetInfo_organism
    __PC_AssayTargetInfo_organism = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayTargetInfo_organism'), 'PC_AssayTargetInfo_organism', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_308_httpwww_ncbi_nlm_nih_govPC_AssayTargetInfo_organism', False, pyxb.utils.utility.Location('./pubchem.xsd', 4984, 6), )

    
    PC_AssayTargetInfo_organism = property(__PC_AssayTargetInfo_organism.value, __PC_AssayTargetInfo_organism.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayTargetInfo_descr uses Python identifier PC_AssayTargetInfo_descr
    __PC_AssayTargetInfo_descr = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayTargetInfo_descr'), 'PC_AssayTargetInfo_descr', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_308_httpwww_ncbi_nlm_nih_govPC_AssayTargetInfo_descr', False, pyxb.utils.utility.Location('./pubchem.xsd', 4992, 6), )

    
    PC_AssayTargetInfo_descr = property(__PC_AssayTargetInfo_descr.value, __PC_AssayTargetInfo_descr.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayTargetInfo_comment uses Python identifier PC_AssayTargetInfo_comment
    __PC_AssayTargetInfo_comment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayTargetInfo_comment'), 'PC_AssayTargetInfo_comment', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_308_httpwww_ncbi_nlm_nih_govPC_AssayTargetInfo_comment', False, pyxb.utils.utility.Location('./pubchem.xsd', 4994, 6), )

    
    PC_AssayTargetInfo_comment = property(__PC_AssayTargetInfo_comment.value, __PC_AssayTargetInfo_comment.set, None, None)

    _ElementMap.update({
        __PC_AssayTargetInfo_name.name() : __PC_AssayTargetInfo_name,
        __PC_AssayTargetInfo_mol_id.name() : __PC_AssayTargetInfo_mol_id,
        __PC_AssayTargetInfo_molecule_type.name() : __PC_AssayTargetInfo_molecule_type,
        __PC_AssayTargetInfo_organism.name() : __PC_AssayTargetInfo_organism,
        __PC_AssayTargetInfo_descr.name() : __PC_AssayTargetInfo_descr,
        __PC_AssayTargetInfo_comment.name() : __PC_AssayTargetInfo_comment
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_309 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4985, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}BioSource uses Python identifier BioSource
    __BioSource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BioSource'), 'BioSource', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_309_httpwww_ncbi_nlm_nih_govBioSource', False, pyxb.utils.utility.Location('./pubchem.xsd', 2161, 0), )

    
    BioSource = property(__BioSource.value, __BioSource.set, None, None)

    _ElementMap.update({
        __BioSource.name() : __BioSource
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_310 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4995, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayTargetInfo_comment_E uses Python identifier PC_AssayTargetInfo_comment_E
    __PC_AssayTargetInfo_comment_E = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayTargetInfo_comment_E'), 'PC_AssayTargetInfo_comment_E', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_310_httpwww_ncbi_nlm_nih_govPC_AssayTargetInfo_comment_E', True, pyxb.utils.utility.Location('./pubchem.xsd', 4997, 12), )

    
    PC_AssayTargetInfo_comment_E = property(__PC_AssayTargetInfo_comment_E.value, __PC_AssayTargetInfo_comment_E.set, None, None)

    _ElementMap.update({
        __PC_AssayTargetInfo_comment_E.name() : __PC_AssayTargetInfo_comment_E
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_311 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 5007, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AnnotatedXRef_xref uses Python identifier PC_AnnotatedXRef_xref
    __PC_AnnotatedXRef_xref = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AnnotatedXRef_xref'), 'PC_AnnotatedXRef_xref', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_311_httpwww_ncbi_nlm_nih_govPC_AnnotatedXRef_xref', False, pyxb.utils.utility.Location('./pubchem.xsd', 5010, 6), )

    
    PC_AnnotatedXRef_xref = property(__PC_AnnotatedXRef_xref.value, __PC_AnnotatedXRef_xref.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AnnotatedXRef_comment uses Python identifier PC_AnnotatedXRef_comment
    __PC_AnnotatedXRef_comment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AnnotatedXRef_comment'), 'PC_AnnotatedXRef_comment', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_311_httpwww_ncbi_nlm_nih_govPC_AnnotatedXRef_comment', False, pyxb.utils.utility.Location('./pubchem.xsd', 5018, 6), )

    
    PC_AnnotatedXRef_comment = property(__PC_AnnotatedXRef_comment.value, __PC_AnnotatedXRef_comment.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AnnotatedXRef_type uses Python identifier PC_AnnotatedXRef_type
    __PC_AnnotatedXRef_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AnnotatedXRef_type'), 'PC_AnnotatedXRef_type', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_311_httpwww_ncbi_nlm_nih_govPC_AnnotatedXRef_type', False, pyxb.utils.utility.Location('./pubchem.xsd', 5019, 6), )

    
    PC_AnnotatedXRef_type = property(__PC_AnnotatedXRef_type.value, __PC_AnnotatedXRef_type.set, None, None)

    _ElementMap.update({
        __PC_AnnotatedXRef_xref.name() : __PC_AnnotatedXRef_xref,
        __PC_AnnotatedXRef_comment.name() : __PC_AnnotatedXRef_comment,
        __PC_AnnotatedXRef_type.name() : __PC_AnnotatedXRef_type
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_312 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 5011, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-XRefData uses Python identifier PC_XRefData
    __PC_XRefData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData'), 'PC_XRefData', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_312_httpwww_ncbi_nlm_nih_govPC_XRefData', False, pyxb.utils.utility.Location('./pubchem.xsd', 2587, 0), )

    
    PC_XRefData = property(__PC_XRefData.value, __PC_XRefData.set, None, None)

    _ElementMap.update({
        __PC_XRefData.name() : __PC_XRefData
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_313 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 5045, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-ResultType_tid uses Python identifier PC_ResultType_tid
    __PC_ResultType_tid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_tid'), 'PC_ResultType_tid', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_313_httpwww_ncbi_nlm_nih_govPC_ResultType_tid', False, pyxb.utils.utility.Location('./pubchem.xsd', 5051, 6), )

    
    PC_ResultType_tid = property(__PC_ResultType_tid.value, __PC_ResultType_tid.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-ResultType_name uses Python identifier PC_ResultType_name
    __PC_ResultType_name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_name'), 'PC_ResultType_name', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_313_httpwww_ncbi_nlm_nih_govPC_ResultType_name', False, pyxb.utils.utility.Location('./pubchem.xsd', 5053, 6), )

    
    PC_ResultType_name = property(__PC_ResultType_name.value, __PC_ResultType_name.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-ResultType_description uses Python identifier PC_ResultType_description
    __PC_ResultType_description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_description'), 'PC_ResultType_description', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_313_httpwww_ncbi_nlm_nih_govPC_ResultType_description', False, pyxb.utils.utility.Location('./pubchem.xsd', 5055, 6), )

    
    PC_ResultType_description = property(__PC_ResultType_description.value, __PC_ResultType_description.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-ResultType_type uses Python identifier PC_ResultType_type
    __PC_ResultType_type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_type'), 'PC_ResultType_type', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_313_httpwww_ncbi_nlm_nih_govPC_ResultType_type', False, pyxb.utils.utility.Location('./pubchem.xsd', 5062, 6), )

    
    PC_ResultType_type = property(__PC_ResultType_type.value, __PC_ResultType_type.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-ResultType_constraints uses Python identifier PC_ResultType_constraints
    __PC_ResultType_constraints = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_constraints'), 'PC_ResultType_constraints', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_313_httpwww_ncbi_nlm_nih_govPC_ResultType_constraints', False, pyxb.utils.utility.Location('./pubchem.xsd', 5080, 6), )

    
    PC_ResultType_constraints = property(__PC_ResultType_constraints.value, __PC_ResultType_constraints.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-ResultType_unit uses Python identifier PC_ResultType_unit
    __PC_ResultType_unit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_unit'), 'PC_ResultType_unit', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_313_httpwww_ncbi_nlm_nih_govPC_ResultType_unit', False, pyxb.utils.utility.Location('./pubchem.xsd', 5140, 6), )

    
    PC_ResultType_unit = property(__PC_ResultType_unit.value, __PC_ResultType_unit.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-ResultType_sunit uses Python identifier PC_ResultType_sunit
    __PC_ResultType_sunit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_sunit'), 'PC_ResultType_sunit', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_313_httpwww_ncbi_nlm_nih_govPC_ResultType_sunit', False, pyxb.utils.utility.Location('./pubchem.xsd', 5217, 6), )

    
    PC_ResultType_sunit = property(__PC_ResultType_sunit.value, __PC_ResultType_sunit.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-ResultType_transform uses Python identifier PC_ResultType_transform
    __PC_ResultType_transform = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_transform'), 'PC_ResultType_transform', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_313_httpwww_ncbi_nlm_nih_govPC_ResultType_transform', False, pyxb.utils.utility.Location('./pubchem.xsd', 5218, 6), )

    
    PC_ResultType_transform = property(__PC_ResultType_transform.value, __PC_ResultType_transform.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-ResultType_stransform uses Python identifier PC_ResultType_stransform
    __PC_ResultType_stransform = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_stransform'), 'PC_ResultType_stransform', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_313_httpwww_ncbi_nlm_nih_govPC_ResultType_stransform', False, pyxb.utils.utility.Location('./pubchem.xsd', 5253, 6), )

    
    PC_ResultType_stransform = property(__PC_ResultType_stransform.value, __PC_ResultType_stransform.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-ResultType_tc uses Python identifier PC_ResultType_tc
    __PC_ResultType_tc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_tc'), 'PC_ResultType_tc', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_313_httpwww_ncbi_nlm_nih_govPC_ResultType_tc', False, pyxb.utils.utility.Location('./pubchem.xsd', 5255, 6), )

    
    PC_ResultType_tc = property(__PC_ResultType_tc.value, __PC_ResultType_tc.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-ResultType_ac uses Python identifier PC_ResultType_ac
    __PC_ResultType_ac = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_ac'), 'PC_ResultType_ac', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_313_httpwww_ncbi_nlm_nih_govPC_ResultType_ac', False, pyxb.utils.utility.Location('./pubchem.xsd', 5271, 6), )

    
    PC_ResultType_ac = property(__PC_ResultType_ac.value, __PC_ResultType_ac.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-ResultType_panel-info uses Python identifier PC_ResultType_panel_info
    __PC_ResultType_panel_info = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_panel-info'), 'PC_ResultType_panel_info', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_313_httpwww_ncbi_nlm_nih_govPC_ResultType_panel_info', False, pyxb.utils.utility.Location('./pubchem.xsd', 5288, 6), )

    
    PC_ResultType_panel_info = property(__PC_ResultType_panel_info.value, __PC_ResultType_panel_info.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-ResultType_annot uses Python identifier PC_ResultType_annot
    __PC_ResultType_annot = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_annot'), 'PC_ResultType_annot', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_313_httpwww_ncbi_nlm_nih_govPC_ResultType_annot', False, pyxb.utils.utility.Location('./pubchem.xsd', 5303, 6), )

    
    PC_ResultType_annot = property(__PC_ResultType_annot.value, __PC_ResultType_annot.set, None, None)

    _ElementMap.update({
        __PC_ResultType_tid.name() : __PC_ResultType_tid,
        __PC_ResultType_name.name() : __PC_ResultType_name,
        __PC_ResultType_description.name() : __PC_ResultType_description,
        __PC_ResultType_type.name() : __PC_ResultType_type,
        __PC_ResultType_constraints.name() : __PC_ResultType_constraints,
        __PC_ResultType_unit.name() : __PC_ResultType_unit,
        __PC_ResultType_sunit.name() : __PC_ResultType_sunit,
        __PC_ResultType_transform.name() : __PC_ResultType_transform,
        __PC_ResultType_stransform.name() : __PC_ResultType_stransform,
        __PC_ResultType_tc.name() : __PC_ResultType_tc,
        __PC_ResultType_ac.name() : __PC_ResultType_ac,
        __PC_ResultType_panel_info.name() : __PC_ResultType_panel_info,
        __PC_ResultType_annot.name() : __PC_ResultType_annot
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_314 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 5056, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-ResultType_description_E uses Python identifier PC_ResultType_description_E
    __PC_ResultType_description_E = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_description_E'), 'PC_ResultType_description_E', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_314_httpwww_ncbi_nlm_nih_govPC_ResultType_description_E', True, pyxb.utils.utility.Location('./pubchem.xsd', 5058, 12), )

    
    PC_ResultType_description_E = property(__PC_ResultType_description_E.value, __PC_ResultType_description_E.set, None, None)

    _ElementMap.update({
        __PC_ResultType_description_E.name() : __PC_ResultType_description_E
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_315 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 5081, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-ResultType_constraints_fset uses Python identifier PC_ResultType_constraints_fset
    __PC_ResultType_constraints_fset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_constraints_fset'), 'PC_ResultType_constraints_fset', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_315_httpwww_ncbi_nlm_nih_govPC_ResultType_constraints_fset', False, pyxb.utils.utility.Location('./pubchem.xsd', 5084, 12), )

    
    PC_ResultType_constraints_fset = property(__PC_ResultType_constraints_fset.value, __PC_ResultType_constraints_fset.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-ResultType_constraints_fmin uses Python identifier PC_ResultType_constraints_fmin
    __PC_ResultType_constraints_fmin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_constraints_fmin'), 'PC_ResultType_constraints_fmin', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_315_httpwww_ncbi_nlm_nih_govPC_ResultType_constraints_fmin', False, pyxb.utils.utility.Location('./pubchem.xsd', 5092, 12), )

    
    PC_ResultType_constraints_fmin = property(__PC_ResultType_constraints_fmin.value, __PC_ResultType_constraints_fmin.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-ResultType_constraints_fmax uses Python identifier PC_ResultType_constraints_fmax
    __PC_ResultType_constraints_fmax = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_constraints_fmax'), 'PC_ResultType_constraints_fmax', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_315_httpwww_ncbi_nlm_nih_govPC_ResultType_constraints_fmax', False, pyxb.utils.utility.Location('./pubchem.xsd', 5094, 12), )

    
    PC_ResultType_constraints_fmax = property(__PC_ResultType_constraints_fmax.value, __PC_ResultType_constraints_fmax.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-ResultType_constraints_frange uses Python identifier PC_ResultType_constraints_frange
    __PC_ResultType_constraints_frange = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_constraints_frange'), 'PC_ResultType_constraints_frange', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_315_httpwww_ncbi_nlm_nih_govPC_ResultType_constraints_frange', False, pyxb.utils.utility.Location('./pubchem.xsd', 5096, 12), )

    
    PC_ResultType_constraints_frange = property(__PC_ResultType_constraints_frange.value, __PC_ResultType_constraints_frange.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-ResultType_constraints_iset uses Python identifier PC_ResultType_constraints_iset
    __PC_ResultType_constraints_iset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_constraints_iset'), 'PC_ResultType_constraints_iset', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_315_httpwww_ncbi_nlm_nih_govPC_ResultType_constraints_iset', False, pyxb.utils.utility.Location('./pubchem.xsd', 5107, 12), )

    
    PC_ResultType_constraints_iset = property(__PC_ResultType_constraints_iset.value, __PC_ResultType_constraints_iset.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-ResultType_constraints_imin uses Python identifier PC_ResultType_constraints_imin
    __PC_ResultType_constraints_imin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_constraints_imin'), 'PC_ResultType_constraints_imin', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_315_httpwww_ncbi_nlm_nih_govPC_ResultType_constraints_imin', False, pyxb.utils.utility.Location('./pubchem.xsd', 5115, 12), )

    
    PC_ResultType_constraints_imin = property(__PC_ResultType_constraints_imin.value, __PC_ResultType_constraints_imin.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-ResultType_constraints_imax uses Python identifier PC_ResultType_constraints_imax
    __PC_ResultType_constraints_imax = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_constraints_imax'), 'PC_ResultType_constraints_imax', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_315_httpwww_ncbi_nlm_nih_govPC_ResultType_constraints_imax', False, pyxb.utils.utility.Location('./pubchem.xsd', 5117, 12), )

    
    PC_ResultType_constraints_imax = property(__PC_ResultType_constraints_imax.value, __PC_ResultType_constraints_imax.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-ResultType_constraints_irange uses Python identifier PC_ResultType_constraints_irange
    __PC_ResultType_constraints_irange = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_constraints_irange'), 'PC_ResultType_constraints_irange', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_315_httpwww_ncbi_nlm_nih_govPC_ResultType_constraints_irange', False, pyxb.utils.utility.Location('./pubchem.xsd', 5119, 12), )

    
    PC_ResultType_constraints_irange = property(__PC_ResultType_constraints_irange.value, __PC_ResultType_constraints_irange.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-ResultType_constraints_sset uses Python identifier PC_ResultType_constraints_sset
    __PC_ResultType_constraints_sset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_constraints_sset'), 'PC_ResultType_constraints_sset', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_315_httpwww_ncbi_nlm_nih_govPC_ResultType_constraints_sset', False, pyxb.utils.utility.Location('./pubchem.xsd', 5130, 12), )

    
    PC_ResultType_constraints_sset = property(__PC_ResultType_constraints_sset.value, __PC_ResultType_constraints_sset.set, None, None)

    _ElementMap.update({
        __PC_ResultType_constraints_fset.name() : __PC_ResultType_constraints_fset,
        __PC_ResultType_constraints_fmin.name() : __PC_ResultType_constraints_fmin,
        __PC_ResultType_constraints_fmax.name() : __PC_ResultType_constraints_fmax,
        __PC_ResultType_constraints_frange.name() : __PC_ResultType_constraints_frange,
        __PC_ResultType_constraints_iset.name() : __PC_ResultType_constraints_iset,
        __PC_ResultType_constraints_imin.name() : __PC_ResultType_constraints_imin,
        __PC_ResultType_constraints_imax.name() : __PC_ResultType_constraints_imax,
        __PC_ResultType_constraints_irange.name() : __PC_ResultType_constraints_irange,
        __PC_ResultType_constraints_sset.name() : __PC_ResultType_constraints_sset
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_316 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 5085, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-ResultType_constraints_fset_E uses Python identifier PC_ResultType_constraints_fset_E
    __PC_ResultType_constraints_fset_E = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_constraints_fset_E'), 'PC_ResultType_constraints_fset_E', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_316_httpwww_ncbi_nlm_nih_govPC_ResultType_constraints_fset_E', True, pyxb.utils.utility.Location('./pubchem.xsd', 5087, 18), )

    
    PC_ResultType_constraints_fset_E = property(__PC_ResultType_constraints_fset_E.value, __PC_ResultType_constraints_fset_E.set, None, None)

    _ElementMap.update({
        __PC_ResultType_constraints_fset_E.name() : __PC_ResultType_constraints_fset_E
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_317 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 5097, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-RealMinMax uses Python identifier PC_RealMinMax
    __PC_RealMinMax = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-RealMinMax'), 'PC_RealMinMax', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_317_httpwww_ncbi_nlm_nih_govPC_RealMinMax', False, pyxb.utils.utility.Location('./pubchem.xsd', 5445, 0), )

    
    PC_RealMinMax = property(__PC_RealMinMax.value, __PC_RealMinMax.set, None, None)

    _ElementMap.update({
        __PC_RealMinMax.name() : __PC_RealMinMax
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_318 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 5108, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-ResultType_constraints_iset_E uses Python identifier PC_ResultType_constraints_iset_E
    __PC_ResultType_constraints_iset_E = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_constraints_iset_E'), 'PC_ResultType_constraints_iset_E', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_318_httpwww_ncbi_nlm_nih_govPC_ResultType_constraints_iset_E', True, pyxb.utils.utility.Location('./pubchem.xsd', 5110, 18), )

    
    PC_ResultType_constraints_iset_E = property(__PC_ResultType_constraints_iset_E.value, __PC_ResultType_constraints_iset_E.set, None, None)

    _ElementMap.update({
        __PC_ResultType_constraints_iset_E.name() : __PC_ResultType_constraints_iset_E
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_319 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 5120, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-IntegerMinMax uses Python identifier PC_IntegerMinMax
    __PC_IntegerMinMax = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-IntegerMinMax'), 'PC_IntegerMinMax', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_319_httpwww_ncbi_nlm_nih_govPC_IntegerMinMax', False, pyxb.utils.utility.Location('./pubchem.xsd', 5433, 0), )

    
    PC_IntegerMinMax = property(__PC_IntegerMinMax.value, __PC_IntegerMinMax.set, None, None)

    _ElementMap.update({
        __PC_IntegerMinMax.name() : __PC_IntegerMinMax
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_320 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 5131, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-ResultType_constraints_sset_E uses Python identifier PC_ResultType_constraints_sset_E
    __PC_ResultType_constraints_sset_E = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_constraints_sset_E'), 'PC_ResultType_constraints_sset_E', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_320_httpwww_ncbi_nlm_nih_govPC_ResultType_constraints_sset_E', True, pyxb.utils.utility.Location('./pubchem.xsd', 5133, 18), )

    
    PC_ResultType_constraints_sset_E = property(__PC_ResultType_constraints_sset_E.value, __PC_ResultType_constraints_sset_E.set, None, None)

    _ElementMap.update({
        __PC_ResultType_constraints_sset_E.name() : __PC_ResultType_constraints_sset_E
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_321 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 5256, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-ConcentrationAttr uses Python identifier PC_ConcentrationAttr
    __PC_ConcentrationAttr = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-ConcentrationAttr'), 'PC_ConcentrationAttr', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_321_httpwww_ncbi_nlm_nih_govPC_ConcentrationAttr', False, pyxb.utils.utility.Location('./pubchem.xsd', 5404, 0), )

    
    PC_ConcentrationAttr = property(__PC_ConcentrationAttr.value, __PC_ConcentrationAttr.set, None, None)

    _ElementMap.update({
        __PC_ConcentrationAttr.name() : __PC_ConcentrationAttr
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_322 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 5289, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayPanelTestResult uses Python identifier PC_AssayPanelTestResult
    __PC_AssayPanelTestResult = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanelTestResult'), 'PC_AssayPanelTestResult', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_322_httpwww_ncbi_nlm_nih_govPC_AssayPanelTestResult', False, pyxb.utils.utility.Location('./pubchem.xsd', 5363, 0), )

    
    PC_AssayPanelTestResult = property(__PC_AssayPanelTestResult.value, __PC_AssayPanelTestResult.set, None, None)

    _ElementMap.update({
        __PC_AssayPanelTestResult.name() : __PC_AssayPanelTestResult
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_323 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 5364, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayPanelTestResult_mid uses Python identifier PC_AssayPanelTestResult_mid
    __PC_AssayPanelTestResult_mid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanelTestResult_mid'), 'PC_AssayPanelTestResult_mid', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_323_httpwww_ncbi_nlm_nih_govPC_AssayPanelTestResult_mid', False, pyxb.utils.utility.Location('./pubchem.xsd', 5370, 6), )

    
    PC_AssayPanelTestResult_mid = property(__PC_AssayPanelTestResult_mid.value, __PC_AssayPanelTestResult_mid.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-AssayPanelTestResult_readout-annot uses Python identifier PC_AssayPanelTestResult_readout_annot
    __PC_AssayPanelTestResult_readout_annot = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanelTestResult_readout-annot'), 'PC_AssayPanelTestResult_readout_annot', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_323_httpwww_ncbi_nlm_nih_govPC_AssayPanelTestResult_readout_annot', False, pyxb.utils.utility.Location('./pubchem.xsd', 5371, 6), )

    
    PC_AssayPanelTestResult_readout_annot = property(__PC_AssayPanelTestResult_readout_annot.value, __PC_AssayPanelTestResult_readout_annot.set, None, None)

    _ElementMap.update({
        __PC_AssayPanelTestResult_mid.name() : __PC_AssayPanelTestResult_mid,
        __PC_AssayPanelTestResult_readout_annot.name() : __PC_AssayPanelTestResult_readout_annot
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_324 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 5405, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-ConcentrationAttr_concentration uses Python identifier PC_ConcentrationAttr_concentration
    __PC_ConcentrationAttr_concentration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-ConcentrationAttr_concentration'), 'PC_ConcentrationAttr_concentration', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_324_httpwww_ncbi_nlm_nih_govPC_ConcentrationAttr_concentration', False, pyxb.utils.utility.Location('./pubchem.xsd', 5407, 6), )

    
    PC_ConcentrationAttr_concentration = property(__PC_ConcentrationAttr_concentration.value, __PC_ConcentrationAttr_concentration.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-ConcentrationAttr_unit uses Python identifier PC_ConcentrationAttr_unit
    __PC_ConcentrationAttr_unit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-ConcentrationAttr_unit'), 'PC_ConcentrationAttr_unit', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_324_httpwww_ncbi_nlm_nih_govPC_ConcentrationAttr_unit', False, pyxb.utils.utility.Location('./pubchem.xsd', 5408, 6), )

    
    PC_ConcentrationAttr_unit = property(__PC_ConcentrationAttr_unit.value, __PC_ConcentrationAttr_unit.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-ConcentrationAttr_dr-id uses Python identifier PC_ConcentrationAttr_dr_id
    __PC_ConcentrationAttr_dr_id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-ConcentrationAttr_dr-id'), 'PC_ConcentrationAttr_dr_id', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_324_httpwww_ncbi_nlm_nih_govPC_ConcentrationAttr_dr_id', False, pyxb.utils.utility.Location('./pubchem.xsd', 5427, 6), )

    
    PC_ConcentrationAttr_dr_id = property(__PC_ConcentrationAttr_dr_id.value, __PC_ConcentrationAttr_dr_id.set, None, None)

    _ElementMap.update({
        __PC_ConcentrationAttr_concentration.name() : __PC_ConcentrationAttr_concentration,
        __PC_ConcentrationAttr_unit.name() : __PC_ConcentrationAttr_unit,
        __PC_ConcentrationAttr_dr_id.name() : __PC_ConcentrationAttr_dr_id
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_325 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 5434, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-IntegerMinMax_min uses Python identifier PC_IntegerMinMax_min
    __PC_IntegerMinMax_min = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-IntegerMinMax_min'), 'PC_IntegerMinMax_min', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_325_httpwww_ncbi_nlm_nih_govPC_IntegerMinMax_min', False, pyxb.utils.utility.Location('./pubchem.xsd', 5437, 6), )

    
    PC_IntegerMinMax_min = property(__PC_IntegerMinMax_min.value, __PC_IntegerMinMax_min.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-IntegerMinMax_max uses Python identifier PC_IntegerMinMax_max
    __PC_IntegerMinMax_max = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-IntegerMinMax_max'), 'PC_IntegerMinMax_max', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_325_httpwww_ncbi_nlm_nih_govPC_IntegerMinMax_max', False, pyxb.utils.utility.Location('./pubchem.xsd', 5439, 6), )

    
    PC_IntegerMinMax_max = property(__PC_IntegerMinMax_max.value, __PC_IntegerMinMax_max.set, None, None)

    _ElementMap.update({
        __PC_IntegerMinMax_min.name() : __PC_IntegerMinMax_min,
        __PC_IntegerMinMax_max.name() : __PC_IntegerMinMax_max
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_326 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 5446, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.ncbi.nlm.nih.gov}PC-RealMinMax_min uses Python identifier PC_RealMinMax_min
    __PC_RealMinMax_min = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-RealMinMax_min'), 'PC_RealMinMax_min', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_326_httpwww_ncbi_nlm_nih_govPC_RealMinMax_min', False, pyxb.utils.utility.Location('./pubchem.xsd', 5449, 6), )

    
    PC_RealMinMax_min = property(__PC_RealMinMax_min.value, __PC_RealMinMax_min.set, None, None)

    
    # Element {http://www.ncbi.nlm.nih.gov}PC-RealMinMax_max uses Python identifier PC_RealMinMax_max
    __PC_RealMinMax_max = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PC-RealMinMax_max'), 'PC_RealMinMax_max', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_326_httpwww_ncbi_nlm_nih_govPC_RealMinMax_max', False, pyxb.utils.utility.Location('./pubchem.xsd', 5451, 6), )

    
    PC_RealMinMax_max = property(__PC_RealMinMax_max.value, __PC_RealMinMax_max.set, None, None)

    _ElementMap.update({
        __PC_RealMinMax_min.name() : __PC_RealMinMax_min,
        __PC_RealMinMax_max.name() : __PC_RealMinMax_max
    })
    _AttributeMap.update({
        
    })



# Complex type [anonymous] with content type EMPTY
class CTD_ANON_327 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 239, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_327_value', STD_ANON, required=True)
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 240, 10)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 240, 10)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type EMPTY
class CTD_ANON_328 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 327, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_328_value', STD_ANON_, required=True)
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 328, 16)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 328, 16)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_329 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.integer
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 542, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.integer
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_329_value', STD_ANON_2)
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 545, 8)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 545, 8)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type EMPTY
class CTD_ANON_330 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 899, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_330_value', STD_ANON_3, required=True)
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 900, 10)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 900, 10)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type EMPTY
class CTD_ANON_331 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 941, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_331_value', STD_ANON_4, required=True)
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 942, 10)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 942, 10)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type EMPTY
class CTD_ANON_332 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1075, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_332_value', STD_ANON_5, required=True)
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1076, 10)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1076, 10)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type EMPTY
class CTD_ANON_333 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1087, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_333_value', STD_ANON_6, required=True)
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1088, 10)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1088, 10)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type EMPTY
class CTD_ANON_334 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1109, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_334_value', STD_ANON_7, required=True)
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1110, 10)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1110, 10)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type EMPTY
class CTD_ANON_335 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1232, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_335_value', STD_ANON_8, required=True)
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1233, 10)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1233, 10)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type EMPTY
class CTD_ANON_336 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1282, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_336_value', STD_ANON_9, required=True)
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1283, 10)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1283, 10)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_337 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.integer
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1444, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.integer
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_337_value', STD_ANON_10, unicode_default='medline')
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1447, 14)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1447, 14)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type EMPTY
class CTD_ANON_338 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1473, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_338_value', STD_ANON_11, unicode_default='false')
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1474, 10)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1474, 10)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type EMPTY
class CTD_ANON_339 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1503, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_339_value', STD_ANON_12, unicode_default='false')
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1504, 10)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1504, 10)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type EMPTY
class CTD_ANON_340 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1525, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_340_value', STD_ANON_13, required=True)
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1526, 10)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1526, 10)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type EMPTY
class CTD_ANON_341 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1554, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_341_value', STD_ANON_14, required=True)
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1555, 10)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1555, 10)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_342 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.integer
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1603, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.integer
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_342_value', STD_ANON_15)
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1606, 14)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1606, 14)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_343 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.integer
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1643, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.integer
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_343_value', STD_ANON_16)
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1646, 14)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 1646, 14)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_344 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.integer
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2007, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.integer
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_344_value', STD_ANON_17)
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2010, 14)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2010, 14)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_345 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.integer
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2105, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.integer
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_345_value', STD_ANON_18)
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2108, 14)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2108, 14)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_346 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.integer
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2165, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.integer
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_346_value', STD_ANON_19, unicode_default='unknown')
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2168, 14)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2168, 14)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_347 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.integer
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2201, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.integer
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_347_value', STD_ANON_20, unicode_default='unknown')
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2204, 14)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2204, 14)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_348 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.integer
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2254, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.integer
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_348_value', STD_ANON_21)
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2257, 14)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2257, 14)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_349 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.integer
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2786, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.integer
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_349_value', STD_ANON_22)
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2789, 14)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2789, 14)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_350 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.integer
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2886, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.integer
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_350_value', STD_ANON_23)
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2889, 14)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2889, 14)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type EMPTY
class CTD_ANON_351 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2941, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_351_value', STD_ANON_24, required=True)
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2942, 16)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2942, 16)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type EMPTY
class CTD_ANON_352 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2957, 20)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_352_value', STD_ANON_25, required=True)
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2958, 22)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 2958, 22)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_353 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.integer
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3067, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.integer
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_353_value', STD_ANON_27)
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3070, 8)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3070, 8)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_354 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.integer
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3237, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.integer
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_354_value', STD_ANON_28)
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3240, 8)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3240, 8)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_355 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.integer
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3329, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.integer
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_355_value', STD_ANON_29)
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3332, 8)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3332, 8)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_356 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.integer
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3511, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.integer
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_356_value', STD_ANON_30)
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3514, 14)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3514, 14)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_357 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.integer
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3550, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.integer
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_357_value', STD_ANON_31)
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3553, 8)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3553, 8)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_358 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.integer
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3728, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.integer
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_358_value', STD_ANON_32)
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3731, 8)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3731, 8)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_359 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.integer
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3864, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.integer
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_359_value', STD_ANON_33)
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3867, 14)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3867, 14)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_360 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.integer
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3882, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.integer
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_360_value', STD_ANON_34)
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3885, 14)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3885, 14)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_361 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.integer
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3947, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.integer
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_361_value', STD_ANON_35)
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3950, 14)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3950, 14)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_362 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.integer
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3965, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.integer
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_362_value', STD_ANON_36)
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3968, 14)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 3968, 14)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_363 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.integer
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4022, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.integer
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_363_value', STD_ANON_37)
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4025, 14)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4025, 14)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_364 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.integer
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4379, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.integer
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_364_value', STD_ANON_38, unicode_default='unspecified')
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4382, 14)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4382, 14)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type EMPTY
class CTD_ANON_365 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4459, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_365_value', STD_ANON_39, required=True)
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4460, 16)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4460, 16)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_366 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.integer
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4584, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.integer
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_366_value', STD_ANON_40)
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4587, 14)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4587, 14)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_367 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.integer
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4617, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.integer
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_367_value', STD_ANON_41)
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4620, 14)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4620, 14)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_368 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.integer
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4659, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.integer
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_368_value', STD_ANON_42)
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4662, 14)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4662, 14)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type EMPTY
class CTD_ANON_369 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4699, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_369_value', STD_ANON_43, required=True)
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4700, 10)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4700, 10)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type EMPTY
class CTD_ANON_370 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4742, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_370_value', STD_ANON_44, required=True)
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4743, 10)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4743, 10)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_371 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.integer
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4838, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.integer
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_371_value', STD_ANON_45)
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4841, 14)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4841, 14)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_372 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.integer
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4922, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.integer
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_372_value', STD_ANON_46)
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4925, 14)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4925, 14)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_373 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.integer
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4957, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.integer
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_373_value', STD_ANON_47, unicode_default='protein')
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4960, 14)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 4960, 14)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_374 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.integer
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 5020, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.integer
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_374_value', STD_ANON_48)
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 5023, 14)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 5023, 14)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_375 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.integer
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 5063, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.integer
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_375_value', STD_ANON_49)
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 5066, 14)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 5066, 14)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_376 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.integer
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 5141, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.integer
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_376_value', STD_ANON_50)
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 5144, 14)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 5144, 14)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_377 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.integer
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 5219, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.integer
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_377_value', STD_ANON_51)
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 5222, 14)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 5222, 14)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type EMPTY
class CTD_ANON_378 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type EMPTY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 5272, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_378_value', STD_ANON_52, required=True)
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 5273, 10)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 5273, 10)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_379 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.integer
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 5304, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.integer
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_379_value', STD_ANON_53)
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 5307, 14)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 5307, 14)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_380 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.integer
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 5372, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.integer
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_380_value', STD_ANON_54, unicode_default='regular')
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 5375, 14)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 5375, 14)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_381 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.integer
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('./pubchem.xsd', 5409, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.integer
    
    # Attribute value uses Python identifier value_
    __value = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__httpwww_ncbi_nlm_nih_gov_CTD_ANON_381_value', STD_ANON_55)
    __value._DeclarationLocation = pyxb.utils.utility.Location('./pubchem.xsd', 5412, 14)
    __value._UseLocation = pyxb.utils.utility.Location('./pubchem.xsd', 5412, 14)
    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __value.name() : __value
    })



PubMedId = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PubMedId'), pyxb.binding.datatypes.integer, location=pyxb.utils.utility.Location('./pubchem.xsd', 509, 0))
Namespace.addCategoryObject('elementBinding', PubMedId.name().localName(), PubMedId)

MedlineUID = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MedlineUID'), pyxb.binding.datatypes.integer, location=pyxb.utils.utility.Location('./pubchem.xsd', 512, 0))
Namespace.addCategoryObject('elementBinding', MedlineUID.name().localName(), MedlineUID)

DOI = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DOI'), pyxb.binding.datatypes.string, location=pyxb.utils.utility.Location('./pubchem.xsd', 515, 0))
Namespace.addCategoryObject('elementBinding', DOI.name().localName(), DOI)

PII = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PII'), pyxb.binding.datatypes.string, location=pyxb.utils.utility.Location('./pubchem.xsd', 518, 0))
Namespace.addCategoryObject('elementBinding', PII.name().localName(), PII)

PmcID = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PmcID'), pyxb.binding.datatypes.integer, location=pyxb.utils.utility.Location('./pubchem.xsd', 521, 0))
Namespace.addCategoryObject('elementBinding', PmcID.name().localName(), PmcID)

PmcPid = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PmcPid'), pyxb.binding.datatypes.string, location=pyxb.utils.utility.Location('./pubchem.xsd', 524, 0))
Namespace.addCategoryObject('elementBinding', PmcPid.name().localName(), PmcPid)

PmPid = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PmPid'), pyxb.binding.datatypes.string, location=pyxb.utils.utility.Location('./pubchem.xsd', 527, 0))
Namespace.addCategoryObject('elementBinding', PmPid.name().localName(), PmPid)

Date = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Date'), CTD_ANON, location=pyxb.utils.utility.Location('./pubchem.xsd', 89, 0))
Namespace.addCategoryObject('elementBinding', Date.name().localName(), Date)

Date_std = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Date-std'), CTD_ANON_2, location=pyxb.utils.utility.Location('./pubchem.xsd', 107, 0))
Namespace.addCategoryObject('elementBinding', Date_std.name().localName(), Date_std)

Dbtag = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Dbtag'), CTD_ANON_3, location=pyxb.utils.utility.Location('./pubchem.xsd', 133, 0))
Namespace.addCategoryObject('elementBinding', Dbtag.name().localName(), Dbtag)

Object_id = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Object-id'), CTD_ANON_5, location=pyxb.utils.utility.Location('./pubchem.xsd', 154, 0))
Namespace.addCategoryObject('elementBinding', Object_id.name().localName(), Object_id)

Person_id = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Person-id'), CTD_ANON_6, location=pyxb.utils.utility.Location('./pubchem.xsd', 167, 0))
Namespace.addCategoryObject('elementBinding', Person_id.name().localName(), Person_id)

Name_std = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name-std'), CTD_ANON_9, location=pyxb.utils.utility.Location('./pubchem.xsd', 200, 0))
Namespace.addCategoryObject('elementBinding', Name_std.name().localName(), Name_std)

Int_fuzz = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Int-fuzz'), CTD_ANON_10, location=pyxb.utils.utility.Location('./pubchem.xsd', 223, 0))
Namespace.addCategoryObject('elementBinding', Int_fuzz.name().localName(), Int_fuzz)

User_object = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'User-object'), CTD_ANON_13, location=pyxb.utils.utility.Location('./pubchem.xsd', 282, 0))
Namespace.addCategoryObject('elementBinding', User_object.name().localName(), User_object)

User_field = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'User-field'), CTD_ANON_16, location=pyxb.utils.utility.Location('./pubchem.xsd', 307, 0))
Namespace.addCategoryObject('elementBinding', User_field.name().localName(), User_field)

ArticleId = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ArticleId'), CTD_ANON_26, location=pyxb.utils.utility.Location('./pubchem.xsd', 443, 0))
Namespace.addCategoryObject('elementBinding', ArticleId.name().localName(), ArticleId)

ArticleIdSet = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ArticleIdSet'), CTD_ANON_35, location=pyxb.utils.utility.Location('./pubchem.xsd', 529, 0))
Namespace.addCategoryObject('elementBinding', ArticleIdSet.name().localName(), ArticleIdSet)

PubStatusDate = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PubStatusDate'), CTD_ANON_36, location=pyxb.utils.utility.Location('./pubchem.xsd', 584, 0))
Namespace.addCategoryObject('elementBinding', PubStatusDate.name().localName(), PubStatusDate)

PubStatusDateSet = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PubStatusDateSet'), CTD_ANON_39, location=pyxb.utils.utility.Location('./pubchem.xsd', 606, 0))
Namespace.addCategoryObject('elementBinding', PubStatusDateSet.name().localName(), PubStatusDateSet)

Cit_art = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-art'), CTD_ANON_40, location=pyxb.utils.utility.Location('./pubchem.xsd', 618, 0))
Namespace.addCategoryObject('elementBinding', Cit_art.name().localName(), Cit_art)

Cit_jour = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-jour'), CTD_ANON_48, location=pyxb.utils.utility.Location('./pubchem.xsd', 677, 0))
Namespace.addCategoryObject('elementBinding', Cit_jour.name().localName(), Cit_jour)

Cit_book = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-book'), CTD_ANON_51, location=pyxb.utils.utility.Location('./pubchem.xsd', 700, 0))
Namespace.addCategoryObject('elementBinding', Cit_book.name().localName(), Cit_book)

Cit_proc = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-proc'), CTD_ANON_56, location=pyxb.utils.utility.Location('./pubchem.xsd', 739, 0))
Namespace.addCategoryObject('elementBinding', Cit_proc.name().localName(), Cit_proc)

Cit_pat = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-pat'), CTD_ANON_59, location=pyxb.utils.utility.Location('./pubchem.xsd', 769, 0))
Namespace.addCategoryObject('elementBinding', Cit_pat.name().localName(), Cit_pat)

Patent_priority = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Patent-priority'), CTD_ANON_67, location=pyxb.utils.utility.Location('./pubchem.xsd', 843, 0))
Namespace.addCategoryObject('elementBinding', Patent_priority.name().localName(), Patent_priority)

Id_pat = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Id-pat'), CTD_ANON_69, location=pyxb.utils.utility.Location('./pubchem.xsd', 863, 0))
Namespace.addCategoryObject('elementBinding', Id_pat.name().localName(), Id_pat)

Cit_let = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-let'), CTD_ANON_71, location=pyxb.utils.utility.Location('./pubchem.xsd', 885, 0))
Namespace.addCategoryObject('elementBinding', Cit_let.name().localName(), Cit_let)

Cit_sub = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-sub'), CTD_ANON_73, location=pyxb.utils.utility.Location('./pubchem.xsd', 921, 0))
Namespace.addCategoryObject('elementBinding', Cit_sub.name().localName(), Cit_sub)

Cit_gen = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-gen'), CTD_ANON_77, location=pyxb.utils.utility.Location('./pubchem.xsd', 970, 0))
Namespace.addCategoryObject('elementBinding', Cit_gen.name().localName(), Cit_gen)

Auth_list = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Auth-list'), CTD_ANON_82, location=pyxb.utils.utility.Location('./pubchem.xsd', 1018, 0))
Namespace.addCategoryObject('elementBinding', Auth_list.name().localName(), Auth_list)

Author = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Author'), CTD_ANON_88, location=pyxb.utils.utility.Location('./pubchem.xsd', 1063, 0))
Namespace.addCategoryObject('elementBinding', Author.name().localName(), Author)

Affil = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Affil'), CTD_ANON_91, location=pyxb.utils.utility.Location('./pubchem.xsd', 1124, 0))
Namespace.addCategoryObject('elementBinding', Affil.name().localName(), Affil)

Title = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Title'), CTD_ANON_93, location=pyxb.utils.utility.Location('./pubchem.xsd', 1162, 0))
Namespace.addCategoryObject('elementBinding', Title.name().localName(), Title)

Imprint = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Imprint'), CTD_ANON_95, location=pyxb.utils.utility.Location('./pubchem.xsd', 1196, 0))
Namespace.addCategoryObject('elementBinding', Imprint.name().localName(), Imprint)

CitRetract = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CitRetract'), CTD_ANON_102, location=pyxb.utils.utility.Location('./pubchem.xsd', 1278, 0))
Namespace.addCategoryObject('elementBinding', CitRetract.name().localName(), CitRetract)

Meeting = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Meeting'), CTD_ANON_103, location=pyxb.utils.utility.Location('./pubchem.xsd', 1307, 0))
Namespace.addCategoryObject('elementBinding', Meeting.name().localName(), Meeting)

Medline_entry = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry'), CTD_ANON_106, location=pyxb.utils.utility.Location('./pubchem.xsd', 1361, 0))
Namespace.addCategoryObject('elementBinding', Medline_entry.name().localName(), Medline_entry)

Medline_mesh = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Medline-mesh'), CTD_ANON_117, location=pyxb.utils.utility.Location('./pubchem.xsd', 1468, 0))
Namespace.addCategoryObject('elementBinding', Medline_mesh.name().localName(), Medline_mesh)

Medline_qual = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Medline-qual'), CTD_ANON_119, location=pyxb.utils.utility.Location('./pubchem.xsd', 1498, 0))
Namespace.addCategoryObject('elementBinding', Medline_qual.name().localName(), Medline_qual)

Medline_rn = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Medline-rn'), CTD_ANON_120, location=pyxb.utils.utility.Location('./pubchem.xsd', 1521, 0))
Namespace.addCategoryObject('elementBinding', Medline_rn.name().localName(), Medline_rn)

Medline_si = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Medline-si'), CTD_ANON_121, location=pyxb.utils.utility.Location('./pubchem.xsd', 1550, 0))
Namespace.addCategoryObject('elementBinding', Medline_si.name().localName(), Medline_si)

Medline_field = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Medline-field'), CTD_ANON_122, location=pyxb.utils.utility.Location('./pubchem.xsd', 1599, 0))
Namespace.addCategoryObject('elementBinding', Medline_field.name().localName(), Medline_field)

DocRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DocRef'), CTD_ANON_124, location=pyxb.utils.utility.Location('./pubchem.xsd', 1639, 0))
Namespace.addCategoryObject('elementBinding', DocRef.name().localName(), DocRef)

Pub = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Pub'), CTD_ANON_125, location=pyxb.utils.utility.Location('./pubchem.xsd', 1701, 0))
Namespace.addCategoryObject('elementBinding', Pub.name().localName(), Pub)

Pub_equiv = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Pub-equiv'), CTD_ANON_138, location=pyxb.utils.utility.Location('./pubchem.xsd', 1802, 0))
Namespace.addCategoryObject('elementBinding', Pub_equiv.name().localName(), Pub_equiv)

Pub_set = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Pub-set'), CTD_ANON_139, location=pyxb.utils.utility.Location('./pubchem.xsd', 1810, 0))
Namespace.addCategoryObject('elementBinding', Pub_set.name().localName(), Pub_set)

Org_ref = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Org-ref'), CTD_ANON_147, location=pyxb.utils.utility.Location('./pubchem.xsd', 1897, 0))
Namespace.addCategoryObject('elementBinding', Org_ref.name().localName(), Org_ref)

OrgName = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrgName'), CTD_ANON_152, location=pyxb.utils.utility.Location('./pubchem.xsd', 1939, 0))
Namespace.addCategoryObject('elementBinding', OrgName.name().localName(), OrgName)

OrgMod = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrgMod'), CTD_ANON_159, location=pyxb.utils.utility.Location('./pubchem.xsd', 2003, 0))
Namespace.addCategoryObject('elementBinding', OrgMod.name().localName(), OrgMod)

BinomialOrgName = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BinomialOrgName'), CTD_ANON_160, location=pyxb.utils.utility.Location('./pubchem.xsd', 2071, 0))
Namespace.addCategoryObject('elementBinding', BinomialOrgName.name().localName(), BinomialOrgName)

MultiOrgName = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MultiOrgName'), CTD_ANON_161, location=pyxb.utils.utility.Location('./pubchem.xsd', 2084, 0))
Namespace.addCategoryObject('elementBinding', MultiOrgName.name().localName(), MultiOrgName)

PartialOrgName = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PartialOrgName'), CTD_ANON_162, location=pyxb.utils.utility.Location('./pubchem.xsd', 2093, 0))
Namespace.addCategoryObject('elementBinding', PartialOrgName.name().localName(), PartialOrgName)

TaxElement = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TaxElement'), CTD_ANON_163, location=pyxb.utils.utility.Location('./pubchem.xsd', 2101, 0))
Namespace.addCategoryObject('elementBinding', TaxElement.name().localName(), TaxElement)

BioSource = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BioSource'), CTD_ANON_164, location=pyxb.utils.utility.Location('./pubchem.xsd', 2161, 0))
Namespace.addCategoryObject('elementBinding', BioSource.name().localName(), BioSource)

SubSource = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SubSource'), CTD_ANON_168, location=pyxb.utils.utility.Location('./pubchem.xsd', 2250, 0))
Namespace.addCategoryObject('elementBinding', SubSource.name().localName(), SubSource)

PC_Substance = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Substance'), CTD_ANON_169, location=pyxb.utils.utility.Location('./pubchem.xsd', 2376, 0))
Namespace.addCategoryObject('elementBinding', PC_Substance.name().localName(), PC_Substance)

PC_Substances = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Substances'), CTD_ANON_177, location=pyxb.utils.utility.Location('./pubchem.xsd', 2452, 0))
Namespace.addCategoryObject('elementBinding', PC_Substances.name().localName(), PC_Substances)

PC_ID = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-ID'), CTD_ANON_178, location=pyxb.utils.utility.Location('./pubchem.xsd', 2461, 0))
Namespace.addCategoryObject('elementBinding', PC_ID.name().localName(), PC_ID)

PC_Source = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Source'), CTD_ANON_179, location=pyxb.utils.utility.Location('./pubchem.xsd', 2479, 0))
Namespace.addCategoryObject('elementBinding', PC_Source.name().localName(), PC_Source)

PC_DBTracking = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-DBTracking'), CTD_ANON_183, location=pyxb.utils.utility.Location('./pubchem.xsd', 2511, 0))
Namespace.addCategoryObject('elementBinding', PC_DBTracking.name().localName(), PC_DBTracking)

PC_MMDBSource = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-MMDBSource'), CTD_ANON_187, location=pyxb.utils.utility.Location('./pubchem.xsd', 2547, 0))
Namespace.addCategoryObject('elementBinding', PC_MMDBSource.name().localName(), PC_MMDBSource)

PC_XRefData = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData'), CTD_ANON_189, location=pyxb.utils.utility.Location('./pubchem.xsd', 2587, 0))
Namespace.addCategoryObject('elementBinding', PC_XRefData.name().localName(), PC_XRefData)

PC_Compound = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Compound'), CTD_ANON_190, location=pyxb.utils.utility.Location('./pubchem.xsd', 2685, 0))
Namespace.addCategoryObject('elementBinding', PC_Compound.name().localName(), PC_Compound)

PC_Compounds = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Compounds'), CTD_ANON_200, location=pyxb.utils.utility.Location('./pubchem.xsd', 2770, 0))
Namespace.addCategoryObject('elementBinding', PC_Compounds.name().localName(), PC_Compounds)

PC_CompoundType = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-CompoundType'), CTD_ANON_201, location=pyxb.utils.utility.Location('./pubchem.xsd', 2782, 0))
Namespace.addCategoryObject('elementBinding', PC_CompoundType.name().localName(), PC_CompoundType)

PC_Count = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Count'), CTD_ANON_203, location=pyxb.utils.utility.Location('./pubchem.xsd', 2837, 0))
Namespace.addCategoryObject('elementBinding', PC_Count.name().localName(), PC_Count)

PC_StereoGroup = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoGroup'), CTD_ANON_204, location=pyxb.utils.utility.Location('./pubchem.xsd', 2882, 0))
Namespace.addCategoryObject('elementBinding', PC_StereoGroup.name().localName(), PC_StereoGroup)

PC_InfoData = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData'), CTD_ANON_206, location=pyxb.utils.utility.Location('./pubchem.xsd', 2925, 0))
Namespace.addCategoryObject('elementBinding', PC_InfoData.name().localName(), PC_InfoData)

PC_Urn = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Urn'), CTD_ANON_214, location=pyxb.utils.utility.Location('./pubchem.xsd', 3030, 0))
Namespace.addCategoryObject('elementBinding', PC_Urn.name().localName(), PC_Urn)

PC_Coordinates = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Coordinates'), CTD_ANON_216, location=pyxb.utils.utility.Location('./pubchem.xsd', 3121, 0))
Namespace.addCategoryObject('elementBinding', PC_Coordinates.name().localName(), PC_Coordinates)

PC_Conformer = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Conformer'), CTD_ANON_222, location=pyxb.utils.utility.Location('./pubchem.xsd', 3176, 0))
Namespace.addCategoryObject('elementBinding', PC_Conformer.name().localName(), PC_Conformer)

PC_Conformers = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Conformers'), CTD_ANON_228, location=pyxb.utils.utility.Location('./pubchem.xsd', 3227, 0))
Namespace.addCategoryObject('elementBinding', PC_Conformers.name().localName(), PC_Conformers)

PC_DrawAnnotations = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-DrawAnnotations'), CTD_ANON_229, location=pyxb.utils.utility.Location('./pubchem.xsd', 3287, 0))
Namespace.addCategoryObject('elementBinding', PC_DrawAnnotations.name().localName(), PC_DrawAnnotations)

PC_Atoms = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Atoms'), CTD_ANON_233, location=pyxb.utils.utility.Location('./pubchem.xsd', 3372, 0))
Namespace.addCategoryObject('elementBinding', PC_Atoms.name().localName(), PC_Atoms)

PC_AtomSource = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AtomSource'), CTD_ANON_242, location=pyxb.utils.utility.Location('./pubchem.xsd', 3451, 0))
Namespace.addCategoryObject('elementBinding', PC_AtomSource.name().localName(), PC_AtomSource)

PC_AtomInt = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AtomInt'), CTD_ANON_244, location=pyxb.utils.utility.Location('./pubchem.xsd', 3472, 0))
Namespace.addCategoryObject('elementBinding', PC_AtomInt.name().localName(), PC_AtomInt)

PC_AtomString = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AtomString'), CTD_ANON_245, location=pyxb.utils.utility.Location('./pubchem.xsd', 3487, 0))
Namespace.addCategoryObject('elementBinding', PC_AtomString.name().localName(), PC_AtomString)

PC_AtomRadical = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AtomRadical'), CTD_ANON_246, location=pyxb.utils.utility.Location('./pubchem.xsd', 3502, 0))
Namespace.addCategoryObject('elementBinding', PC_AtomRadical.name().localName(), PC_AtomRadical)

PC_Bonds = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Bonds'), CTD_ANON_247, location=pyxb.utils.utility.Location('./pubchem.xsd', 3688, 0))
Namespace.addCategoryObject('elementBinding', PC_Bonds.name().localName(), PC_Bonds)

PC_StereoCenter = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoCenter'), CTD_ANON_251, location=pyxb.utils.utility.Location('./pubchem.xsd', 3764, 0))
Namespace.addCategoryObject('elementBinding', PC_StereoCenter.name().localName(), PC_StereoCenter)

PC_StereoTetrahedral = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTetrahedral'), CTD_ANON_259, location=pyxb.utils.utility.Location('./pubchem.xsd', 3835, 0))
Namespace.addCategoryObject('elementBinding', PC_StereoTetrahedral.name().localName(), PC_StereoTetrahedral)

PC_StereoPlanar = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPlanar'), CTD_ANON_260, location=pyxb.utils.utility.Location('./pubchem.xsd', 3913, 0))
Namespace.addCategoryObject('elementBinding', PC_StereoPlanar.name().localName(), PC_StereoPlanar)

PC_StereoSquarePlanar = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoSquarePlanar'), CTD_ANON_261, location=pyxb.utils.utility.Location('./pubchem.xsd', 3993, 0))
Namespace.addCategoryObject('elementBinding', PC_StereoSquarePlanar.name().localName(), PC_StereoSquarePlanar)

PC_StereoOctahedral = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoOctahedral'), CTD_ANON_262, location=pyxb.utils.utility.Location('./pubchem.xsd', 4055, 0))
Namespace.addCategoryObject('elementBinding', PC_StereoOctahedral.name().localName(), PC_StereoOctahedral)

PC_StereoTrigonalBiPyramid = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTrigonalBiPyramid'), CTD_ANON_263, location=pyxb.utils.utility.Location('./pubchem.xsd', 4102, 0))
Namespace.addCategoryObject('elementBinding', PC_StereoTrigonalBiPyramid.name().localName(), PC_StereoTrigonalBiPyramid)

PC_StereoTShape = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTShape'), CTD_ANON_264, location=pyxb.utils.utility.Location('./pubchem.xsd', 4144, 0))
Namespace.addCategoryObject('elementBinding', PC_StereoTShape.name().localName(), PC_StereoTShape)

PC_StereoPentagonalBiPyramid = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPentagonalBiPyramid'), CTD_ANON_265, location=pyxb.utils.utility.Location('./pubchem.xsd', 4176, 0))
Namespace.addCategoryObject('elementBinding', PC_StereoPentagonalBiPyramid.name().localName(), PC_StereoPentagonalBiPyramid)

PC_AssayContainer = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayContainer'), CTD_ANON_266, location=pyxb.utils.utility.Location('./pubchem.xsd', 4276, 0))
Namespace.addCategoryObject('elementBinding', PC_AssayContainer.name().localName(), PC_AssayContainer)

PC_AssaySubmit = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssaySubmit'), CTD_ANON_267, location=pyxb.utils.utility.Location('./pubchem.xsd', 4285, 0))
Namespace.addCategoryObject('elementBinding', PC_AssaySubmit.name().localName(), PC_AssaySubmit)

PC_AssayResults = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayResults'), CTD_ANON_274, location=pyxb.utils.utility.Location('./pubchem.xsd', 4346, 0))
Namespace.addCategoryObject('elementBinding', PC_AssayResults.name().localName(), PC_AssayResults)

PC_AssayData = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayData'), CTD_ANON_279, location=pyxb.utils.utility.Location('./pubchem.xsd', 4445, 0))
Namespace.addCategoryObject('elementBinding', PC_AssayData.name().localName(), PC_AssayData)

PC_AssayDescription = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription'), CTD_ANON_281, location=pyxb.utils.utility.Location('./pubchem.xsd', 4485, 0))
Namespace.addCategoryObject('elementBinding', PC_AssayDescription.name().localName(), PC_AssayDescription)

PC_AssayPanel = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanel'), CTD_ANON_296, location=pyxb.utils.utility.Location('./pubchem.xsd', 4769, 0))
Namespace.addCategoryObject('elementBinding', PC_AssayPanel.name().localName(), PC_AssayPanel)

PC_AssayPanelMember = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanelMember'), CTD_ANON_298, location=pyxb.utils.utility.Location('./pubchem.xsd', 4789, 0))
Namespace.addCategoryObject('elementBinding', PC_AssayPanelMember.name().localName(), PC_AssayPanelMember)

PC_CategorizedComment = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-CategorizedComment'), CTD_ANON_305, location=pyxb.utils.utility.Location('./pubchem.xsd', 4886, 0))
Namespace.addCategoryObject('elementBinding', PC_CategorizedComment.name().localName(), PC_CategorizedComment)

PC_AssayDRAttr = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDRAttr'), CTD_ANON_307, location=pyxb.utils.utility.Location('./pubchem.xsd', 4907, 0))
Namespace.addCategoryObject('elementBinding', PC_AssayDRAttr.name().localName(), PC_AssayDRAttr)

PC_AssayTargetInfo = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayTargetInfo'), CTD_ANON_308, location=pyxb.utils.utility.Location('./pubchem.xsd', 4949, 0))
Namespace.addCategoryObject('elementBinding', PC_AssayTargetInfo.name().localName(), PC_AssayTargetInfo)

PC_AnnotatedXRef = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AnnotatedXRef'), CTD_ANON_311, location=pyxb.utils.utility.Location('./pubchem.xsd', 5006, 0))
Namespace.addCategoryObject('elementBinding', PC_AnnotatedXRef.name().localName(), PC_AnnotatedXRef)

PC_ResultType = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType'), CTD_ANON_313, location=pyxb.utils.utility.Location('./pubchem.xsd', 5044, 0))
Namespace.addCategoryObject('elementBinding', PC_ResultType.name().localName(), PC_ResultType)

PC_AssayPanelTestResult = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanelTestResult'), CTD_ANON_323, location=pyxb.utils.utility.Location('./pubchem.xsd', 5363, 0))
Namespace.addCategoryObject('elementBinding', PC_AssayPanelTestResult.name().localName(), PC_AssayPanelTestResult)

PC_ConcentrationAttr = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-ConcentrationAttr'), CTD_ANON_324, location=pyxb.utils.utility.Location('./pubchem.xsd', 5404, 0))
Namespace.addCategoryObject('elementBinding', PC_ConcentrationAttr.name().localName(), PC_ConcentrationAttr)

PC_IntegerMinMax = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-IntegerMinMax'), CTD_ANON_325, location=pyxb.utils.utility.Location('./pubchem.xsd', 5433, 0))
Namespace.addCategoryObject('elementBinding', PC_IntegerMinMax.name().localName(), PC_IntegerMinMax)

PC_RealMinMax = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-RealMinMax'), CTD_ANON_326, location=pyxb.utils.utility.Location('./pubchem.xsd', 5445, 0))
Namespace.addCategoryObject('elementBinding', PC_RealMinMax.name().localName(), PC_RealMinMax)

PubStatus = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PubStatus'), CTD_ANON_329, location=pyxb.utils.utility.Location('./pubchem.xsd', 541, 0))
Namespace.addCategoryObject('elementBinding', PubStatus.name().localName(), PubStatus)

PC_UrnDataType = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-UrnDataType'), CTD_ANON_353, location=pyxb.utils.utility.Location('./pubchem.xsd', 3066, 0))
Namespace.addCategoryObject('elementBinding', PC_UrnDataType.name().localName(), PC_UrnDataType)

PC_CoordinateType = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-CoordinateType'), CTD_ANON_354, location=pyxb.utils.utility.Location('./pubchem.xsd', 3236, 0))
Namespace.addCategoryObject('elementBinding', PC_CoordinateType.name().localName(), PC_CoordinateType)

PC_BondAnnotation = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-BondAnnotation'), CTD_ANON_355, location=pyxb.utils.utility.Location('./pubchem.xsd', 3328, 0))
Namespace.addCategoryObject('elementBinding', PC_BondAnnotation.name().localName(), PC_BondAnnotation)

PC_Element = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Element'), CTD_ANON_357, location=pyxb.utils.utility.Location('./pubchem.xsd', 3549, 0))
Namespace.addCategoryObject('elementBinding', PC_Element.name().localName(), PC_Element)

PC_BondType = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-BondType'), CTD_ANON_358, location=pyxb.utils.utility.Location('./pubchem.xsd', 3727, 0))
Namespace.addCategoryObject('elementBinding', PC_BondType.name().localName(), PC_BondType)



CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Date_str'), pyxb.binding.datatypes.string, scope=CTD_ANON, location=pyxb.utils.utility.Location('./pubchem.xsd', 93, 6)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Date_std'), CTD_ANON_, scope=CTD_ANON, location=pyxb.utils.utility.Location('./pubchem.xsd', 95, 6)))

def _BuildAutomaton ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Date_str')), pyxb.utils.utility.Location('./pubchem.xsd', 93, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Date_std')), pyxb.utils.utility.Location('./pubchem.xsd', 95, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON._Automaton = _BuildAutomaton()




CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Date-std'), CTD_ANON_2, scope=CTD_ANON_, location=pyxb.utils.utility.Location('./pubchem.xsd', 107, 0)))

def _BuildAutomaton_ ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_
    del _BuildAutomaton_
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Date-std')), pyxb.utils.utility.Location('./pubchem.xsd', 98, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_._Automaton = _BuildAutomaton_()




CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Date-std_year'), pyxb.binding.datatypes.integer, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('./pubchem.xsd', 111, 6)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Date-std_month'), pyxb.binding.datatypes.integer, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('./pubchem.xsd', 113, 6)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Date-std_day'), pyxb.binding.datatypes.integer, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('./pubchem.xsd', 115, 6)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Date-std_season'), pyxb.binding.datatypes.string, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('./pubchem.xsd', 117, 6)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Date-std_hour'), pyxb.binding.datatypes.integer, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('./pubchem.xsd', 119, 6)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Date-std_minute'), pyxb.binding.datatypes.integer, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('./pubchem.xsd', 121, 6)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Date-std_second'), pyxb.binding.datatypes.integer, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('./pubchem.xsd', 123, 6)))

def _BuildAutomaton_2 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_2
    del _BuildAutomaton_2
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 113, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 115, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 117, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 119, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 121, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 123, 6))
    counters.add(cc_5)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Date-std_year')), pyxb.utils.utility.Location('./pubchem.xsd', 111, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Date-std_month')), pyxb.utils.utility.Location('./pubchem.xsd', 113, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Date-std_day')), pyxb.utils.utility.Location('./pubchem.xsd', 115, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Date-std_season')), pyxb.utils.utility.Location('./pubchem.xsd', 117, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Date-std_hour')), pyxb.utils.utility.Location('./pubchem.xsd', 119, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Date-std_minute')), pyxb.utils.utility.Location('./pubchem.xsd', 121, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Date-std_second')), pyxb.utils.utility.Location('./pubchem.xsd', 123, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_2._Automaton = _BuildAutomaton_2()




CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Dbtag_db'), pyxb.binding.datatypes.string, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('./pubchem.xsd', 137, 6)))

CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Dbtag_tag'), CTD_ANON_4, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('./pubchem.xsd', 139, 6)))

def _BuildAutomaton_3 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_3
    del _BuildAutomaton_3
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Dbtag_db')), pyxb.utils.utility.Location('./pubchem.xsd', 137, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Dbtag_tag')), pyxb.utils.utility.Location('./pubchem.xsd', 139, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_3._Automaton = _BuildAutomaton_3()




CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Object-id'), CTD_ANON_5, scope=CTD_ANON_4, location=pyxb.utils.utility.Location('./pubchem.xsd', 154, 0)))

def _BuildAutomaton_4 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_4
    del _BuildAutomaton_4
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Object-id')), pyxb.utils.utility.Location('./pubchem.xsd', 142, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_4._Automaton = _BuildAutomaton_4()




CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Object-id_id'), pyxb.binding.datatypes.integer, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('./pubchem.xsd', 157, 6)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Object-id_str'), pyxb.binding.datatypes.string, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('./pubchem.xsd', 158, 6)))

def _BuildAutomaton_5 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_5
    del _BuildAutomaton_5
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Object-id_id')), pyxb.utils.utility.Location('./pubchem.xsd', 157, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Object-id_str')), pyxb.utils.utility.Location('./pubchem.xsd', 158, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_5._Automaton = _BuildAutomaton_5()




CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Person-id_dbtag'), CTD_ANON_7, scope=CTD_ANON_6, location=pyxb.utils.utility.Location('./pubchem.xsd', 171, 6)))

CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Person-id_name'), CTD_ANON_8, scope=CTD_ANON_6, location=pyxb.utils.utility.Location('./pubchem.xsd', 179, 6)))

CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Person-id_ml'), pyxb.binding.datatypes.string, scope=CTD_ANON_6, location=pyxb.utils.utility.Location('./pubchem.xsd', 190, 6)))

CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Person-id_str'), pyxb.binding.datatypes.string, scope=CTD_ANON_6, location=pyxb.utils.utility.Location('./pubchem.xsd', 192, 6)))

CTD_ANON_6._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Person-id_consortium'), pyxb.binding.datatypes.string, scope=CTD_ANON_6, location=pyxb.utils.utility.Location('./pubchem.xsd', 194, 6)))

def _BuildAutomaton_6 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_6
    del _BuildAutomaton_6
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Person-id_dbtag')), pyxb.utils.utility.Location('./pubchem.xsd', 171, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Person-id_name')), pyxb.utils.utility.Location('./pubchem.xsd', 179, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Person-id_ml')), pyxb.utils.utility.Location('./pubchem.xsd', 190, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Person-id_str')), pyxb.utils.utility.Location('./pubchem.xsd', 192, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_6._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Person-id_consortium')), pyxb.utils.utility.Location('./pubchem.xsd', 194, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_6._Automaton = _BuildAutomaton_6()




CTD_ANON_7._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Dbtag'), CTD_ANON_3, scope=CTD_ANON_7, location=pyxb.utils.utility.Location('./pubchem.xsd', 133, 0)))

def _BuildAutomaton_7 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_7
    del _BuildAutomaton_7
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_7._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Dbtag')), pyxb.utils.utility.Location('./pubchem.xsd', 174, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_7._Automaton = _BuildAutomaton_7()




CTD_ANON_8._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name-std'), CTD_ANON_9, scope=CTD_ANON_8, location=pyxb.utils.utility.Location('./pubchem.xsd', 200, 0)))

def _BuildAutomaton_8 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_8
    del _BuildAutomaton_8
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_8._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name-std')), pyxb.utils.utility.Location('./pubchem.xsd', 182, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_8._Automaton = _BuildAutomaton_8()




CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name-std_last'), pyxb.binding.datatypes.string, scope=CTD_ANON_9, location=pyxb.utils.utility.Location('./pubchem.xsd', 203, 6)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name-std_first'), pyxb.binding.datatypes.string, scope=CTD_ANON_9, location=pyxb.utils.utility.Location('./pubchem.xsd', 204, 6)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name-std_middle'), pyxb.binding.datatypes.string, scope=CTD_ANON_9, location=pyxb.utils.utility.Location('./pubchem.xsd', 205, 6)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name-std_full'), pyxb.binding.datatypes.string, scope=CTD_ANON_9, location=pyxb.utils.utility.Location('./pubchem.xsd', 207, 6)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name-std_initials'), pyxb.binding.datatypes.string, scope=CTD_ANON_9, location=pyxb.utils.utility.Location('./pubchem.xsd', 209, 6)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name-std_suffix'), pyxb.binding.datatypes.string, scope=CTD_ANON_9, location=pyxb.utils.utility.Location('./pubchem.xsd', 211, 6)))

CTD_ANON_9._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Name-std_title'), pyxb.binding.datatypes.string, scope=CTD_ANON_9, location=pyxb.utils.utility.Location('./pubchem.xsd', 213, 6)))

def _BuildAutomaton_9 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_9
    del _BuildAutomaton_9
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 204, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 205, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 207, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 209, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 211, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 213, 6))
    counters.add(cc_5)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name-std_last')), pyxb.utils.utility.Location('./pubchem.xsd', 203, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name-std_first')), pyxb.utils.utility.Location('./pubchem.xsd', 204, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name-std_middle')), pyxb.utils.utility.Location('./pubchem.xsd', 205, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name-std_full')), pyxb.utils.utility.Location('./pubchem.xsd', 207, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name-std_initials')), pyxb.utils.utility.Location('./pubchem.xsd', 209, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name-std_suffix')), pyxb.utils.utility.Location('./pubchem.xsd', 211, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_9._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Name-std_title')), pyxb.utils.utility.Location('./pubchem.xsd', 213, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_9._Automaton = _BuildAutomaton_9()




CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Int-fuzz_p-m'), pyxb.binding.datatypes.integer, scope=CTD_ANON_10, location=pyxb.utils.utility.Location('./pubchem.xsd', 227, 6)))

CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Int-fuzz_range'), CTD_ANON_11, scope=CTD_ANON_10, location=pyxb.utils.utility.Location('./pubchem.xsd', 228, 6)))

CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Int-fuzz_pct'), pyxb.binding.datatypes.integer, scope=CTD_ANON_10, location=pyxb.utils.utility.Location('./pubchem.xsd', 237, 6)))

CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Int-fuzz_lim'), CTD_ANON_327, scope=CTD_ANON_10, location=pyxb.utils.utility.Location('./pubchem.xsd', 238, 6)))

CTD_ANON_10._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Int-fuzz_alt'), CTD_ANON_12, scope=CTD_ANON_10, location=pyxb.utils.utility.Location('./pubchem.xsd', 265, 6)))

def _BuildAutomaton_10 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_10
    del _BuildAutomaton_10
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Int-fuzz_p-m')), pyxb.utils.utility.Location('./pubchem.xsd', 227, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Int-fuzz_range')), pyxb.utils.utility.Location('./pubchem.xsd', 228, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Int-fuzz_pct')), pyxb.utils.utility.Location('./pubchem.xsd', 237, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Int-fuzz_lim')), pyxb.utils.utility.Location('./pubchem.xsd', 238, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_10._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Int-fuzz_alt')), pyxb.utils.utility.Location('./pubchem.xsd', 265, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_10._Automaton = _BuildAutomaton_10()




CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Int-fuzz_range_max'), pyxb.binding.datatypes.integer, scope=CTD_ANON_11, location=pyxb.utils.utility.Location('./pubchem.xsd', 231, 12)))

CTD_ANON_11._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Int-fuzz_range_min'), pyxb.binding.datatypes.integer, scope=CTD_ANON_11, location=pyxb.utils.utility.Location('./pubchem.xsd', 232, 12)))

def _BuildAutomaton_11 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_11
    del _BuildAutomaton_11
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Int-fuzz_range_max')), pyxb.utils.utility.Location('./pubchem.xsd', 231, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_11._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Int-fuzz_range_min')), pyxb.utils.utility.Location('./pubchem.xsd', 232, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_11._Automaton = _BuildAutomaton_11()




CTD_ANON_12._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Int-fuzz_alt_E'), pyxb.binding.datatypes.integer, scope=CTD_ANON_12, location=pyxb.utils.utility.Location('./pubchem.xsd', 268, 12)))

def _BuildAutomaton_12 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_12
    del _BuildAutomaton_12
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 267, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_12._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Int-fuzz_alt_E')), pyxb.utils.utility.Location('./pubchem.xsd', 268, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_12._Automaton = _BuildAutomaton_12()




CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'User-object_class'), pyxb.binding.datatypes.string, scope=CTD_ANON_13, location=pyxb.utils.utility.Location('./pubchem.xsd', 286, 6)))

CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'User-object_type'), CTD_ANON_14, scope=CTD_ANON_13, location=pyxb.utils.utility.Location('./pubchem.xsd', 288, 6)))

CTD_ANON_13._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'User-object_data'), CTD_ANON_15, scope=CTD_ANON_13, location=pyxb.utils.utility.Location('./pubchem.xsd', 296, 6)))

def _BuildAutomaton_13 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_13
    del _BuildAutomaton_13
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 286, 6))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'User-object_class')), pyxb.utils.utility.Location('./pubchem.xsd', 286, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'User-object_type')), pyxb.utils.utility.Location('./pubchem.xsd', 288, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_13._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'User-object_data')), pyxb.utils.utility.Location('./pubchem.xsd', 296, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_13._Automaton = _BuildAutomaton_13()




CTD_ANON_14._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Object-id'), CTD_ANON_5, scope=CTD_ANON_14, location=pyxb.utils.utility.Location('./pubchem.xsd', 154, 0)))

def _BuildAutomaton_14 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_14
    del _BuildAutomaton_14
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_14._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Object-id')), pyxb.utils.utility.Location('./pubchem.xsd', 291, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_14._Automaton = _BuildAutomaton_14()




CTD_ANON_15._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'User-field'), CTD_ANON_16, scope=CTD_ANON_15, location=pyxb.utils.utility.Location('./pubchem.xsd', 307, 0)))

def _BuildAutomaton_15 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_15
    del _BuildAutomaton_15
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 298, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_15._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'User-field')), pyxb.utils.utility.Location('./pubchem.xsd', 299, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_15._Automaton = _BuildAutomaton_15()




CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'User-field_label'), CTD_ANON_17, scope=CTD_ANON_16, location=pyxb.utils.utility.Location('./pubchem.xsd', 311, 6)))

CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'User-field_num'), pyxb.binding.datatypes.integer, scope=CTD_ANON_16, location=pyxb.utils.utility.Location('./pubchem.xsd', 319, 6)))

CTD_ANON_16._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'User-field_data'), CTD_ANON_18, scope=CTD_ANON_16, location=pyxb.utils.utility.Location('./pubchem.xsd', 320, 6)))

def _BuildAutomaton_16 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_16
    del _BuildAutomaton_16
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 319, 6))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'User-field_label')), pyxb.utils.utility.Location('./pubchem.xsd', 311, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'User-field_num')), pyxb.utils.utility.Location('./pubchem.xsd', 319, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_16._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'User-field_data')), pyxb.utils.utility.Location('./pubchem.xsd', 320, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_16._Automaton = _BuildAutomaton_16()




CTD_ANON_17._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Object-id'), CTD_ANON_5, scope=CTD_ANON_17, location=pyxb.utils.utility.Location('./pubchem.xsd', 154, 0)))

def _BuildAutomaton_17 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_17
    del _BuildAutomaton_17
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_17._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Object-id')), pyxb.utils.utility.Location('./pubchem.xsd', 314, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_17._Automaton = _BuildAutomaton_17()




CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'User-field_data_str'), pyxb.binding.datatypes.string, scope=CTD_ANON_18, location=pyxb.utils.utility.Location('./pubchem.xsd', 323, 12)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'User-field_data_int'), pyxb.binding.datatypes.integer, scope=CTD_ANON_18, location=pyxb.utils.utility.Location('./pubchem.xsd', 324, 12)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'User-field_data_real'), pyxb.binding.datatypes.double, scope=CTD_ANON_18, location=pyxb.utils.utility.Location('./pubchem.xsd', 325, 12)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'User-field_data_bool'), CTD_ANON_328, scope=CTD_ANON_18, location=pyxb.utils.utility.Location('./pubchem.xsd', 326, 12)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'User-field_data_os'), pyxb.binding.datatypes.hexBinary, scope=CTD_ANON_18, location=pyxb.utils.utility.Location('./pubchem.xsd', 338, 12)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'User-field_data_object'), CTD_ANON_19, scope=CTD_ANON_18, location=pyxb.utils.utility.Location('./pubchem.xsd', 340, 12)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'User-field_data_strs'), CTD_ANON_20, scope=CTD_ANON_18, location=pyxb.utils.utility.Location('./pubchem.xsd', 347, 12)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'User-field_data_ints'), CTD_ANON_21, scope=CTD_ANON_18, location=pyxb.utils.utility.Location('./pubchem.xsd', 354, 12)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'User-field_data_reals'), CTD_ANON_22, scope=CTD_ANON_18, location=pyxb.utils.utility.Location('./pubchem.xsd', 361, 12)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'User-field_data_oss'), CTD_ANON_23, scope=CTD_ANON_18, location=pyxb.utils.utility.Location('./pubchem.xsd', 368, 12)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'User-field_data_fields'), CTD_ANON_24, scope=CTD_ANON_18, location=pyxb.utils.utility.Location('./pubchem.xsd', 375, 12)))

CTD_ANON_18._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'User-field_data_objects'), CTD_ANON_25, scope=CTD_ANON_18, location=pyxb.utils.utility.Location('./pubchem.xsd', 382, 12)))

def _BuildAutomaton_18 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_18
    del _BuildAutomaton_18
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'User-field_data_str')), pyxb.utils.utility.Location('./pubchem.xsd', 323, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'User-field_data_int')), pyxb.utils.utility.Location('./pubchem.xsd', 324, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'User-field_data_real')), pyxb.utils.utility.Location('./pubchem.xsd', 325, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'User-field_data_bool')), pyxb.utils.utility.Location('./pubchem.xsd', 326, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'User-field_data_os')), pyxb.utils.utility.Location('./pubchem.xsd', 338, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'User-field_data_object')), pyxb.utils.utility.Location('./pubchem.xsd', 340, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'User-field_data_strs')), pyxb.utils.utility.Location('./pubchem.xsd', 347, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'User-field_data_ints')), pyxb.utils.utility.Location('./pubchem.xsd', 354, 12))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'User-field_data_reals')), pyxb.utils.utility.Location('./pubchem.xsd', 361, 12))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'User-field_data_oss')), pyxb.utils.utility.Location('./pubchem.xsd', 368, 12))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'User-field_data_fields')), pyxb.utils.utility.Location('./pubchem.xsd', 375, 12))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_18._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'User-field_data_objects')), pyxb.utils.utility.Location('./pubchem.xsd', 382, 12))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    transitions = []
    st_9._set_transitionSet(transitions)
    transitions = []
    st_10._set_transitionSet(transitions)
    transitions = []
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_18._Automaton = _BuildAutomaton_18()




CTD_ANON_19._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'User-object'), CTD_ANON_13, scope=CTD_ANON_19, location=pyxb.utils.utility.Location('./pubchem.xsd', 282, 0)))

def _BuildAutomaton_19 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_19
    del _BuildAutomaton_19
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_19._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'User-object')), pyxb.utils.utility.Location('./pubchem.xsd', 343, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_19._Automaton = _BuildAutomaton_19()




CTD_ANON_20._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'User-field_data_strs_E'), pyxb.binding.datatypes.string, scope=CTD_ANON_20, location=pyxb.utils.utility.Location('./pubchem.xsd', 350, 18)))

def _BuildAutomaton_20 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_20
    del _BuildAutomaton_20
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 349, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_20._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'User-field_data_strs_E')), pyxb.utils.utility.Location('./pubchem.xsd', 350, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_20._Automaton = _BuildAutomaton_20()




CTD_ANON_21._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'User-field_data_ints_E'), pyxb.binding.datatypes.integer, scope=CTD_ANON_21, location=pyxb.utils.utility.Location('./pubchem.xsd', 357, 18)))

def _BuildAutomaton_21 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_21
    del _BuildAutomaton_21
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 356, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_21._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'User-field_data_ints_E')), pyxb.utils.utility.Location('./pubchem.xsd', 357, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_21._Automaton = _BuildAutomaton_21()




CTD_ANON_22._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'User-field_data_reals_E'), pyxb.binding.datatypes.double, scope=CTD_ANON_22, location=pyxb.utils.utility.Location('./pubchem.xsd', 364, 18)))

def _BuildAutomaton_22 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_22
    del _BuildAutomaton_22
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 363, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_22._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'User-field_data_reals_E')), pyxb.utils.utility.Location('./pubchem.xsd', 364, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_22._Automaton = _BuildAutomaton_22()




CTD_ANON_23._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'User-field_data_oss_E'), pyxb.binding.datatypes.hexBinary, scope=CTD_ANON_23, location=pyxb.utils.utility.Location('./pubchem.xsd', 371, 18)))

def _BuildAutomaton_23 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_23
    del _BuildAutomaton_23
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 370, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_23._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'User-field_data_oss_E')), pyxb.utils.utility.Location('./pubchem.xsd', 371, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_23._Automaton = _BuildAutomaton_23()




CTD_ANON_24._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'User-field'), CTD_ANON_16, scope=CTD_ANON_24, location=pyxb.utils.utility.Location('./pubchem.xsd', 307, 0)))

def _BuildAutomaton_24 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_24
    del _BuildAutomaton_24
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 377, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_24._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'User-field')), pyxb.utils.utility.Location('./pubchem.xsd', 378, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_24._Automaton = _BuildAutomaton_24()




CTD_ANON_25._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'User-object'), CTD_ANON_13, scope=CTD_ANON_25, location=pyxb.utils.utility.Location('./pubchem.xsd', 282, 0)))

def _BuildAutomaton_25 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_25
    del _BuildAutomaton_25
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 384, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_25._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'User-object')), pyxb.utils.utility.Location('./pubchem.xsd', 385, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_25._Automaton = _BuildAutomaton_25()




CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ArticleId_pubmed'), CTD_ANON_27, scope=CTD_ANON_26, location=pyxb.utils.utility.Location('./pubchem.xsd', 447, 6)))

CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ArticleId_medline'), CTD_ANON_28, scope=CTD_ANON_26, location=pyxb.utils.utility.Location('./pubchem.xsd', 454, 6)))

CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ArticleId_doi'), CTD_ANON_29, scope=CTD_ANON_26, location=pyxb.utils.utility.Location('./pubchem.xsd', 461, 6)))

CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ArticleId_pii'), CTD_ANON_30, scope=CTD_ANON_26, location=pyxb.utils.utility.Location('./pubchem.xsd', 468, 6)))

CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ArticleId_pmcid'), CTD_ANON_31, scope=CTD_ANON_26, location=pyxb.utils.utility.Location('./pubchem.xsd', 475, 6)))

CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ArticleId_pmcpid'), CTD_ANON_32, scope=CTD_ANON_26, location=pyxb.utils.utility.Location('./pubchem.xsd', 482, 6)))

CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ArticleId_pmpid'), CTD_ANON_33, scope=CTD_ANON_26, location=pyxb.utils.utility.Location('./pubchem.xsd', 489, 6)))

CTD_ANON_26._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ArticleId_other'), CTD_ANON_34, scope=CTD_ANON_26, location=pyxb.utils.utility.Location('./pubchem.xsd', 497, 6)))

def _BuildAutomaton_26 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_26
    del _BuildAutomaton_26
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ArticleId_pubmed')), pyxb.utils.utility.Location('./pubchem.xsd', 447, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ArticleId_medline')), pyxb.utils.utility.Location('./pubchem.xsd', 454, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ArticleId_doi')), pyxb.utils.utility.Location('./pubchem.xsd', 461, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ArticleId_pii')), pyxb.utils.utility.Location('./pubchem.xsd', 468, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ArticleId_pmcid')), pyxb.utils.utility.Location('./pubchem.xsd', 475, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ArticleId_pmcpid')), pyxb.utils.utility.Location('./pubchem.xsd', 482, 6))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ArticleId_pmpid')), pyxb.utils.utility.Location('./pubchem.xsd', 489, 6))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_26._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ArticleId_other')), pyxb.utils.utility.Location('./pubchem.xsd', 497, 6))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_26._Automaton = _BuildAutomaton_26()




CTD_ANON_27._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PubMedId'), pyxb.binding.datatypes.integer, scope=CTD_ANON_27, location=pyxb.utils.utility.Location('./pubchem.xsd', 509, 0)))

def _BuildAutomaton_27 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_27
    del _BuildAutomaton_27
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_27._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PubMedId')), pyxb.utils.utility.Location('./pubchem.xsd', 450, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_27._Automaton = _BuildAutomaton_27()




CTD_ANON_28._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MedlineUID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_28, location=pyxb.utils.utility.Location('./pubchem.xsd', 512, 0)))

def _BuildAutomaton_28 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_28
    del _BuildAutomaton_28
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_28._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MedlineUID')), pyxb.utils.utility.Location('./pubchem.xsd', 457, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_28._Automaton = _BuildAutomaton_28()




CTD_ANON_29._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DOI'), pyxb.binding.datatypes.string, scope=CTD_ANON_29, location=pyxb.utils.utility.Location('./pubchem.xsd', 515, 0)))

def _BuildAutomaton_29 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_29
    del _BuildAutomaton_29
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_29._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DOI')), pyxb.utils.utility.Location('./pubchem.xsd', 464, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_29._Automaton = _BuildAutomaton_29()




CTD_ANON_30._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PII'), pyxb.binding.datatypes.string, scope=CTD_ANON_30, location=pyxb.utils.utility.Location('./pubchem.xsd', 518, 0)))

def _BuildAutomaton_30 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_30
    del _BuildAutomaton_30
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_30._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PII')), pyxb.utils.utility.Location('./pubchem.xsd', 471, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_30._Automaton = _BuildAutomaton_30()




CTD_ANON_31._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PmcID'), pyxb.binding.datatypes.integer, scope=CTD_ANON_31, location=pyxb.utils.utility.Location('./pubchem.xsd', 521, 0)))

def _BuildAutomaton_31 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_31
    del _BuildAutomaton_31
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_31._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PmcID')), pyxb.utils.utility.Location('./pubchem.xsd', 478, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_31._Automaton = _BuildAutomaton_31()




CTD_ANON_32._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PmcPid'), pyxb.binding.datatypes.string, scope=CTD_ANON_32, location=pyxb.utils.utility.Location('./pubchem.xsd', 524, 0)))

def _BuildAutomaton_32 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_32
    del _BuildAutomaton_32
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_32._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PmcPid')), pyxb.utils.utility.Location('./pubchem.xsd', 485, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_32._Automaton = _BuildAutomaton_32()




CTD_ANON_33._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PmPid'), pyxb.binding.datatypes.string, scope=CTD_ANON_33, location=pyxb.utils.utility.Location('./pubchem.xsd', 527, 0)))

def _BuildAutomaton_33 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_33
    del _BuildAutomaton_33
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_33._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PmPid')), pyxb.utils.utility.Location('./pubchem.xsd', 492, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_33._Automaton = _BuildAutomaton_33()




CTD_ANON_34._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Dbtag'), CTD_ANON_3, scope=CTD_ANON_34, location=pyxb.utils.utility.Location('./pubchem.xsd', 133, 0)))

def _BuildAutomaton_34 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_34
    del _BuildAutomaton_34
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_34._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Dbtag')), pyxb.utils.utility.Location('./pubchem.xsd', 500, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_34._Automaton = _BuildAutomaton_34()




CTD_ANON_35._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ArticleId'), CTD_ANON_26, scope=CTD_ANON_35, location=pyxb.utils.utility.Location('./pubchem.xsd', 443, 0)))

def _BuildAutomaton_35 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_35
    del _BuildAutomaton_35
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 531, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_35._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ArticleId')), pyxb.utils.utility.Location('./pubchem.xsd', 532, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_35._Automaton = _BuildAutomaton_35()




CTD_ANON_36._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PubStatusDate_pubstatus'), CTD_ANON_37, scope=CTD_ANON_36, location=pyxb.utils.utility.Location('./pubchem.xsd', 587, 6)))

CTD_ANON_36._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PubStatusDate_date'), CTD_ANON_38, scope=CTD_ANON_36, location=pyxb.utils.utility.Location('./pubchem.xsd', 595, 6)))

def _BuildAutomaton_36 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_36
    del _BuildAutomaton_36
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PubStatusDate_pubstatus')), pyxb.utils.utility.Location('./pubchem.xsd', 587, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_36._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PubStatusDate_date')), pyxb.utils.utility.Location('./pubchem.xsd', 595, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_36._Automaton = _BuildAutomaton_36()




CTD_ANON_37._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PubStatus'), CTD_ANON_329, scope=CTD_ANON_37, location=pyxb.utils.utility.Location('./pubchem.xsd', 541, 0)))

def _BuildAutomaton_37 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_37
    del _BuildAutomaton_37
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_37._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PubStatus')), pyxb.utils.utility.Location('./pubchem.xsd', 590, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_37._Automaton = _BuildAutomaton_37()




CTD_ANON_38._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Date'), CTD_ANON, scope=CTD_ANON_38, location=pyxb.utils.utility.Location('./pubchem.xsd', 89, 0)))

def _BuildAutomaton_38 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_38
    del _BuildAutomaton_38
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_38._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Date')), pyxb.utils.utility.Location('./pubchem.xsd', 598, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_38._Automaton = _BuildAutomaton_38()




CTD_ANON_39._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PubStatusDate'), CTD_ANON_36, scope=CTD_ANON_39, location=pyxb.utils.utility.Location('./pubchem.xsd', 584, 0)))

def _BuildAutomaton_39 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_39
    del _BuildAutomaton_39
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 608, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_39._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PubStatusDate')), pyxb.utils.utility.Location('./pubchem.xsd', 609, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_39._Automaton = _BuildAutomaton_39()




CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-art_title'), CTD_ANON_41, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('./pubchem.xsd', 622, 6)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-art_authors'), CTD_ANON_42, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('./pubchem.xsd', 630, 6)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-art_from'), CTD_ANON_43, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('./pubchem.xsd', 637, 6)))

CTD_ANON_40._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-art_ids'), CTD_ANON_47, scope=CTD_ANON_40, location=pyxb.utils.utility.Location('./pubchem.xsd', 665, 6)))

def _BuildAutomaton_40 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_40
    del _BuildAutomaton_40
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 622, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 630, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 665, 6))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-art_title')), pyxb.utils.utility.Location('./pubchem.xsd', 622, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-art_authors')), pyxb.utils.utility.Location('./pubchem.xsd', 630, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-art_from')), pyxb.utils.utility.Location('./pubchem.xsd', 637, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_40._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-art_ids')), pyxb.utils.utility.Location('./pubchem.xsd', 665, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_40._Automaton = _BuildAutomaton_40()




CTD_ANON_41._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Title'), CTD_ANON_93, scope=CTD_ANON_41, location=pyxb.utils.utility.Location('./pubchem.xsd', 1162, 0)))

def _BuildAutomaton_41 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_41
    del _BuildAutomaton_41
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_41._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Title')), pyxb.utils.utility.Location('./pubchem.xsd', 625, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_41._Automaton = _BuildAutomaton_41()




CTD_ANON_42._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Auth-list'), CTD_ANON_82, scope=CTD_ANON_42, location=pyxb.utils.utility.Location('./pubchem.xsd', 1018, 0)))

def _BuildAutomaton_42 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_42
    del _BuildAutomaton_42
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_42._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Auth-list')), pyxb.utils.utility.Location('./pubchem.xsd', 633, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_42._Automaton = _BuildAutomaton_42()




CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-art_from_journal'), CTD_ANON_44, scope=CTD_ANON_43, location=pyxb.utils.utility.Location('./pubchem.xsd', 640, 12)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-art_from_book'), CTD_ANON_45, scope=CTD_ANON_43, location=pyxb.utils.utility.Location('./pubchem.xsd', 647, 12)))

CTD_ANON_43._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-art_from_proc'), CTD_ANON_46, scope=CTD_ANON_43, location=pyxb.utils.utility.Location('./pubchem.xsd', 654, 12)))

def _BuildAutomaton_43 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_43
    del _BuildAutomaton_43
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-art_from_journal')), pyxb.utils.utility.Location('./pubchem.xsd', 640, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-art_from_book')), pyxb.utils.utility.Location('./pubchem.xsd', 647, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_43._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-art_from_proc')), pyxb.utils.utility.Location('./pubchem.xsd', 654, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_43._Automaton = _BuildAutomaton_43()




CTD_ANON_44._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-jour'), CTD_ANON_48, scope=CTD_ANON_44, location=pyxb.utils.utility.Location('./pubchem.xsd', 677, 0)))

def _BuildAutomaton_44 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_44
    del _BuildAutomaton_44
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_44._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-jour')), pyxb.utils.utility.Location('./pubchem.xsd', 643, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_44._Automaton = _BuildAutomaton_44()




CTD_ANON_45._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-book'), CTD_ANON_51, scope=CTD_ANON_45, location=pyxb.utils.utility.Location('./pubchem.xsd', 700, 0)))

def _BuildAutomaton_45 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_45
    del _BuildAutomaton_45
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_45._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-book')), pyxb.utils.utility.Location('./pubchem.xsd', 650, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_45._Automaton = _BuildAutomaton_45()




CTD_ANON_46._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-proc'), CTD_ANON_56, scope=CTD_ANON_46, location=pyxb.utils.utility.Location('./pubchem.xsd', 739, 0)))

def _BuildAutomaton_46 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_46
    del _BuildAutomaton_46
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_46._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-proc')), pyxb.utils.utility.Location('./pubchem.xsd', 657, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_46._Automaton = _BuildAutomaton_46()




CTD_ANON_47._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ArticleIdSet'), CTD_ANON_35, scope=CTD_ANON_47, location=pyxb.utils.utility.Location('./pubchem.xsd', 529, 0)))

def _BuildAutomaton_47 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_47
    del _BuildAutomaton_47
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_47._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ArticleIdSet')), pyxb.utils.utility.Location('./pubchem.xsd', 668, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_47._Automaton = _BuildAutomaton_47()




CTD_ANON_48._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-jour_title'), CTD_ANON_49, scope=CTD_ANON_48, location=pyxb.utils.utility.Location('./pubchem.xsd', 681, 6)))

CTD_ANON_48._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-jour_imp'), CTD_ANON_50, scope=CTD_ANON_48, location=pyxb.utils.utility.Location('./pubchem.xsd', 688, 6)))

def _BuildAutomaton_48 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_48
    del _BuildAutomaton_48
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-jour_title')), pyxb.utils.utility.Location('./pubchem.xsd', 681, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_48._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-jour_imp')), pyxb.utils.utility.Location('./pubchem.xsd', 688, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_48._Automaton = _BuildAutomaton_48()




CTD_ANON_49._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Title'), CTD_ANON_93, scope=CTD_ANON_49, location=pyxb.utils.utility.Location('./pubchem.xsd', 1162, 0)))

def _BuildAutomaton_49 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_49
    del _BuildAutomaton_49
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_49._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Title')), pyxb.utils.utility.Location('./pubchem.xsd', 684, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_49._Automaton = _BuildAutomaton_49()




CTD_ANON_50._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Imprint'), CTD_ANON_95, scope=CTD_ANON_50, location=pyxb.utils.utility.Location('./pubchem.xsd', 1196, 0)))

def _BuildAutomaton_50 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_50
    del _BuildAutomaton_50
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_50._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Imprint')), pyxb.utils.utility.Location('./pubchem.xsd', 691, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_50._Automaton = _BuildAutomaton_50()




CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-book_title'), CTD_ANON_52, scope=CTD_ANON_51, location=pyxb.utils.utility.Location('./pubchem.xsd', 704, 6)))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-book_coll'), CTD_ANON_53, scope=CTD_ANON_51, location=pyxb.utils.utility.Location('./pubchem.xsd', 712, 6)))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-book_authors'), CTD_ANON_54, scope=CTD_ANON_51, location=pyxb.utils.utility.Location('./pubchem.xsd', 720, 6)))

CTD_ANON_51._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-book_imp'), CTD_ANON_55, scope=CTD_ANON_51, location=pyxb.utils.utility.Location('./pubchem.xsd', 727, 6)))

def _BuildAutomaton_51 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_51
    del _BuildAutomaton_51
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 712, 6))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-book_title')), pyxb.utils.utility.Location('./pubchem.xsd', 704, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-book_coll')), pyxb.utils.utility.Location('./pubchem.xsd', 712, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-book_authors')), pyxb.utils.utility.Location('./pubchem.xsd', 720, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_51._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-book_imp')), pyxb.utils.utility.Location('./pubchem.xsd', 727, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_51._Automaton = _BuildAutomaton_51()




CTD_ANON_52._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Title'), CTD_ANON_93, scope=CTD_ANON_52, location=pyxb.utils.utility.Location('./pubchem.xsd', 1162, 0)))

def _BuildAutomaton_52 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_52
    del _BuildAutomaton_52
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_52._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Title')), pyxb.utils.utility.Location('./pubchem.xsd', 707, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_52._Automaton = _BuildAutomaton_52()




CTD_ANON_53._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Title'), CTD_ANON_93, scope=CTD_ANON_53, location=pyxb.utils.utility.Location('./pubchem.xsd', 1162, 0)))

def _BuildAutomaton_53 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_53
    del _BuildAutomaton_53
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_53._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Title')), pyxb.utils.utility.Location('./pubchem.xsd', 715, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_53._Automaton = _BuildAutomaton_53()




CTD_ANON_54._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Auth-list'), CTD_ANON_82, scope=CTD_ANON_54, location=pyxb.utils.utility.Location('./pubchem.xsd', 1018, 0)))

def _BuildAutomaton_54 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_54
    del _BuildAutomaton_54
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_54._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Auth-list')), pyxb.utils.utility.Location('./pubchem.xsd', 723, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_54._Automaton = _BuildAutomaton_54()




CTD_ANON_55._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Imprint'), CTD_ANON_95, scope=CTD_ANON_55, location=pyxb.utils.utility.Location('./pubchem.xsd', 1196, 0)))

def _BuildAutomaton_55 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_55
    del _BuildAutomaton_55
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_55._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Imprint')), pyxb.utils.utility.Location('./pubchem.xsd', 730, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_55._Automaton = _BuildAutomaton_55()




CTD_ANON_56._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-proc_book'), CTD_ANON_57, scope=CTD_ANON_56, location=pyxb.utils.utility.Location('./pubchem.xsd', 743, 6)))

CTD_ANON_56._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-proc_meet'), CTD_ANON_58, scope=CTD_ANON_56, location=pyxb.utils.utility.Location('./pubchem.xsd', 751, 6)))

def _BuildAutomaton_56 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_56
    del _BuildAutomaton_56
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-proc_book')), pyxb.utils.utility.Location('./pubchem.xsd', 743, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_56._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-proc_meet')), pyxb.utils.utility.Location('./pubchem.xsd', 751, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_56._Automaton = _BuildAutomaton_56()




CTD_ANON_57._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-book'), CTD_ANON_51, scope=CTD_ANON_57, location=pyxb.utils.utility.Location('./pubchem.xsd', 700, 0)))

def _BuildAutomaton_57 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_57
    del _BuildAutomaton_57
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_57._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-book')), pyxb.utils.utility.Location('./pubchem.xsd', 746, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_57._Automaton = _BuildAutomaton_57()




CTD_ANON_58._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Meeting'), CTD_ANON_103, scope=CTD_ANON_58, location=pyxb.utils.utility.Location('./pubchem.xsd', 1307, 0)))

def _BuildAutomaton_58 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_58
    del _BuildAutomaton_58
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_58._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Meeting')), pyxb.utils.utility.Location('./pubchem.xsd', 754, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_58._Automaton = _BuildAutomaton_58()




CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-pat_title'), pyxb.binding.datatypes.string, scope=CTD_ANON_59, location=pyxb.utils.utility.Location('./pubchem.xsd', 772, 6)))

CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-pat_authors'), CTD_ANON_60, scope=CTD_ANON_59, location=pyxb.utils.utility.Location('./pubchem.xsd', 774, 6)))

CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-pat_country'), pyxb.binding.datatypes.string, scope=CTD_ANON_59, location=pyxb.utils.utility.Location('./pubchem.xsd', 782, 6)))

CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-pat_doc-type'), pyxb.binding.datatypes.string, scope=CTD_ANON_59, location=pyxb.utils.utility.Location('./pubchem.xsd', 784, 6)))

CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-pat_number'), pyxb.binding.datatypes.string, scope=CTD_ANON_59, location=pyxb.utils.utility.Location('./pubchem.xsd', 786, 6)))

CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-pat_date-issue'), CTD_ANON_61, scope=CTD_ANON_59, location=pyxb.utils.utility.Location('./pubchem.xsd', 788, 6)))

CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-pat_class'), CTD_ANON_62, scope=CTD_ANON_59, location=pyxb.utils.utility.Location('./pubchem.xsd', 796, 6)))

CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-pat_app-number'), pyxb.binding.datatypes.string, scope=CTD_ANON_59, location=pyxb.utils.utility.Location('./pubchem.xsd', 804, 6)))

CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-pat_app-date'), CTD_ANON_63, scope=CTD_ANON_59, location=pyxb.utils.utility.Location('./pubchem.xsd', 806, 6)))

CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-pat_applicants'), CTD_ANON_64, scope=CTD_ANON_59, location=pyxb.utils.utility.Location('./pubchem.xsd', 814, 6)))

CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-pat_assignees'), CTD_ANON_65, scope=CTD_ANON_59, location=pyxb.utils.utility.Location('./pubchem.xsd', 822, 6)))

CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-pat_priority'), CTD_ANON_66, scope=CTD_ANON_59, location=pyxb.utils.utility.Location('./pubchem.xsd', 830, 6)))

CTD_ANON_59._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-pat_abstract'), pyxb.binding.datatypes.string, scope=CTD_ANON_59, location=pyxb.utils.utility.Location('./pubchem.xsd', 838, 6)))

def _BuildAutomaton_59 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_59
    del _BuildAutomaton_59
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 786, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 788, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 796, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 804, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 806, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 814, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 822, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 830, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 838, 6))
    counters.add(cc_8)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-pat_title')), pyxb.utils.utility.Location('./pubchem.xsd', 772, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-pat_authors')), pyxb.utils.utility.Location('./pubchem.xsd', 774, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-pat_country')), pyxb.utils.utility.Location('./pubchem.xsd', 782, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-pat_doc-type')), pyxb.utils.utility.Location('./pubchem.xsd', 784, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-pat_number')), pyxb.utils.utility.Location('./pubchem.xsd', 786, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-pat_date-issue')), pyxb.utils.utility.Location('./pubchem.xsd', 788, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-pat_class')), pyxb.utils.utility.Location('./pubchem.xsd', 796, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-pat_app-number')), pyxb.utils.utility.Location('./pubchem.xsd', 804, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-pat_app-date')), pyxb.utils.utility.Location('./pubchem.xsd', 806, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-pat_applicants')), pyxb.utils.utility.Location('./pubchem.xsd', 814, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-pat_assignees')), pyxb.utils.utility.Location('./pubchem.xsd', 822, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-pat_priority')), pyxb.utils.utility.Location('./pubchem.xsd', 830, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_59._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-pat_abstract')), pyxb.utils.utility.Location('./pubchem.xsd', 838, 6))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_12._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_59._Automaton = _BuildAutomaton_59()




CTD_ANON_60._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Auth-list'), CTD_ANON_82, scope=CTD_ANON_60, location=pyxb.utils.utility.Location('./pubchem.xsd', 1018, 0)))

def _BuildAutomaton_60 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_60
    del _BuildAutomaton_60
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_60._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Auth-list')), pyxb.utils.utility.Location('./pubchem.xsd', 777, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_60._Automaton = _BuildAutomaton_60()




CTD_ANON_61._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Date'), CTD_ANON, scope=CTD_ANON_61, location=pyxb.utils.utility.Location('./pubchem.xsd', 89, 0)))

def _BuildAutomaton_61 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_61
    del _BuildAutomaton_61
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_61._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Date')), pyxb.utils.utility.Location('./pubchem.xsd', 791, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_61._Automaton = _BuildAutomaton_61()




CTD_ANON_62._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-pat_class_E'), pyxb.binding.datatypes.string, scope=CTD_ANON_62, location=pyxb.utils.utility.Location('./pubchem.xsd', 799, 12)))

def _BuildAutomaton_62 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_62
    del _BuildAutomaton_62
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 798, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_62._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-pat_class_E')), pyxb.utils.utility.Location('./pubchem.xsd', 799, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_62._Automaton = _BuildAutomaton_62()




CTD_ANON_63._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Date'), CTD_ANON, scope=CTD_ANON_63, location=pyxb.utils.utility.Location('./pubchem.xsd', 89, 0)))

def _BuildAutomaton_63 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_63
    del _BuildAutomaton_63
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_63._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Date')), pyxb.utils.utility.Location('./pubchem.xsd', 809, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_63._Automaton = _BuildAutomaton_63()




CTD_ANON_64._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Auth-list'), CTD_ANON_82, scope=CTD_ANON_64, location=pyxb.utils.utility.Location('./pubchem.xsd', 1018, 0)))

def _BuildAutomaton_64 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_64
    del _BuildAutomaton_64
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_64._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Auth-list')), pyxb.utils.utility.Location('./pubchem.xsd', 817, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_64._Automaton = _BuildAutomaton_64()




CTD_ANON_65._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Auth-list'), CTD_ANON_82, scope=CTD_ANON_65, location=pyxb.utils.utility.Location('./pubchem.xsd', 1018, 0)))

def _BuildAutomaton_65 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_65
    del _BuildAutomaton_65
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_65._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Auth-list')), pyxb.utils.utility.Location('./pubchem.xsd', 825, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_65._Automaton = _BuildAutomaton_65()




CTD_ANON_66._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Patent-priority'), CTD_ANON_67, scope=CTD_ANON_66, location=pyxb.utils.utility.Location('./pubchem.xsd', 843, 0)))

def _BuildAutomaton_66 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_66
    del _BuildAutomaton_66
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 832, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_66._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Patent-priority')), pyxb.utils.utility.Location('./pubchem.xsd', 833, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_66._Automaton = _BuildAutomaton_66()




CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Patent-priority_country'), pyxb.binding.datatypes.string, scope=CTD_ANON_67, location=pyxb.utils.utility.Location('./pubchem.xsd', 847, 6)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Patent-priority_number'), pyxb.binding.datatypes.string, scope=CTD_ANON_67, location=pyxb.utils.utility.Location('./pubchem.xsd', 849, 6)))

CTD_ANON_67._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Patent-priority_date'), CTD_ANON_68, scope=CTD_ANON_67, location=pyxb.utils.utility.Location('./pubchem.xsd', 851, 6)))

def _BuildAutomaton_67 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_67
    del _BuildAutomaton_67
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Patent-priority_country')), pyxb.utils.utility.Location('./pubchem.xsd', 847, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Patent-priority_number')), pyxb.utils.utility.Location('./pubchem.xsd', 849, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_67._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Patent-priority_date')), pyxb.utils.utility.Location('./pubchem.xsd', 851, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_67._Automaton = _BuildAutomaton_67()




CTD_ANON_68._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Date'), CTD_ANON, scope=CTD_ANON_68, location=pyxb.utils.utility.Location('./pubchem.xsd', 89, 0)))

def _BuildAutomaton_68 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_68
    del _BuildAutomaton_68
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_68._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Date')), pyxb.utils.utility.Location('./pubchem.xsd', 854, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_68._Automaton = _BuildAutomaton_68()




CTD_ANON_69._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Id-pat_country'), pyxb.binding.datatypes.string, scope=CTD_ANON_69, location=pyxb.utils.utility.Location('./pubchem.xsd', 867, 6)))

CTD_ANON_69._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Id-pat_id'), CTD_ANON_70, scope=CTD_ANON_69, location=pyxb.utils.utility.Location('./pubchem.xsd', 868, 6)))

CTD_ANON_69._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Id-pat_doc-type'), pyxb.binding.datatypes.string, scope=CTD_ANON_69, location=pyxb.utils.utility.Location('./pubchem.xsd', 879, 6)))

def _BuildAutomaton_69 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_69
    del _BuildAutomaton_69
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 879, 6))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_69._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Id-pat_country')), pyxb.utils.utility.Location('./pubchem.xsd', 867, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_69._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Id-pat_id')), pyxb.utils.utility.Location('./pubchem.xsd', 868, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_69._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Id-pat_doc-type')), pyxb.utils.utility.Location('./pubchem.xsd', 879, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_69._Automaton = _BuildAutomaton_69()




CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Id-pat_id_number'), pyxb.binding.datatypes.string, scope=CTD_ANON_70, location=pyxb.utils.utility.Location('./pubchem.xsd', 872, 12)))

CTD_ANON_70._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Id-pat_id_app-number'), pyxb.binding.datatypes.string, scope=CTD_ANON_70, location=pyxb.utils.utility.Location('./pubchem.xsd', 874, 12)))

def _BuildAutomaton_70 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_70
    del _BuildAutomaton_70
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Id-pat_id_number')), pyxb.utils.utility.Location('./pubchem.xsd', 872, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_70._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Id-pat_id_app-number')), pyxb.utils.utility.Location('./pubchem.xsd', 874, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_70._Automaton = _BuildAutomaton_70()




CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-let_cit'), CTD_ANON_72, scope=CTD_ANON_71, location=pyxb.utils.utility.Location('./pubchem.xsd', 889, 6)))

CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-let_man-id'), pyxb.binding.datatypes.string, scope=CTD_ANON_71, location=pyxb.utils.utility.Location('./pubchem.xsd', 897, 6)))

CTD_ANON_71._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-let_type'), CTD_ANON_330, scope=CTD_ANON_71, location=pyxb.utils.utility.Location('./pubchem.xsd', 898, 6)))

def _BuildAutomaton_71 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_71
    del _BuildAutomaton_71
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 897, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 898, 6))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-let_cit')), pyxb.utils.utility.Location('./pubchem.xsd', 889, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-let_man-id')), pyxb.utils.utility.Location('./pubchem.xsd', 897, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_71._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-let_type')), pyxb.utils.utility.Location('./pubchem.xsd', 898, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_71._Automaton = _BuildAutomaton_71()




CTD_ANON_72._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-book'), CTD_ANON_51, scope=CTD_ANON_72, location=pyxb.utils.utility.Location('./pubchem.xsd', 700, 0)))

def _BuildAutomaton_72 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_72
    del _BuildAutomaton_72
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_72._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-book')), pyxb.utils.utility.Location('./pubchem.xsd', 892, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_72._Automaton = _BuildAutomaton_72()




CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-sub_authors'), CTD_ANON_74, scope=CTD_ANON_73, location=pyxb.utils.utility.Location('./pubchem.xsd', 925, 6)))

CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-sub_imp'), CTD_ANON_75, scope=CTD_ANON_73, location=pyxb.utils.utility.Location('./pubchem.xsd', 933, 6)))

CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-sub_medium'), CTD_ANON_331, scope=CTD_ANON_73, location=pyxb.utils.utility.Location('./pubchem.xsd', 940, 6)))

CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-sub_date'), CTD_ANON_76, scope=CTD_ANON_73, location=pyxb.utils.utility.Location('./pubchem.xsd', 956, 6)))

CTD_ANON_73._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-sub_descr'), pyxb.binding.datatypes.string, scope=CTD_ANON_73, location=pyxb.utils.utility.Location('./pubchem.xsd', 964, 6)))

def _BuildAutomaton_73 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_73
    del _BuildAutomaton_73
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 933, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 940, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 956, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 964, 6))
    counters.add(cc_3)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-sub_authors')), pyxb.utils.utility.Location('./pubchem.xsd', 925, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-sub_imp')), pyxb.utils.utility.Location('./pubchem.xsd', 933, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-sub_medium')), pyxb.utils.utility.Location('./pubchem.xsd', 940, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-sub_date')), pyxb.utils.utility.Location('./pubchem.xsd', 956, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_73._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-sub_descr')), pyxb.utils.utility.Location('./pubchem.xsd', 964, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_73._Automaton = _BuildAutomaton_73()




CTD_ANON_74._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Auth-list'), CTD_ANON_82, scope=CTD_ANON_74, location=pyxb.utils.utility.Location('./pubchem.xsd', 1018, 0)))

def _BuildAutomaton_74 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_74
    del _BuildAutomaton_74
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_74._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Auth-list')), pyxb.utils.utility.Location('./pubchem.xsd', 928, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_74._Automaton = _BuildAutomaton_74()




CTD_ANON_75._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Imprint'), CTD_ANON_95, scope=CTD_ANON_75, location=pyxb.utils.utility.Location('./pubchem.xsd', 1196, 0)))

def _BuildAutomaton_75 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_75
    del _BuildAutomaton_75
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_75._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Imprint')), pyxb.utils.utility.Location('./pubchem.xsd', 936, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_75._Automaton = _BuildAutomaton_75()




CTD_ANON_76._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Date'), CTD_ANON, scope=CTD_ANON_76, location=pyxb.utils.utility.Location('./pubchem.xsd', 89, 0)))

def _BuildAutomaton_76 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_76
    del _BuildAutomaton_76
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_76._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Date')), pyxb.utils.utility.Location('./pubchem.xsd', 959, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_76._Automaton = _BuildAutomaton_76()




CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-gen_cit'), pyxb.binding.datatypes.string, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('./pubchem.xsd', 974, 6)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-gen_authors'), CTD_ANON_78, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('./pubchem.xsd', 975, 6)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-gen_muid'), pyxb.binding.datatypes.integer, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('./pubchem.xsd', 983, 6)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-gen_journal'), CTD_ANON_79, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('./pubchem.xsd', 984, 6)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-gen_volume'), pyxb.binding.datatypes.string, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('./pubchem.xsd', 991, 6)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-gen_issue'), pyxb.binding.datatypes.string, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('./pubchem.xsd', 992, 6)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-gen_pages'), pyxb.binding.datatypes.string, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('./pubchem.xsd', 993, 6)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-gen_date'), CTD_ANON_80, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('./pubchem.xsd', 994, 6)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-gen_serial-number'), pyxb.binding.datatypes.integer, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('./pubchem.xsd', 1002, 6)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-gen_title'), pyxb.binding.datatypes.string, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('./pubchem.xsd', 1004, 6)))

CTD_ANON_77._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-gen_pmid'), CTD_ANON_81, scope=CTD_ANON_77, location=pyxb.utils.utility.Location('./pubchem.xsd', 1006, 6)))

def _BuildAutomaton_77 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_77
    del _BuildAutomaton_77
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 974, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 975, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 983, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 984, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 991, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 992, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 993, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 994, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1002, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1004, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1006, 6))
    counters.add(cc_10)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-gen_cit')), pyxb.utils.utility.Location('./pubchem.xsd', 974, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-gen_authors')), pyxb.utils.utility.Location('./pubchem.xsd', 975, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-gen_muid')), pyxb.utils.utility.Location('./pubchem.xsd', 983, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-gen_journal')), pyxb.utils.utility.Location('./pubchem.xsd', 984, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-gen_volume')), pyxb.utils.utility.Location('./pubchem.xsd', 991, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-gen_issue')), pyxb.utils.utility.Location('./pubchem.xsd', 992, 6))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-gen_pages')), pyxb.utils.utility.Location('./pubchem.xsd', 993, 6))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-gen_date')), pyxb.utils.utility.Location('./pubchem.xsd', 994, 6))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-gen_serial-number')), pyxb.utils.utility.Location('./pubchem.xsd', 1002, 6))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-gen_title')), pyxb.utils.utility.Location('./pubchem.xsd', 1004, 6))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_77._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-gen_pmid')), pyxb.utils.utility.Location('./pubchem.xsd', 1006, 6))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_77._Automaton = _BuildAutomaton_77()




CTD_ANON_78._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Auth-list'), CTD_ANON_82, scope=CTD_ANON_78, location=pyxb.utils.utility.Location('./pubchem.xsd', 1018, 0)))

def _BuildAutomaton_78 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_78
    del _BuildAutomaton_78
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_78._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Auth-list')), pyxb.utils.utility.Location('./pubchem.xsd', 978, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_78._Automaton = _BuildAutomaton_78()




CTD_ANON_79._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Title'), CTD_ANON_93, scope=CTD_ANON_79, location=pyxb.utils.utility.Location('./pubchem.xsd', 1162, 0)))

def _BuildAutomaton_79 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_79
    del _BuildAutomaton_79
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_79._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Title')), pyxb.utils.utility.Location('./pubchem.xsd', 987, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_79._Automaton = _BuildAutomaton_79()




CTD_ANON_80._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Date'), CTD_ANON, scope=CTD_ANON_80, location=pyxb.utils.utility.Location('./pubchem.xsd', 89, 0)))

def _BuildAutomaton_80 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_80
    del _BuildAutomaton_80
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_80._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Date')), pyxb.utils.utility.Location('./pubchem.xsd', 997, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_80._Automaton = _BuildAutomaton_80()




CTD_ANON_81._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PubMedId'), pyxb.binding.datatypes.integer, scope=CTD_ANON_81, location=pyxb.utils.utility.Location('./pubchem.xsd', 509, 0)))

def _BuildAutomaton_81 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_81
    del _BuildAutomaton_81
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_81._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PubMedId')), pyxb.utils.utility.Location('./pubchem.xsd', 1009, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_81._Automaton = _BuildAutomaton_81()




CTD_ANON_82._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Auth-list_names'), CTD_ANON_83, scope=CTD_ANON_82, location=pyxb.utils.utility.Location('./pubchem.xsd', 1021, 6)))

CTD_ANON_82._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Auth-list_affil'), CTD_ANON_87, scope=CTD_ANON_82, location=pyxb.utils.utility.Location('./pubchem.xsd', 1052, 6)))

def _BuildAutomaton_82 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_82
    del _BuildAutomaton_82
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1052, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Auth-list_names')), pyxb.utils.utility.Location('./pubchem.xsd', 1021, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_82._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Auth-list_affil')), pyxb.utils.utility.Location('./pubchem.xsd', 1052, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_82._Automaton = _BuildAutomaton_82()




CTD_ANON_83._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Auth-list_names_std'), CTD_ANON_84, scope=CTD_ANON_83, location=pyxb.utils.utility.Location('./pubchem.xsd', 1025, 12)))

CTD_ANON_83._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Auth-list_names_ml'), CTD_ANON_85, scope=CTD_ANON_83, location=pyxb.utils.utility.Location('./pubchem.xsd', 1033, 12)))

CTD_ANON_83._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Auth-list_names_str'), CTD_ANON_86, scope=CTD_ANON_83, location=pyxb.utils.utility.Location('./pubchem.xsd', 1041, 12)))

def _BuildAutomaton_83 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_83
    del _BuildAutomaton_83
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_83._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Auth-list_names_std')), pyxb.utils.utility.Location('./pubchem.xsd', 1025, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_83._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Auth-list_names_ml')), pyxb.utils.utility.Location('./pubchem.xsd', 1033, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_83._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Auth-list_names_str')), pyxb.utils.utility.Location('./pubchem.xsd', 1041, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_83._Automaton = _BuildAutomaton_83()




CTD_ANON_84._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Author'), CTD_ANON_88, scope=CTD_ANON_84, location=pyxb.utils.utility.Location('./pubchem.xsd', 1063, 0)))

def _BuildAutomaton_84 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_84
    del _BuildAutomaton_84
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1027, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_84._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Author')), pyxb.utils.utility.Location('./pubchem.xsd', 1028, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_84._Automaton = _BuildAutomaton_84()




CTD_ANON_85._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Auth-list_names_ml_E'), pyxb.binding.datatypes.string, scope=CTD_ANON_85, location=pyxb.utils.utility.Location('./pubchem.xsd', 1036, 18)))

def _BuildAutomaton_85 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_85
    del _BuildAutomaton_85
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1035, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_85._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Auth-list_names_ml_E')), pyxb.utils.utility.Location('./pubchem.xsd', 1036, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_85._Automaton = _BuildAutomaton_85()




CTD_ANON_86._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Auth-list_names_str_E'), pyxb.binding.datatypes.string, scope=CTD_ANON_86, location=pyxb.utils.utility.Location('./pubchem.xsd', 1044, 18)))

def _BuildAutomaton_86 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_86
    del _BuildAutomaton_86
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1043, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_86._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Auth-list_names_str_E')), pyxb.utils.utility.Location('./pubchem.xsd', 1044, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_86._Automaton = _BuildAutomaton_86()




CTD_ANON_87._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Affil'), CTD_ANON_91, scope=CTD_ANON_87, location=pyxb.utils.utility.Location('./pubchem.xsd', 1124, 0)))

def _BuildAutomaton_87 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_87
    del _BuildAutomaton_87
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_87._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Affil')), pyxb.utils.utility.Location('./pubchem.xsd', 1055, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_87._Automaton = _BuildAutomaton_87()




CTD_ANON_88._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Author_name'), CTD_ANON_89, scope=CTD_ANON_88, location=pyxb.utils.utility.Location('./pubchem.xsd', 1067, 6)))

CTD_ANON_88._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Author_level'), CTD_ANON_332, scope=CTD_ANON_88, location=pyxb.utils.utility.Location('./pubchem.xsd', 1074, 6)))

CTD_ANON_88._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Author_role'), CTD_ANON_333, scope=CTD_ANON_88, location=pyxb.utils.utility.Location('./pubchem.xsd', 1086, 6)))

CTD_ANON_88._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Author_affil'), CTD_ANON_90, scope=CTD_ANON_88, location=pyxb.utils.utility.Location('./pubchem.xsd', 1100, 6)))

CTD_ANON_88._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Author_is-corr'), CTD_ANON_334, scope=CTD_ANON_88, location=pyxb.utils.utility.Location('./pubchem.xsd', 1108, 6)))

def _BuildAutomaton_88 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_88
    del _BuildAutomaton_88
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1074, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1086, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1100, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1108, 6))
    counters.add(cc_3)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_88._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Author_name')), pyxb.utils.utility.Location('./pubchem.xsd', 1067, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_88._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Author_level')), pyxb.utils.utility.Location('./pubchem.xsd', 1074, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_88._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Author_role')), pyxb.utils.utility.Location('./pubchem.xsd', 1086, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_88._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Author_affil')), pyxb.utils.utility.Location('./pubchem.xsd', 1100, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_88._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Author_is-corr')), pyxb.utils.utility.Location('./pubchem.xsd', 1108, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_88._Automaton = _BuildAutomaton_88()




CTD_ANON_89._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Person-id'), CTD_ANON_6, scope=CTD_ANON_89, location=pyxb.utils.utility.Location('./pubchem.xsd', 167, 0)))

def _BuildAutomaton_89 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_89
    del _BuildAutomaton_89
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_89._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Person-id')), pyxb.utils.utility.Location('./pubchem.xsd', 1070, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_89._Automaton = _BuildAutomaton_89()




CTD_ANON_90._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Affil'), CTD_ANON_91, scope=CTD_ANON_90, location=pyxb.utils.utility.Location('./pubchem.xsd', 1124, 0)))

def _BuildAutomaton_90 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_90
    del _BuildAutomaton_90
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_90._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Affil')), pyxb.utils.utility.Location('./pubchem.xsd', 1103, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_90._Automaton = _BuildAutomaton_90()




CTD_ANON_91._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Affil_str'), pyxb.binding.datatypes.string, scope=CTD_ANON_91, location=pyxb.utils.utility.Location('./pubchem.xsd', 1128, 6)))

CTD_ANON_91._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Affil_std'), CTD_ANON_92, scope=CTD_ANON_91, location=pyxb.utils.utility.Location('./pubchem.xsd', 1129, 6)))

def _BuildAutomaton_91 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_91
    del _BuildAutomaton_91
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_91._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Affil_str')), pyxb.utils.utility.Location('./pubchem.xsd', 1128, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_91._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Affil_std')), pyxb.utils.utility.Location('./pubchem.xsd', 1129, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_91._Automaton = _BuildAutomaton_91()




CTD_ANON_92._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Affil_std_affil'), pyxb.binding.datatypes.string, scope=CTD_ANON_92, location=pyxb.utils.utility.Location('./pubchem.xsd', 1133, 12)))

CTD_ANON_92._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Affil_std_div'), pyxb.binding.datatypes.string, scope=CTD_ANON_92, location=pyxb.utils.utility.Location('./pubchem.xsd', 1135, 12)))

CTD_ANON_92._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Affil_std_city'), pyxb.binding.datatypes.string, scope=CTD_ANON_92, location=pyxb.utils.utility.Location('./pubchem.xsd', 1137, 12)))

CTD_ANON_92._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Affil_std_sub'), pyxb.binding.datatypes.string, scope=CTD_ANON_92, location=pyxb.utils.utility.Location('./pubchem.xsd', 1139, 12)))

CTD_ANON_92._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Affil_std_country'), pyxb.binding.datatypes.string, scope=CTD_ANON_92, location=pyxb.utils.utility.Location('./pubchem.xsd', 1141, 12)))

CTD_ANON_92._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Affil_std_street'), pyxb.binding.datatypes.string, scope=CTD_ANON_92, location=pyxb.utils.utility.Location('./pubchem.xsd', 1143, 12)))

CTD_ANON_92._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Affil_std_email'), pyxb.binding.datatypes.string, scope=CTD_ANON_92, location=pyxb.utils.utility.Location('./pubchem.xsd', 1144, 12)))

CTD_ANON_92._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Affil_std_fax'), pyxb.binding.datatypes.string, scope=CTD_ANON_92, location=pyxb.utils.utility.Location('./pubchem.xsd', 1145, 12)))

CTD_ANON_92._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Affil_std_phone'), pyxb.binding.datatypes.string, scope=CTD_ANON_92, location=pyxb.utils.utility.Location('./pubchem.xsd', 1146, 12)))

CTD_ANON_92._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Affil_std_postal-code'), pyxb.binding.datatypes.string, scope=CTD_ANON_92, location=pyxb.utils.utility.Location('./pubchem.xsd', 1147, 12)))

def _BuildAutomaton_92 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_92
    del _BuildAutomaton_92
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1133, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1135, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1137, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1139, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1141, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1143, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1144, 12))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1145, 12))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1146, 12))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1147, 12))
    counters.add(cc_9)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Affil_std_affil')), pyxb.utils.utility.Location('./pubchem.xsd', 1133, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Affil_std_div')), pyxb.utils.utility.Location('./pubchem.xsd', 1135, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Affil_std_city')), pyxb.utils.utility.Location('./pubchem.xsd', 1137, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Affil_std_sub')), pyxb.utils.utility.Location('./pubchem.xsd', 1139, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Affil_std_country')), pyxb.utils.utility.Location('./pubchem.xsd', 1141, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Affil_std_street')), pyxb.utils.utility.Location('./pubchem.xsd', 1143, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Affil_std_email')), pyxb.utils.utility.Location('./pubchem.xsd', 1144, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Affil_std_fax')), pyxb.utils.utility.Location('./pubchem.xsd', 1145, 12))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Affil_std_phone')), pyxb.utils.utility.Location('./pubchem.xsd', 1146, 12))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_92._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Affil_std_postal-code')), pyxb.utils.utility.Location('./pubchem.xsd', 1147, 12))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_92._Automaton = _BuildAutomaton_92()




CTD_ANON_93._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Title_E'), CTD_ANON_94, scope=CTD_ANON_93, location=pyxb.utils.utility.Location('./pubchem.xsd', 1165, 6)))

def _BuildAutomaton_93 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_93
    del _BuildAutomaton_93
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1164, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_93._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Title_E')), pyxb.utils.utility.Location('./pubchem.xsd', 1165, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_93._Automaton = _BuildAutomaton_93()




CTD_ANON_94._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Title_E_name'), pyxb.binding.datatypes.string, scope=CTD_ANON_94, location=pyxb.utils.utility.Location('./pubchem.xsd', 1169, 12)))

CTD_ANON_94._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Title_E_tsub'), pyxb.binding.datatypes.string, scope=CTD_ANON_94, location=pyxb.utils.utility.Location('./pubchem.xsd', 1171, 12)))

CTD_ANON_94._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Title_E_trans'), pyxb.binding.datatypes.string, scope=CTD_ANON_94, location=pyxb.utils.utility.Location('./pubchem.xsd', 1173, 12)))

CTD_ANON_94._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Title_E_jta'), pyxb.binding.datatypes.string, scope=CTD_ANON_94, location=pyxb.utils.utility.Location('./pubchem.xsd', 1175, 12)))

CTD_ANON_94._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Title_E_iso-jta'), pyxb.binding.datatypes.string, scope=CTD_ANON_94, location=pyxb.utils.utility.Location('./pubchem.xsd', 1177, 12)))

CTD_ANON_94._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Title_E_ml-jta'), pyxb.binding.datatypes.string, scope=CTD_ANON_94, location=pyxb.utils.utility.Location('./pubchem.xsd', 1179, 12)))

CTD_ANON_94._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Title_E_coden'), pyxb.binding.datatypes.string, scope=CTD_ANON_94, location=pyxb.utils.utility.Location('./pubchem.xsd', 1181, 12)))

CTD_ANON_94._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Title_E_issn'), pyxb.binding.datatypes.string, scope=CTD_ANON_94, location=pyxb.utils.utility.Location('./pubchem.xsd', 1183, 12)))

CTD_ANON_94._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Title_E_abr'), pyxb.binding.datatypes.string, scope=CTD_ANON_94, location=pyxb.utils.utility.Location('./pubchem.xsd', 1185, 12)))

CTD_ANON_94._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Title_E_isbn'), pyxb.binding.datatypes.string, scope=CTD_ANON_94, location=pyxb.utils.utility.Location('./pubchem.xsd', 1187, 12)))

def _BuildAutomaton_94 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_94
    del _BuildAutomaton_94
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Title_E_name')), pyxb.utils.utility.Location('./pubchem.xsd', 1169, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Title_E_tsub')), pyxb.utils.utility.Location('./pubchem.xsd', 1171, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Title_E_trans')), pyxb.utils.utility.Location('./pubchem.xsd', 1173, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Title_E_jta')), pyxb.utils.utility.Location('./pubchem.xsd', 1175, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Title_E_iso-jta')), pyxb.utils.utility.Location('./pubchem.xsd', 1177, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Title_E_ml-jta')), pyxb.utils.utility.Location('./pubchem.xsd', 1179, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Title_E_coden')), pyxb.utils.utility.Location('./pubchem.xsd', 1181, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Title_E_issn')), pyxb.utils.utility.Location('./pubchem.xsd', 1183, 12))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Title_E_abr')), pyxb.utils.utility.Location('./pubchem.xsd', 1185, 12))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_94._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Title_E_isbn')), pyxb.utils.utility.Location('./pubchem.xsd', 1187, 12))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    transitions = []
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_94._Automaton = _BuildAutomaton_94()




CTD_ANON_95._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Imprint_date'), CTD_ANON_96, scope=CTD_ANON_95, location=pyxb.utils.utility.Location('./pubchem.xsd', 1200, 6)))

CTD_ANON_95._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Imprint_volume'), pyxb.binding.datatypes.string, scope=CTD_ANON_95, location=pyxb.utils.utility.Location('./pubchem.xsd', 1207, 6)))

CTD_ANON_95._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Imprint_issue'), pyxb.binding.datatypes.string, scope=CTD_ANON_95, location=pyxb.utils.utility.Location('./pubchem.xsd', 1208, 6)))

CTD_ANON_95._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Imprint_pages'), pyxb.binding.datatypes.string, scope=CTD_ANON_95, location=pyxb.utils.utility.Location('./pubchem.xsd', 1209, 6)))

CTD_ANON_95._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Imprint_section'), pyxb.binding.datatypes.string, scope=CTD_ANON_95, location=pyxb.utils.utility.Location('./pubchem.xsd', 1210, 6)))

CTD_ANON_95._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Imprint_pub'), CTD_ANON_97, scope=CTD_ANON_95, location=pyxb.utils.utility.Location('./pubchem.xsd', 1212, 6)))

CTD_ANON_95._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Imprint_cprt'), CTD_ANON_98, scope=CTD_ANON_95, location=pyxb.utils.utility.Location('./pubchem.xsd', 1220, 6)))

CTD_ANON_95._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Imprint_part-sup'), pyxb.binding.datatypes.string, scope=CTD_ANON_95, location=pyxb.utils.utility.Location('./pubchem.xsd', 1228, 6)))

CTD_ANON_95._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Imprint_language'), pyxb.binding.datatypes.string, scope=CTD_ANON_95, location=pyxb.utils.utility.Location('./pubchem.xsd', 1230, 6), unicode_default='ENG'))

CTD_ANON_95._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Imprint_prepub'), CTD_ANON_335, scope=CTD_ANON_95, location=pyxb.utils.utility.Location('./pubchem.xsd', 1231, 6)))

CTD_ANON_95._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Imprint_part-supi'), pyxb.binding.datatypes.string, scope=CTD_ANON_95, location=pyxb.utils.utility.Location('./pubchem.xsd', 1249, 6)))

CTD_ANON_95._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Imprint_retract'), CTD_ANON_99, scope=CTD_ANON_95, location=pyxb.utils.utility.Location('./pubchem.xsd', 1251, 6)))

CTD_ANON_95._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Imprint_pubstatus'), CTD_ANON_100, scope=CTD_ANON_95, location=pyxb.utils.utility.Location('./pubchem.xsd', 1259, 6)))

CTD_ANON_95._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Imprint_history'), CTD_ANON_101, scope=CTD_ANON_95, location=pyxb.utils.utility.Location('./pubchem.xsd', 1267, 6)))

def _BuildAutomaton_95 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_95
    del _BuildAutomaton_95
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1207, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1208, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1209, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1210, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1212, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1220, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1228, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1231, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1249, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1251, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1259, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1267, 6))
    counters.add(cc_11)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_95._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Imprint_date')), pyxb.utils.utility.Location('./pubchem.xsd', 1200, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_95._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Imprint_volume')), pyxb.utils.utility.Location('./pubchem.xsd', 1207, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_95._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Imprint_issue')), pyxb.utils.utility.Location('./pubchem.xsd', 1208, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_95._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Imprint_pages')), pyxb.utils.utility.Location('./pubchem.xsd', 1209, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_95._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Imprint_section')), pyxb.utils.utility.Location('./pubchem.xsd', 1210, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_95._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Imprint_pub')), pyxb.utils.utility.Location('./pubchem.xsd', 1212, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_95._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Imprint_cprt')), pyxb.utils.utility.Location('./pubchem.xsd', 1220, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_95._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Imprint_part-sup')), pyxb.utils.utility.Location('./pubchem.xsd', 1228, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_95._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Imprint_language')), pyxb.utils.utility.Location('./pubchem.xsd', 1230, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_95._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Imprint_prepub')), pyxb.utils.utility.Location('./pubchem.xsd', 1231, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_95._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Imprint_part-supi')), pyxb.utils.utility.Location('./pubchem.xsd', 1249, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_95._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Imprint_retract')), pyxb.utils.utility.Location('./pubchem.xsd', 1251, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_95._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Imprint_pubstatus')), pyxb.utils.utility.Location('./pubchem.xsd', 1259, 6))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_95._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Imprint_history')), pyxb.utils.utility.Location('./pubchem.xsd', 1267, 6))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_95._Automaton = _BuildAutomaton_95()




CTD_ANON_96._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Date'), CTD_ANON, scope=CTD_ANON_96, location=pyxb.utils.utility.Location('./pubchem.xsd', 89, 0)))

def _BuildAutomaton_96 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_96
    del _BuildAutomaton_96
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_96._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Date')), pyxb.utils.utility.Location('./pubchem.xsd', 1203, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_96._Automaton = _BuildAutomaton_96()




CTD_ANON_97._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Affil'), CTD_ANON_91, scope=CTD_ANON_97, location=pyxb.utils.utility.Location('./pubchem.xsd', 1124, 0)))

def _BuildAutomaton_97 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_97
    del _BuildAutomaton_97
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_97._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Affil')), pyxb.utils.utility.Location('./pubchem.xsd', 1215, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_97._Automaton = _BuildAutomaton_97()




CTD_ANON_98._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Date'), CTD_ANON, scope=CTD_ANON_98, location=pyxb.utils.utility.Location('./pubchem.xsd', 89, 0)))

def _BuildAutomaton_98 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_98
    del _BuildAutomaton_98
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_98._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Date')), pyxb.utils.utility.Location('./pubchem.xsd', 1223, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_98._Automaton = _BuildAutomaton_98()




CTD_ANON_99._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CitRetract'), CTD_ANON_102, scope=CTD_ANON_99, location=pyxb.utils.utility.Location('./pubchem.xsd', 1278, 0)))

def _BuildAutomaton_99 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_99
    del _BuildAutomaton_99
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_99._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CitRetract')), pyxb.utils.utility.Location('./pubchem.xsd', 1254, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_99._Automaton = _BuildAutomaton_99()




CTD_ANON_100._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PubStatus'), CTD_ANON_329, scope=CTD_ANON_100, location=pyxb.utils.utility.Location('./pubchem.xsd', 541, 0)))

def _BuildAutomaton_100 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_100
    del _BuildAutomaton_100
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_100._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PubStatus')), pyxb.utils.utility.Location('./pubchem.xsd', 1262, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_100._Automaton = _BuildAutomaton_100()




CTD_ANON_101._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PubStatusDateSet'), CTD_ANON_39, scope=CTD_ANON_101, location=pyxb.utils.utility.Location('./pubchem.xsd', 606, 0)))

def _BuildAutomaton_101 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_101
    del _BuildAutomaton_101
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_101._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PubStatusDateSet')), pyxb.utils.utility.Location('./pubchem.xsd', 1270, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_101._Automaton = _BuildAutomaton_101()




CTD_ANON_102._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CitRetract_type'), CTD_ANON_336, scope=CTD_ANON_102, location=pyxb.utils.utility.Location('./pubchem.xsd', 1281, 6)))

CTD_ANON_102._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CitRetract_exp'), pyxb.binding.datatypes.string, scope=CTD_ANON_102, location=pyxb.utils.utility.Location('./pubchem.xsd', 1302, 6)))

def _BuildAutomaton_102 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_102
    del _BuildAutomaton_102
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1302, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_102._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CitRetract_type')), pyxb.utils.utility.Location('./pubchem.xsd', 1281, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_102._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CitRetract_exp')), pyxb.utils.utility.Location('./pubchem.xsd', 1302, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_102._Automaton = _BuildAutomaton_102()




CTD_ANON_103._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Meeting_number'), pyxb.binding.datatypes.string, scope=CTD_ANON_103, location=pyxb.utils.utility.Location('./pubchem.xsd', 1310, 6)))

CTD_ANON_103._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Meeting_date'), CTD_ANON_104, scope=CTD_ANON_103, location=pyxb.utils.utility.Location('./pubchem.xsd', 1311, 6)))

CTD_ANON_103._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Meeting_place'), CTD_ANON_105, scope=CTD_ANON_103, location=pyxb.utils.utility.Location('./pubchem.xsd', 1318, 6)))

def _BuildAutomaton_103 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_103
    del _BuildAutomaton_103
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1318, 6))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_103._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Meeting_number')), pyxb.utils.utility.Location('./pubchem.xsd', 1310, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_103._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Meeting_date')), pyxb.utils.utility.Location('./pubchem.xsd', 1311, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_103._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Meeting_place')), pyxb.utils.utility.Location('./pubchem.xsd', 1318, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_103._Automaton = _BuildAutomaton_103()




CTD_ANON_104._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Date'), CTD_ANON, scope=CTD_ANON_104, location=pyxb.utils.utility.Location('./pubchem.xsd', 89, 0)))

def _BuildAutomaton_104 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_104
    del _BuildAutomaton_104
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_104._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Date')), pyxb.utils.utility.Location('./pubchem.xsd', 1314, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_104._Automaton = _BuildAutomaton_104()




CTD_ANON_105._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Affil'), CTD_ANON_91, scope=CTD_ANON_105, location=pyxb.utils.utility.Location('./pubchem.xsd', 1124, 0)))

def _BuildAutomaton_105 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_105
    del _BuildAutomaton_105
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_105._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Affil')), pyxb.utils.utility.Location('./pubchem.xsd', 1321, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_105._Automaton = _BuildAutomaton_105()




CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry_uid'), pyxb.binding.datatypes.integer, scope=CTD_ANON_106, location=pyxb.utils.utility.Location('./pubchem.xsd', 1365, 6)))

CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry_em'), CTD_ANON_107, scope=CTD_ANON_106, location=pyxb.utils.utility.Location('./pubchem.xsd', 1367, 6)))

CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry_cit'), CTD_ANON_108, scope=CTD_ANON_106, location=pyxb.utils.utility.Location('./pubchem.xsd', 1375, 6)))

CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry_abstract'), pyxb.binding.datatypes.string, scope=CTD_ANON_106, location=pyxb.utils.utility.Location('./pubchem.xsd', 1382, 6)))

CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry_mesh'), CTD_ANON_109, scope=CTD_ANON_106, location=pyxb.utils.utility.Location('./pubchem.xsd', 1383, 6)))

CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry_substance'), CTD_ANON_110, scope=CTD_ANON_106, location=pyxb.utils.utility.Location('./pubchem.xsd', 1390, 6)))

CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry_xref'), CTD_ANON_111, scope=CTD_ANON_106, location=pyxb.utils.utility.Location('./pubchem.xsd', 1397, 6)))

CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry_idnum'), CTD_ANON_112, scope=CTD_ANON_106, location=pyxb.utils.utility.Location('./pubchem.xsd', 1405, 6)))

CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry_gene'), CTD_ANON_113, scope=CTD_ANON_106, location=pyxb.utils.utility.Location('./pubchem.xsd', 1412, 6)))

CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry_pmid'), CTD_ANON_114, scope=CTD_ANON_106, location=pyxb.utils.utility.Location('./pubchem.xsd', 1420, 6)))

CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry_pub-type'), CTD_ANON_115, scope=CTD_ANON_106, location=pyxb.utils.utility.Location('./pubchem.xsd', 1428, 6)))

CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry_mlfield'), CTD_ANON_116, scope=CTD_ANON_106, location=pyxb.utils.utility.Location('./pubchem.xsd', 1436, 6)))

CTD_ANON_106._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry_status'), CTD_ANON_337, scope=CTD_ANON_106, location=pyxb.utils.utility.Location('./pubchem.xsd', 1443, 6)))

def _BuildAutomaton_106 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_106
    del _BuildAutomaton_106
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1365, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1382, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1383, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1390, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1397, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1405, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1412, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1420, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1428, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1436, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1443, 6))
    counters.add(cc_10)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry_uid')), pyxb.utils.utility.Location('./pubchem.xsd', 1365, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry_em')), pyxb.utils.utility.Location('./pubchem.xsd', 1367, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry_cit')), pyxb.utils.utility.Location('./pubchem.xsd', 1375, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry_abstract')), pyxb.utils.utility.Location('./pubchem.xsd', 1382, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry_mesh')), pyxb.utils.utility.Location('./pubchem.xsd', 1383, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry_substance')), pyxb.utils.utility.Location('./pubchem.xsd', 1390, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry_xref')), pyxb.utils.utility.Location('./pubchem.xsd', 1397, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry_idnum')), pyxb.utils.utility.Location('./pubchem.xsd', 1405, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry_gene')), pyxb.utils.utility.Location('./pubchem.xsd', 1412, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry_pmid')), pyxb.utils.utility.Location('./pubchem.xsd', 1420, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry_pub-type')), pyxb.utils.utility.Location('./pubchem.xsd', 1428, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry_mlfield')), pyxb.utils.utility.Location('./pubchem.xsd', 1436, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_106._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry_status')), pyxb.utils.utility.Location('./pubchem.xsd', 1443, 6))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    st_12._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_106._Automaton = _BuildAutomaton_106()




CTD_ANON_107._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Date'), CTD_ANON, scope=CTD_ANON_107, location=pyxb.utils.utility.Location('./pubchem.xsd', 89, 0)))

def _BuildAutomaton_107 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_107
    del _BuildAutomaton_107
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_107._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Date')), pyxb.utils.utility.Location('./pubchem.xsd', 1370, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_107._Automaton = _BuildAutomaton_107()




CTD_ANON_108._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-art'), CTD_ANON_40, scope=CTD_ANON_108, location=pyxb.utils.utility.Location('./pubchem.xsd', 618, 0)))

def _BuildAutomaton_108 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_108
    del _BuildAutomaton_108
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_108._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-art')), pyxb.utils.utility.Location('./pubchem.xsd', 1378, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_108._Automaton = _BuildAutomaton_108()




CTD_ANON_109._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Medline-mesh'), CTD_ANON_117, scope=CTD_ANON_109, location=pyxb.utils.utility.Location('./pubchem.xsd', 1468, 0)))

def _BuildAutomaton_109 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_109
    del _BuildAutomaton_109
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1385, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_109._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Medline-mesh')), pyxb.utils.utility.Location('./pubchem.xsd', 1386, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_109._Automaton = _BuildAutomaton_109()




CTD_ANON_110._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Medline-rn'), CTD_ANON_120, scope=CTD_ANON_110, location=pyxb.utils.utility.Location('./pubchem.xsd', 1521, 0)))

def _BuildAutomaton_110 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_110
    del _BuildAutomaton_110
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1392, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_110._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Medline-rn')), pyxb.utils.utility.Location('./pubchem.xsd', 1393, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_110._Automaton = _BuildAutomaton_110()




CTD_ANON_111._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Medline-si'), CTD_ANON_121, scope=CTD_ANON_111, location=pyxb.utils.utility.Location('./pubchem.xsd', 1550, 0)))

def _BuildAutomaton_111 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_111
    del _BuildAutomaton_111
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1399, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_111._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Medline-si')), pyxb.utils.utility.Location('./pubchem.xsd', 1400, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_111._Automaton = _BuildAutomaton_111()




CTD_ANON_112._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry_idnum_E'), pyxb.binding.datatypes.string, scope=CTD_ANON_112, location=pyxb.utils.utility.Location('./pubchem.xsd', 1408, 12)))

def _BuildAutomaton_112 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_112
    del _BuildAutomaton_112
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1407, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_112._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry_idnum_E')), pyxb.utils.utility.Location('./pubchem.xsd', 1408, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_112._Automaton = _BuildAutomaton_112()




CTD_ANON_113._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry_gene_E'), pyxb.binding.datatypes.string, scope=CTD_ANON_113, location=pyxb.utils.utility.Location('./pubchem.xsd', 1415, 12)))

def _BuildAutomaton_113 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_113
    del _BuildAutomaton_113
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1414, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_113._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry_gene_E')), pyxb.utils.utility.Location('./pubchem.xsd', 1415, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_113._Automaton = _BuildAutomaton_113()




CTD_ANON_114._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PubMedId'), pyxb.binding.datatypes.integer, scope=CTD_ANON_114, location=pyxb.utils.utility.Location('./pubchem.xsd', 509, 0)))

def _BuildAutomaton_114 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_114
    del _BuildAutomaton_114
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_114._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PubMedId')), pyxb.utils.utility.Location('./pubchem.xsd', 1423, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_114._Automaton = _BuildAutomaton_114()




CTD_ANON_115._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry_pub-type_E'), pyxb.binding.datatypes.string, scope=CTD_ANON_115, location=pyxb.utils.utility.Location('./pubchem.xsd', 1431, 12)))

def _BuildAutomaton_115 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_115
    del _BuildAutomaton_115
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1430, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_115._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry_pub-type_E')), pyxb.utils.utility.Location('./pubchem.xsd', 1431, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_115._Automaton = _BuildAutomaton_115()




CTD_ANON_116._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Medline-field'), CTD_ANON_122, scope=CTD_ANON_116, location=pyxb.utils.utility.Location('./pubchem.xsd', 1599, 0)))

def _BuildAutomaton_116 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_116
    del _BuildAutomaton_116
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1438, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_116._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Medline-field')), pyxb.utils.utility.Location('./pubchem.xsd', 1439, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_116._Automaton = _BuildAutomaton_116()




CTD_ANON_117._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Medline-mesh_mp'), CTD_ANON_338, scope=CTD_ANON_117, location=pyxb.utils.utility.Location('./pubchem.xsd', 1472, 6)))

CTD_ANON_117._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Medline-mesh_term'), pyxb.binding.datatypes.string, scope=CTD_ANON_117, location=pyxb.utils.utility.Location('./pubchem.xsd', 1485, 6)))

CTD_ANON_117._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Medline-mesh_qual'), CTD_ANON_118, scope=CTD_ANON_117, location=pyxb.utils.utility.Location('./pubchem.xsd', 1487, 6)))

def _BuildAutomaton_117 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_117
    del _BuildAutomaton_117
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1472, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1487, 6))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_117._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Medline-mesh_mp')), pyxb.utils.utility.Location('./pubchem.xsd', 1472, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_117._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Medline-mesh_term')), pyxb.utils.utility.Location('./pubchem.xsd', 1485, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_117._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Medline-mesh_qual')), pyxb.utils.utility.Location('./pubchem.xsd', 1487, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_117._Automaton = _BuildAutomaton_117()




CTD_ANON_118._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Medline-qual'), CTD_ANON_119, scope=CTD_ANON_118, location=pyxb.utils.utility.Location('./pubchem.xsd', 1498, 0)))

def _BuildAutomaton_118 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_118
    del _BuildAutomaton_118
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1489, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_118._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Medline-qual')), pyxb.utils.utility.Location('./pubchem.xsd', 1490, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_118._Automaton = _BuildAutomaton_118()




CTD_ANON_119._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Medline-qual_mp'), CTD_ANON_339, scope=CTD_ANON_119, location=pyxb.utils.utility.Location('./pubchem.xsd', 1502, 6)))

CTD_ANON_119._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Medline-qual_subh'), pyxb.binding.datatypes.string, scope=CTD_ANON_119, location=pyxb.utils.utility.Location('./pubchem.xsd', 1515, 6)))

def _BuildAutomaton_119 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_119
    del _BuildAutomaton_119
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1502, 6))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_119._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Medline-qual_mp')), pyxb.utils.utility.Location('./pubchem.xsd', 1502, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_119._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Medline-qual_subh')), pyxb.utils.utility.Location('./pubchem.xsd', 1515, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_119._Automaton = _BuildAutomaton_119()




CTD_ANON_120._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Medline-rn_type'), CTD_ANON_340, scope=CTD_ANON_120, location=pyxb.utils.utility.Location('./pubchem.xsd', 1524, 6)))

CTD_ANON_120._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Medline-rn_cit'), pyxb.binding.datatypes.string, scope=CTD_ANON_120, location=pyxb.utils.utility.Location('./pubchem.xsd', 1542, 6)))

CTD_ANON_120._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Medline-rn_name'), pyxb.binding.datatypes.string, scope=CTD_ANON_120, location=pyxb.utils.utility.Location('./pubchem.xsd', 1544, 6)))

def _BuildAutomaton_120 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_120
    del _BuildAutomaton_120
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1542, 6))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_120._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Medline-rn_type')), pyxb.utils.utility.Location('./pubchem.xsd', 1524, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_120._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Medline-rn_cit')), pyxb.utils.utility.Location('./pubchem.xsd', 1542, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_120._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Medline-rn_name')), pyxb.utils.utility.Location('./pubchem.xsd', 1544, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_120._Automaton = _BuildAutomaton_120()




CTD_ANON_121._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Medline-si_type'), CTD_ANON_341, scope=CTD_ANON_121, location=pyxb.utils.utility.Location('./pubchem.xsd', 1553, 6)))

CTD_ANON_121._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Medline-si_cit'), pyxb.binding.datatypes.string, scope=CTD_ANON_121, location=pyxb.utils.utility.Location('./pubchem.xsd', 1594, 6)))

def _BuildAutomaton_121 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_121
    del _BuildAutomaton_121
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1594, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_121._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Medline-si_type')), pyxb.utils.utility.Location('./pubchem.xsd', 1553, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_121._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Medline-si_cit')), pyxb.utils.utility.Location('./pubchem.xsd', 1594, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_121._Automaton = _BuildAutomaton_121()




CTD_ANON_122._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Medline-field_type'), CTD_ANON_342, scope=CTD_ANON_122, location=pyxb.utils.utility.Location('./pubchem.xsd', 1602, 6)))

CTD_ANON_122._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Medline-field_str'), pyxb.binding.datatypes.string, scope=CTD_ANON_122, location=pyxb.utils.utility.Location('./pubchem.xsd', 1625, 6)))

CTD_ANON_122._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Medline-field_ids'), CTD_ANON_123, scope=CTD_ANON_122, location=pyxb.utils.utility.Location('./pubchem.xsd', 1627, 6)))

def _BuildAutomaton_122 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_122
    del _BuildAutomaton_122
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1627, 6))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_122._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Medline-field_type')), pyxb.utils.utility.Location('./pubchem.xsd', 1602, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_122._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Medline-field_str')), pyxb.utils.utility.Location('./pubchem.xsd', 1625, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_122._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Medline-field_ids')), pyxb.utils.utility.Location('./pubchem.xsd', 1627, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_122._Automaton = _BuildAutomaton_122()




CTD_ANON_123._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DocRef'), CTD_ANON_124, scope=CTD_ANON_123, location=pyxb.utils.utility.Location('./pubchem.xsd', 1639, 0)))

def _BuildAutomaton_123 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_123
    del _BuildAutomaton_123
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1629, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_123._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DocRef')), pyxb.utils.utility.Location('./pubchem.xsd', 1630, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_123._Automaton = _BuildAutomaton_123()




CTD_ANON_124._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DocRef_type'), CTD_ANON_343, scope=CTD_ANON_124, location=pyxb.utils.utility.Location('./pubchem.xsd', 1642, 6)))

CTD_ANON_124._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DocRef_uid'), pyxb.binding.datatypes.integer, scope=CTD_ANON_124, location=pyxb.utils.utility.Location('./pubchem.xsd', 1659, 6)))

def _BuildAutomaton_124 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_124
    del _BuildAutomaton_124
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_124._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DocRef_type')), pyxb.utils.utility.Location('./pubchem.xsd', 1642, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_124._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DocRef_uid')), pyxb.utils.utility.Location('./pubchem.xsd', 1659, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_124._Automaton = _BuildAutomaton_124()




CTD_ANON_125._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Pub_gen'), CTD_ANON_126, scope=CTD_ANON_125, location=pyxb.utils.utility.Location('./pubchem.xsd', 1705, 6)))

CTD_ANON_125._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Pub_sub'), CTD_ANON_127, scope=CTD_ANON_125, location=pyxb.utils.utility.Location('./pubchem.xsd', 1713, 6)))

CTD_ANON_125._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Pub_medline'), CTD_ANON_128, scope=CTD_ANON_125, location=pyxb.utils.utility.Location('./pubchem.xsd', 1720, 6)))

CTD_ANON_125._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Pub_muid'), pyxb.binding.datatypes.integer, scope=CTD_ANON_125, location=pyxb.utils.utility.Location('./pubchem.xsd', 1728, 6)))

CTD_ANON_125._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Pub_article'), CTD_ANON_129, scope=CTD_ANON_125, location=pyxb.utils.utility.Location('./pubchem.xsd', 1729, 6)))

CTD_ANON_125._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Pub_journal'), CTD_ANON_130, scope=CTD_ANON_125, location=pyxb.utils.utility.Location('./pubchem.xsd', 1736, 6)))

CTD_ANON_125._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Pub_book'), CTD_ANON_131, scope=CTD_ANON_125, location=pyxb.utils.utility.Location('./pubchem.xsd', 1743, 6)))

CTD_ANON_125._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Pub_proc'), CTD_ANON_132, scope=CTD_ANON_125, location=pyxb.utils.utility.Location('./pubchem.xsd', 1751, 6)))

CTD_ANON_125._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Pub_patent'), CTD_ANON_133, scope=CTD_ANON_125, location=pyxb.utils.utility.Location('./pubchem.xsd', 1758, 6)))

CTD_ANON_125._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Pub_pat-id'), CTD_ANON_134, scope=CTD_ANON_125, location=pyxb.utils.utility.Location('./pubchem.xsd', 1766, 6)))

CTD_ANON_125._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Pub_man'), CTD_ANON_135, scope=CTD_ANON_125, location=pyxb.utils.utility.Location('./pubchem.xsd', 1774, 6)))

CTD_ANON_125._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Pub_equiv'), CTD_ANON_136, scope=CTD_ANON_125, location=pyxb.utils.utility.Location('./pubchem.xsd', 1782, 6)))

CTD_ANON_125._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Pub_pmid'), CTD_ANON_137, scope=CTD_ANON_125, location=pyxb.utils.utility.Location('./pubchem.xsd', 1790, 6)))

def _BuildAutomaton_125 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_125
    del _BuildAutomaton_125
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_125._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Pub_gen')), pyxb.utils.utility.Location('./pubchem.xsd', 1705, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_125._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Pub_sub')), pyxb.utils.utility.Location('./pubchem.xsd', 1713, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_125._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Pub_medline')), pyxb.utils.utility.Location('./pubchem.xsd', 1720, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_125._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Pub_muid')), pyxb.utils.utility.Location('./pubchem.xsd', 1728, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_125._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Pub_article')), pyxb.utils.utility.Location('./pubchem.xsd', 1729, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_125._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Pub_journal')), pyxb.utils.utility.Location('./pubchem.xsd', 1736, 6))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_125._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Pub_book')), pyxb.utils.utility.Location('./pubchem.xsd', 1743, 6))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_125._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Pub_proc')), pyxb.utils.utility.Location('./pubchem.xsd', 1751, 6))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_125._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Pub_patent')), pyxb.utils.utility.Location('./pubchem.xsd', 1758, 6))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_125._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Pub_pat-id')), pyxb.utils.utility.Location('./pubchem.xsd', 1766, 6))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_125._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Pub_man')), pyxb.utils.utility.Location('./pubchem.xsd', 1774, 6))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_125._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Pub_equiv')), pyxb.utils.utility.Location('./pubchem.xsd', 1782, 6))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_125._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Pub_pmid')), pyxb.utils.utility.Location('./pubchem.xsd', 1790, 6))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    transitions = []
    st_9._set_transitionSet(transitions)
    transitions = []
    st_10._set_transitionSet(transitions)
    transitions = []
    st_11._set_transitionSet(transitions)
    transitions = []
    st_12._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_125._Automaton = _BuildAutomaton_125()




CTD_ANON_126._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-gen'), CTD_ANON_77, scope=CTD_ANON_126, location=pyxb.utils.utility.Location('./pubchem.xsd', 970, 0)))

def _BuildAutomaton_126 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_126
    del _BuildAutomaton_126
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_126._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-gen')), pyxb.utils.utility.Location('./pubchem.xsd', 1708, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_126._Automaton = _BuildAutomaton_126()




CTD_ANON_127._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-sub'), CTD_ANON_73, scope=CTD_ANON_127, location=pyxb.utils.utility.Location('./pubchem.xsd', 921, 0)))

def _BuildAutomaton_127 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_127
    del _BuildAutomaton_127
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_127._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-sub')), pyxb.utils.utility.Location('./pubchem.xsd', 1716, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_127._Automaton = _BuildAutomaton_127()




CTD_ANON_128._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry'), CTD_ANON_106, scope=CTD_ANON_128, location=pyxb.utils.utility.Location('./pubchem.xsd', 1361, 0)))

def _BuildAutomaton_128 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_128
    del _BuildAutomaton_128
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_128._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry')), pyxb.utils.utility.Location('./pubchem.xsd', 1723, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_128._Automaton = _BuildAutomaton_128()




CTD_ANON_129._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-art'), CTD_ANON_40, scope=CTD_ANON_129, location=pyxb.utils.utility.Location('./pubchem.xsd', 618, 0)))

def _BuildAutomaton_129 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_129
    del _BuildAutomaton_129
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_129._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-art')), pyxb.utils.utility.Location('./pubchem.xsd', 1732, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_129._Automaton = _BuildAutomaton_129()




CTD_ANON_130._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-jour'), CTD_ANON_48, scope=CTD_ANON_130, location=pyxb.utils.utility.Location('./pubchem.xsd', 677, 0)))

def _BuildAutomaton_130 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_130
    del _BuildAutomaton_130
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_130._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-jour')), pyxb.utils.utility.Location('./pubchem.xsd', 1739, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_130._Automaton = _BuildAutomaton_130()




CTD_ANON_131._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-book'), CTD_ANON_51, scope=CTD_ANON_131, location=pyxb.utils.utility.Location('./pubchem.xsd', 700, 0)))

def _BuildAutomaton_131 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_131
    del _BuildAutomaton_131
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_131._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-book')), pyxb.utils.utility.Location('./pubchem.xsd', 1746, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_131._Automaton = _BuildAutomaton_131()




CTD_ANON_132._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-proc'), CTD_ANON_56, scope=CTD_ANON_132, location=pyxb.utils.utility.Location('./pubchem.xsd', 739, 0)))

def _BuildAutomaton_132 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_132
    del _BuildAutomaton_132
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_132._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-proc')), pyxb.utils.utility.Location('./pubchem.xsd', 1754, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_132._Automaton = _BuildAutomaton_132()




CTD_ANON_133._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-pat'), CTD_ANON_59, scope=CTD_ANON_133, location=pyxb.utils.utility.Location('./pubchem.xsd', 769, 0)))

def _BuildAutomaton_133 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_133
    del _BuildAutomaton_133
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_133._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-pat')), pyxb.utils.utility.Location('./pubchem.xsd', 1761, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_133._Automaton = _BuildAutomaton_133()




CTD_ANON_134._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Id-pat'), CTD_ANON_69, scope=CTD_ANON_134, location=pyxb.utils.utility.Location('./pubchem.xsd', 863, 0)))

def _BuildAutomaton_134 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_134
    del _BuildAutomaton_134
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_134._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Id-pat')), pyxb.utils.utility.Location('./pubchem.xsd', 1769, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_134._Automaton = _BuildAutomaton_134()




CTD_ANON_135._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-let'), CTD_ANON_71, scope=CTD_ANON_135, location=pyxb.utils.utility.Location('./pubchem.xsd', 885, 0)))

def _BuildAutomaton_135 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_135
    del _BuildAutomaton_135
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_135._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-let')), pyxb.utils.utility.Location('./pubchem.xsd', 1777, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_135._Automaton = _BuildAutomaton_135()




CTD_ANON_136._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Pub-equiv'), CTD_ANON_138, scope=CTD_ANON_136, location=pyxb.utils.utility.Location('./pubchem.xsd', 1802, 0)))

def _BuildAutomaton_136 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_136
    del _BuildAutomaton_136
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_136._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Pub-equiv')), pyxb.utils.utility.Location('./pubchem.xsd', 1785, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_136._Automaton = _BuildAutomaton_136()




CTD_ANON_137._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PubMedId'), pyxb.binding.datatypes.integer, scope=CTD_ANON_137, location=pyxb.utils.utility.Location('./pubchem.xsd', 509, 0)))

def _BuildAutomaton_137 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_137
    del _BuildAutomaton_137
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_137._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PubMedId')), pyxb.utils.utility.Location('./pubchem.xsd', 1793, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_137._Automaton = _BuildAutomaton_137()




CTD_ANON_138._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Pub'), CTD_ANON_125, scope=CTD_ANON_138, location=pyxb.utils.utility.Location('./pubchem.xsd', 1701, 0)))

def _BuildAutomaton_138 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_138
    del _BuildAutomaton_138
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1804, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_138._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Pub')), pyxb.utils.utility.Location('./pubchem.xsd', 1805, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_138._Automaton = _BuildAutomaton_138()




CTD_ANON_139._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Pub-set_pub'), CTD_ANON_140, scope=CTD_ANON_139, location=pyxb.utils.utility.Location('./pubchem.xsd', 1813, 6)))

CTD_ANON_139._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Pub-set_medline'), CTD_ANON_141, scope=CTD_ANON_139, location=pyxb.utils.utility.Location('./pubchem.xsd', 1820, 6)))

CTD_ANON_139._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Pub-set_article'), CTD_ANON_142, scope=CTD_ANON_139, location=pyxb.utils.utility.Location('./pubchem.xsd', 1827, 6)))

CTD_ANON_139._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Pub-set_journal'), CTD_ANON_143, scope=CTD_ANON_139, location=pyxb.utils.utility.Location('./pubchem.xsd', 1834, 6)))

CTD_ANON_139._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Pub-set_book'), CTD_ANON_144, scope=CTD_ANON_139, location=pyxb.utils.utility.Location('./pubchem.xsd', 1841, 6)))

CTD_ANON_139._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Pub-set_proc'), CTD_ANON_145, scope=CTD_ANON_139, location=pyxb.utils.utility.Location('./pubchem.xsd', 1849, 6)))

CTD_ANON_139._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Pub-set_patent'), CTD_ANON_146, scope=CTD_ANON_139, location=pyxb.utils.utility.Location('./pubchem.xsd', 1856, 6)))

def _BuildAutomaton_139 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_139
    del _BuildAutomaton_139
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_139._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Pub-set_pub')), pyxb.utils.utility.Location('./pubchem.xsd', 1813, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_139._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Pub-set_medline')), pyxb.utils.utility.Location('./pubchem.xsd', 1820, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_139._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Pub-set_article')), pyxb.utils.utility.Location('./pubchem.xsd', 1827, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_139._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Pub-set_journal')), pyxb.utils.utility.Location('./pubchem.xsd', 1834, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_139._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Pub-set_book')), pyxb.utils.utility.Location('./pubchem.xsd', 1841, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_139._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Pub-set_proc')), pyxb.utils.utility.Location('./pubchem.xsd', 1849, 6))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_139._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Pub-set_patent')), pyxb.utils.utility.Location('./pubchem.xsd', 1856, 6))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_139._Automaton = _BuildAutomaton_139()




CTD_ANON_140._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Pub'), CTD_ANON_125, scope=CTD_ANON_140, location=pyxb.utils.utility.Location('./pubchem.xsd', 1701, 0)))

def _BuildAutomaton_140 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_140
    del _BuildAutomaton_140
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1815, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_140._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Pub')), pyxb.utils.utility.Location('./pubchem.xsd', 1816, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_140._Automaton = _BuildAutomaton_140()




CTD_ANON_141._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry'), CTD_ANON_106, scope=CTD_ANON_141, location=pyxb.utils.utility.Location('./pubchem.xsd', 1361, 0)))

def _BuildAutomaton_141 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_141
    del _BuildAutomaton_141
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1822, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_141._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Medline-entry')), pyxb.utils.utility.Location('./pubchem.xsd', 1823, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_141._Automaton = _BuildAutomaton_141()




CTD_ANON_142._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-art'), CTD_ANON_40, scope=CTD_ANON_142, location=pyxb.utils.utility.Location('./pubchem.xsd', 618, 0)))

def _BuildAutomaton_142 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_142
    del _BuildAutomaton_142
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1829, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_142._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-art')), pyxb.utils.utility.Location('./pubchem.xsd', 1830, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_142._Automaton = _BuildAutomaton_142()




CTD_ANON_143._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-jour'), CTD_ANON_48, scope=CTD_ANON_143, location=pyxb.utils.utility.Location('./pubchem.xsd', 677, 0)))

def _BuildAutomaton_143 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_143
    del _BuildAutomaton_143
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1836, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_143._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-jour')), pyxb.utils.utility.Location('./pubchem.xsd', 1837, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_143._Automaton = _BuildAutomaton_143()




CTD_ANON_144._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-book'), CTD_ANON_51, scope=CTD_ANON_144, location=pyxb.utils.utility.Location('./pubchem.xsd', 700, 0)))

def _BuildAutomaton_144 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_144
    del _BuildAutomaton_144
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1843, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_144._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-book')), pyxb.utils.utility.Location('./pubchem.xsd', 1844, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_144._Automaton = _BuildAutomaton_144()




CTD_ANON_145._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-proc'), CTD_ANON_56, scope=CTD_ANON_145, location=pyxb.utils.utility.Location('./pubchem.xsd', 739, 0)))

def _BuildAutomaton_145 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_145
    del _BuildAutomaton_145
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1851, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_145._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-proc')), pyxb.utils.utility.Location('./pubchem.xsd', 1852, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_145._Automaton = _BuildAutomaton_145()




CTD_ANON_146._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Cit-pat'), CTD_ANON_59, scope=CTD_ANON_146, location=pyxb.utils.utility.Location('./pubchem.xsd', 769, 0)))

def _BuildAutomaton_146 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_146
    del _BuildAutomaton_146
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1858, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_146._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Cit-pat')), pyxb.utils.utility.Location('./pubchem.xsd', 1859, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_146._Automaton = _BuildAutomaton_146()




CTD_ANON_147._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Org-ref_taxname'), pyxb.binding.datatypes.string, scope=CTD_ANON_147, location=pyxb.utils.utility.Location('./pubchem.xsd', 1901, 6)))

CTD_ANON_147._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Org-ref_common'), pyxb.binding.datatypes.string, scope=CTD_ANON_147, location=pyxb.utils.utility.Location('./pubchem.xsd', 1903, 6)))

CTD_ANON_147._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Org-ref_mod'), CTD_ANON_148, scope=CTD_ANON_147, location=pyxb.utils.utility.Location('./pubchem.xsd', 1905, 6)))

CTD_ANON_147._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Org-ref_db'), CTD_ANON_149, scope=CTD_ANON_147, location=pyxb.utils.utility.Location('./pubchem.xsd', 1913, 6)))

CTD_ANON_147._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Org-ref_syn'), CTD_ANON_150, scope=CTD_ANON_147, location=pyxb.utils.utility.Location('./pubchem.xsd', 1921, 6)))

CTD_ANON_147._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Org-ref_orgname'), CTD_ANON_151, scope=CTD_ANON_147, location=pyxb.utils.utility.Location('./pubchem.xsd', 1928, 6)))

def _BuildAutomaton_147 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_147
    del _BuildAutomaton_147
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1901, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1903, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1905, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1913, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1921, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1928, 6))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_147._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Org-ref_taxname')), pyxb.utils.utility.Location('./pubchem.xsd', 1901, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_147._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Org-ref_common')), pyxb.utils.utility.Location('./pubchem.xsd', 1903, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_147._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Org-ref_mod')), pyxb.utils.utility.Location('./pubchem.xsd', 1905, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_147._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Org-ref_db')), pyxb.utils.utility.Location('./pubchem.xsd', 1913, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_147._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Org-ref_syn')), pyxb.utils.utility.Location('./pubchem.xsd', 1921, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_147._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Org-ref_orgname')), pyxb.utils.utility.Location('./pubchem.xsd', 1928, 6))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_147._Automaton = _BuildAutomaton_147()




CTD_ANON_148._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Org-ref_mod_E'), pyxb.binding.datatypes.string, scope=CTD_ANON_148, location=pyxb.utils.utility.Location('./pubchem.xsd', 1908, 12)))

def _BuildAutomaton_148 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_148
    del _BuildAutomaton_148
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1907, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_148._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Org-ref_mod_E')), pyxb.utils.utility.Location('./pubchem.xsd', 1908, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_148._Automaton = _BuildAutomaton_148()




CTD_ANON_149._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Dbtag'), CTD_ANON_3, scope=CTD_ANON_149, location=pyxb.utils.utility.Location('./pubchem.xsd', 133, 0)))

def _BuildAutomaton_149 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_149
    del _BuildAutomaton_149
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1915, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_149._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Dbtag')), pyxb.utils.utility.Location('./pubchem.xsd', 1916, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_149._Automaton = _BuildAutomaton_149()




CTD_ANON_150._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Org-ref_syn_E'), pyxb.binding.datatypes.string, scope=CTD_ANON_150, location=pyxb.utils.utility.Location('./pubchem.xsd', 1924, 12)))

def _BuildAutomaton_150 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_150
    del _BuildAutomaton_150
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1923, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_150._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Org-ref_syn_E')), pyxb.utils.utility.Location('./pubchem.xsd', 1924, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_150._Automaton = _BuildAutomaton_150()




CTD_ANON_151._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrgName'), CTD_ANON_152, scope=CTD_ANON_151, location=pyxb.utils.utility.Location('./pubchem.xsd', 1939, 0)))

def _BuildAutomaton_151 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_151
    del _BuildAutomaton_151
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_151._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrgName')), pyxb.utils.utility.Location('./pubchem.xsd', 1931, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_151._Automaton = _BuildAutomaton_151()




CTD_ANON_152._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrgName_name'), CTD_ANON_153, scope=CTD_ANON_152, location=pyxb.utils.utility.Location('./pubchem.xsd', 1942, 6)))

CTD_ANON_152._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrgName_attrib'), pyxb.binding.datatypes.string, scope=CTD_ANON_152, location=pyxb.utils.utility.Location('./pubchem.xsd', 1983, 6)))

CTD_ANON_152._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrgName_mod'), CTD_ANON_158, scope=CTD_ANON_152, location=pyxb.utils.utility.Location('./pubchem.xsd', 1984, 6)))

CTD_ANON_152._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrgName_lineage'), pyxb.binding.datatypes.string, scope=CTD_ANON_152, location=pyxb.utils.utility.Location('./pubchem.xsd', 1992, 6)))

CTD_ANON_152._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrgName_gcode'), pyxb.binding.datatypes.integer, scope=CTD_ANON_152, location=pyxb.utils.utility.Location('./pubchem.xsd', 1994, 6)))

CTD_ANON_152._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrgName_mgcode'), pyxb.binding.datatypes.integer, scope=CTD_ANON_152, location=pyxb.utils.utility.Location('./pubchem.xsd', 1996, 6)))

CTD_ANON_152._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrgName_div'), pyxb.binding.datatypes.string, scope=CTD_ANON_152, location=pyxb.utils.utility.Location('./pubchem.xsd', 1998, 6)))

def _BuildAutomaton_152 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_152
    del _BuildAutomaton_152
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1942, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1983, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1984, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1992, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1994, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1996, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1998, 6))
    counters.add(cc_6)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_152._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrgName_name')), pyxb.utils.utility.Location('./pubchem.xsd', 1942, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_152._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrgName_attrib')), pyxb.utils.utility.Location('./pubchem.xsd', 1983, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_152._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrgName_mod')), pyxb.utils.utility.Location('./pubchem.xsd', 1984, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_152._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrgName_lineage')), pyxb.utils.utility.Location('./pubchem.xsd', 1992, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_152._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrgName_gcode')), pyxb.utils.utility.Location('./pubchem.xsd', 1994, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_152._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrgName_mgcode')), pyxb.utils.utility.Location('./pubchem.xsd', 1996, 6))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_152._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrgName_div')), pyxb.utils.utility.Location('./pubchem.xsd', 1998, 6))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_152._Automaton = _BuildAutomaton_152()




CTD_ANON_153._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrgName_name_binomial'), CTD_ANON_154, scope=CTD_ANON_153, location=pyxb.utils.utility.Location('./pubchem.xsd', 1946, 12)))

CTD_ANON_153._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrgName_name_virus'), pyxb.binding.datatypes.string, scope=CTD_ANON_153, location=pyxb.utils.utility.Location('./pubchem.xsd', 1954, 12)))

CTD_ANON_153._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrgName_name_hybrid'), CTD_ANON_155, scope=CTD_ANON_153, location=pyxb.utils.utility.Location('./pubchem.xsd', 1956, 12)))

CTD_ANON_153._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrgName_name_namedhybrid'), CTD_ANON_156, scope=CTD_ANON_153, location=pyxb.utils.utility.Location('./pubchem.xsd', 1964, 12)))

CTD_ANON_153._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrgName_name_partial'), CTD_ANON_157, scope=CTD_ANON_153, location=pyxb.utils.utility.Location('./pubchem.xsd', 1972, 12)))

def _BuildAutomaton_153 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_153
    del _BuildAutomaton_153
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_153._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrgName_name_binomial')), pyxb.utils.utility.Location('./pubchem.xsd', 1946, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_153._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrgName_name_virus')), pyxb.utils.utility.Location('./pubchem.xsd', 1954, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_153._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrgName_name_hybrid')), pyxb.utils.utility.Location('./pubchem.xsd', 1956, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_153._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrgName_name_namedhybrid')), pyxb.utils.utility.Location('./pubchem.xsd', 1964, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_153._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrgName_name_partial')), pyxb.utils.utility.Location('./pubchem.xsd', 1972, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_153._Automaton = _BuildAutomaton_153()




CTD_ANON_154._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BinomialOrgName'), CTD_ANON_160, scope=CTD_ANON_154, location=pyxb.utils.utility.Location('./pubchem.xsd', 2071, 0)))

def _BuildAutomaton_154 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_154
    del _BuildAutomaton_154
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_154._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BinomialOrgName')), pyxb.utils.utility.Location('./pubchem.xsd', 1949, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_154._Automaton = _BuildAutomaton_154()




CTD_ANON_155._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MultiOrgName'), CTD_ANON_161, scope=CTD_ANON_155, location=pyxb.utils.utility.Location('./pubchem.xsd', 2084, 0)))

def _BuildAutomaton_155 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_155
    del _BuildAutomaton_155
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_155._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MultiOrgName')), pyxb.utils.utility.Location('./pubchem.xsd', 1959, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_155._Automaton = _BuildAutomaton_155()




CTD_ANON_156._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BinomialOrgName'), CTD_ANON_160, scope=CTD_ANON_156, location=pyxb.utils.utility.Location('./pubchem.xsd', 2071, 0)))

def _BuildAutomaton_156 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_156
    del _BuildAutomaton_156
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_156._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BinomialOrgName')), pyxb.utils.utility.Location('./pubchem.xsd', 1967, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_156._Automaton = _BuildAutomaton_156()




CTD_ANON_157._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PartialOrgName'), CTD_ANON_162, scope=CTD_ANON_157, location=pyxb.utils.utility.Location('./pubchem.xsd', 2093, 0)))

def _BuildAutomaton_157 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_157
    del _BuildAutomaton_157
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_157._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PartialOrgName')), pyxb.utils.utility.Location('./pubchem.xsd', 1975, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_157._Automaton = _BuildAutomaton_157()




CTD_ANON_158._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrgMod'), CTD_ANON_159, scope=CTD_ANON_158, location=pyxb.utils.utility.Location('./pubchem.xsd', 2003, 0)))

def _BuildAutomaton_158 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_158
    del _BuildAutomaton_158
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 1986, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_158._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrgMod')), pyxb.utils.utility.Location('./pubchem.xsd', 1987, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_158._Automaton = _BuildAutomaton_158()




CTD_ANON_159._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrgMod_subtype'), CTD_ANON_344, scope=CTD_ANON_159, location=pyxb.utils.utility.Location('./pubchem.xsd', 2006, 6)))

CTD_ANON_159._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrgMod_subname'), pyxb.binding.datatypes.string, scope=CTD_ANON_159, location=pyxb.utils.utility.Location('./pubchem.xsd', 2064, 6)))

CTD_ANON_159._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrgMod_attrib'), pyxb.binding.datatypes.string, scope=CTD_ANON_159, location=pyxb.utils.utility.Location('./pubchem.xsd', 2066, 6)))

def _BuildAutomaton_159 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_159
    del _BuildAutomaton_159
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 2066, 6))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_159._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrgMod_subtype')), pyxb.utils.utility.Location('./pubchem.xsd', 2006, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_159._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrgMod_subname')), pyxb.utils.utility.Location('./pubchem.xsd', 2064, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_159._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrgMod_attrib')), pyxb.utils.utility.Location('./pubchem.xsd', 2066, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_159._Automaton = _BuildAutomaton_159()




CTD_ANON_160._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BinomialOrgName_genus'), pyxb.binding.datatypes.string, scope=CTD_ANON_160, location=pyxb.utils.utility.Location('./pubchem.xsd', 2075, 6)))

CTD_ANON_160._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BinomialOrgName_species'), pyxb.binding.datatypes.string, scope=CTD_ANON_160, location=pyxb.utils.utility.Location('./pubchem.xsd', 2077, 6)))

CTD_ANON_160._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BinomialOrgName_subspecies'), pyxb.binding.datatypes.string, scope=CTD_ANON_160, location=pyxb.utils.utility.Location('./pubchem.xsd', 2078, 6)))

def _BuildAutomaton_160 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_160
    del _BuildAutomaton_160
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 2077, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 2078, 6))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_160._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BinomialOrgName_genus')), pyxb.utils.utility.Location('./pubchem.xsd', 2075, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_160._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BinomialOrgName_species')), pyxb.utils.utility.Location('./pubchem.xsd', 2077, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_160._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BinomialOrgName_subspecies')), pyxb.utils.utility.Location('./pubchem.xsd', 2078, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_160._Automaton = _BuildAutomaton_160()




CTD_ANON_161._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OrgName'), CTD_ANON_152, scope=CTD_ANON_161, location=pyxb.utils.utility.Location('./pubchem.xsd', 1939, 0)))

def _BuildAutomaton_161 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_161
    del _BuildAutomaton_161
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 2086, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_161._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OrgName')), pyxb.utils.utility.Location('./pubchem.xsd', 2087, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_161._Automaton = _BuildAutomaton_161()




CTD_ANON_162._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TaxElement'), CTD_ANON_163, scope=CTD_ANON_162, location=pyxb.utils.utility.Location('./pubchem.xsd', 2101, 0)))

def _BuildAutomaton_162 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_162
    del _BuildAutomaton_162
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 2095, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_162._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TaxElement')), pyxb.utils.utility.Location('./pubchem.xsd', 2096, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_162._Automaton = _BuildAutomaton_162()




CTD_ANON_163._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TaxElement_fixed-level'), CTD_ANON_345, scope=CTD_ANON_163, location=pyxb.utils.utility.Location('./pubchem.xsd', 2104, 6)))

CTD_ANON_163._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TaxElement_level'), pyxb.binding.datatypes.string, scope=CTD_ANON_163, location=pyxb.utils.utility.Location('./pubchem.xsd', 2125, 6)))

CTD_ANON_163._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TaxElement_name'), pyxb.binding.datatypes.string, scope=CTD_ANON_163, location=pyxb.utils.utility.Location('./pubchem.xsd', 2126, 6)))

def _BuildAutomaton_163 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_163
    del _BuildAutomaton_163
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 2125, 6))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_163._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TaxElement_fixed-level')), pyxb.utils.utility.Location('./pubchem.xsd', 2104, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_163._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TaxElement_level')), pyxb.utils.utility.Location('./pubchem.xsd', 2125, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_163._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TaxElement_name')), pyxb.utils.utility.Location('./pubchem.xsd', 2126, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_163._Automaton = _BuildAutomaton_163()




CTD_ANON_164._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BioSource_genome'), CTD_ANON_346, scope=CTD_ANON_164, location=pyxb.utils.utility.Location('./pubchem.xsd', 2164, 6)))

CTD_ANON_164._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BioSource_origin'), CTD_ANON_347, scope=CTD_ANON_164, location=pyxb.utils.utility.Location('./pubchem.xsd', 2200, 6)))

CTD_ANON_164._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BioSource_org'), CTD_ANON_165, scope=CTD_ANON_164, location=pyxb.utils.utility.Location('./pubchem.xsd', 2228, 6)))

CTD_ANON_164._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BioSource_subtype'), CTD_ANON_166, scope=CTD_ANON_164, location=pyxb.utils.utility.Location('./pubchem.xsd', 2235, 6)))

CTD_ANON_164._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BioSource_is-focus'), CTD_ANON_167, scope=CTD_ANON_164, location=pyxb.utils.utility.Location('./pubchem.xsd', 2243, 6)))

def _BuildAutomaton_164 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_164
    del _BuildAutomaton_164
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 2164, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 2200, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 2235, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 2243, 6))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_164._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BioSource_genome')), pyxb.utils.utility.Location('./pubchem.xsd', 2164, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_164._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BioSource_origin')), pyxb.utils.utility.Location('./pubchem.xsd', 2200, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_164._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BioSource_org')), pyxb.utils.utility.Location('./pubchem.xsd', 2228, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_164._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BioSource_subtype')), pyxb.utils.utility.Location('./pubchem.xsd', 2235, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_164._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BioSource_is-focus')), pyxb.utils.utility.Location('./pubchem.xsd', 2243, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_164._Automaton = _BuildAutomaton_164()




CTD_ANON_165._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Org-ref'), CTD_ANON_147, scope=CTD_ANON_165, location=pyxb.utils.utility.Location('./pubchem.xsd', 1897, 0)))

def _BuildAutomaton_165 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_165
    del _BuildAutomaton_165
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_165._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Org-ref')), pyxb.utils.utility.Location('./pubchem.xsd', 2231, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_165._Automaton = _BuildAutomaton_165()




CTD_ANON_166._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SubSource'), CTD_ANON_168, scope=CTD_ANON_166, location=pyxb.utils.utility.Location('./pubchem.xsd', 2250, 0)))

def _BuildAutomaton_166 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_166
    del _BuildAutomaton_166
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 2237, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_166._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SubSource')), pyxb.utils.utility.Location('./pubchem.xsd', 2238, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_166._Automaton = _BuildAutomaton_166()




CTD_ANON_168._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SubSource_subtype'), CTD_ANON_348, scope=CTD_ANON_168, location=pyxb.utils.utility.Location('./pubchem.xsd', 2253, 6)))

CTD_ANON_168._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SubSource_name'), pyxb.binding.datatypes.string, scope=CTD_ANON_168, location=pyxb.utils.utility.Location('./pubchem.xsd', 2313, 6)))

CTD_ANON_168._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SubSource_attrib'), pyxb.binding.datatypes.string, scope=CTD_ANON_168, location=pyxb.utils.utility.Location('./pubchem.xsd', 2315, 6)))

def _BuildAutomaton_167 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_167
    del _BuildAutomaton_167
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 2315, 6))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_168._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SubSource_subtype')), pyxb.utils.utility.Location('./pubchem.xsd', 2253, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_168._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SubSource_name')), pyxb.utils.utility.Location('./pubchem.xsd', 2313, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_168._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SubSource_attrib')), pyxb.utils.utility.Location('./pubchem.xsd', 2315, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_168._Automaton = _BuildAutomaton_167()




CTD_ANON_169._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Substance_sid'), CTD_ANON_170, scope=CTD_ANON_169, location=pyxb.utils.utility.Location('./pubchem.xsd', 2386, 6)))

CTD_ANON_169._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Substance_source'), CTD_ANON_171, scope=CTD_ANON_169, location=pyxb.utils.utility.Location('./pubchem.xsd', 2394, 6)))

CTD_ANON_169._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Substance_pub'), CTD_ANON_172, scope=CTD_ANON_169, location=pyxb.utils.utility.Location('./pubchem.xsd', 2405, 6)))

CTD_ANON_169._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Substance_synonyms'), CTD_ANON_173, scope=CTD_ANON_169, location=pyxb.utils.utility.Location('./pubchem.xsd', 2413, 6)))

CTD_ANON_169._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Substance_comment'), CTD_ANON_174, scope=CTD_ANON_169, location=pyxb.utils.utility.Location('./pubchem.xsd', 2421, 6)))

CTD_ANON_169._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Substance_xref'), CTD_ANON_175, scope=CTD_ANON_169, location=pyxb.utils.utility.Location('./pubchem.xsd', 2429, 6)))

CTD_ANON_169._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Substance_compound'), CTD_ANON_176, scope=CTD_ANON_169, location=pyxb.utils.utility.Location('./pubchem.xsd', 2440, 6)))

def _BuildAutomaton_168 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_168
    del _BuildAutomaton_168
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 2405, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 2413, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 2421, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 2429, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 2440, 6))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_169._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Substance_sid')), pyxb.utils.utility.Location('./pubchem.xsd', 2386, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_169._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Substance_source')), pyxb.utils.utility.Location('./pubchem.xsd', 2394, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_169._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Substance_pub')), pyxb.utils.utility.Location('./pubchem.xsd', 2405, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_169._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Substance_synonyms')), pyxb.utils.utility.Location('./pubchem.xsd', 2413, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_169._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Substance_comment')), pyxb.utils.utility.Location('./pubchem.xsd', 2421, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_169._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Substance_xref')), pyxb.utils.utility.Location('./pubchem.xsd', 2429, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_169._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Substance_compound')), pyxb.utils.utility.Location('./pubchem.xsd', 2440, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_169._Automaton = _BuildAutomaton_168()




CTD_ANON_170._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-ID'), CTD_ANON_178, scope=CTD_ANON_170, location=pyxb.utils.utility.Location('./pubchem.xsd', 2461, 0)))

def _BuildAutomaton_169 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_169
    del _BuildAutomaton_169
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_170._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-ID')), pyxb.utils.utility.Location('./pubchem.xsd', 2389, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_170._Automaton = _BuildAutomaton_169()




CTD_ANON_171._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Source'), CTD_ANON_179, scope=CTD_ANON_171, location=pyxb.utils.utility.Location('./pubchem.xsd', 2479, 0)))

def _BuildAutomaton_170 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_170
    del _BuildAutomaton_170
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_171._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Source')), pyxb.utils.utility.Location('./pubchem.xsd', 2397, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_171._Automaton = _BuildAutomaton_170()




CTD_ANON_172._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Pub'), CTD_ANON_125, scope=CTD_ANON_172, location=pyxb.utils.utility.Location('./pubchem.xsd', 1701, 0)))

def _BuildAutomaton_171 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_171
    del _BuildAutomaton_171
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 2407, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_172._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Pub')), pyxb.utils.utility.Location('./pubchem.xsd', 2408, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_172._Automaton = _BuildAutomaton_171()




CTD_ANON_173._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Substance_synonyms_E'), pyxb.binding.datatypes.string, scope=CTD_ANON_173, location=pyxb.utils.utility.Location('./pubchem.xsd', 2416, 12)))

def _BuildAutomaton_172 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_172
    del _BuildAutomaton_172
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 2415, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_173._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Substance_synonyms_E')), pyxb.utils.utility.Location('./pubchem.xsd', 2416, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_173._Automaton = _BuildAutomaton_172()




CTD_ANON_174._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Substance_comment_E'), pyxb.binding.datatypes.string, scope=CTD_ANON_174, location=pyxb.utils.utility.Location('./pubchem.xsd', 2424, 12)))

def _BuildAutomaton_173 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_173
    del _BuildAutomaton_173
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 2423, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_174._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Substance_comment_E')), pyxb.utils.utility.Location('./pubchem.xsd', 2424, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_174._Automaton = _BuildAutomaton_173()




CTD_ANON_175._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData'), CTD_ANON_189, scope=CTD_ANON_175, location=pyxb.utils.utility.Location('./pubchem.xsd', 2587, 0)))

def _BuildAutomaton_174 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_174
    del _BuildAutomaton_174
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 2431, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_175._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData')), pyxb.utils.utility.Location('./pubchem.xsd', 2432, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_175._Automaton = _BuildAutomaton_174()




CTD_ANON_176._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Compounds'), CTD_ANON_200, scope=CTD_ANON_176, location=pyxb.utils.utility.Location('./pubchem.xsd', 2770, 0)))

def _BuildAutomaton_175 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_175
    del _BuildAutomaton_175
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_176._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Compounds')), pyxb.utils.utility.Location('./pubchem.xsd', 2443, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_176._Automaton = _BuildAutomaton_175()




CTD_ANON_177._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Substance'), CTD_ANON_169, scope=CTD_ANON_177, location=pyxb.utils.utility.Location('./pubchem.xsd', 2376, 0)))

def _BuildAutomaton_176 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_176
    del _BuildAutomaton_176
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 2454, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_177._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Substance')), pyxb.utils.utility.Location('./pubchem.xsd', 2455, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_177._Automaton = _BuildAutomaton_176()




CTD_ANON_178._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-ID_id'), pyxb.binding.datatypes.integer, scope=CTD_ANON_178, location=pyxb.utils.utility.Location('./pubchem.xsd', 2468, 6)))

CTD_ANON_178._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-ID_version'), pyxb.binding.datatypes.integer, scope=CTD_ANON_178, location=pyxb.utils.utility.Location('./pubchem.xsd', 2473, 6)))

def _BuildAutomaton_177 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_177
    del _BuildAutomaton_177
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_178._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-ID_id')), pyxb.utils.utility.Location('./pubchem.xsd', 2468, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_178._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-ID_version')), pyxb.utils.utility.Location('./pubchem.xsd', 2473, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_178._Automaton = _BuildAutomaton_177()




CTD_ANON_179._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Source_individual'), CTD_ANON_180, scope=CTD_ANON_179, location=pyxb.utils.utility.Location('./pubchem.xsd', 2483, 6)))

CTD_ANON_179._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Source_db'), CTD_ANON_181, scope=CTD_ANON_179, location=pyxb.utils.utility.Location('./pubchem.xsd', 2491, 6)))

CTD_ANON_179._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Source_mmdb'), CTD_ANON_182, scope=CTD_ANON_179, location=pyxb.utils.utility.Location('./pubchem.xsd', 2499, 6)))

def _BuildAutomaton_178 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_178
    del _BuildAutomaton_178
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_179._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Source_individual')), pyxb.utils.utility.Location('./pubchem.xsd', 2483, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_179._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Source_db')), pyxb.utils.utility.Location('./pubchem.xsd', 2491, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_179._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Source_mmdb')), pyxb.utils.utility.Location('./pubchem.xsd', 2499, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_179._Automaton = _BuildAutomaton_178()




CTD_ANON_180._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Pub'), CTD_ANON_125, scope=CTD_ANON_180, location=pyxb.utils.utility.Location('./pubchem.xsd', 1701, 0)))

def _BuildAutomaton_179 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_179
    del _BuildAutomaton_179
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_180._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Pub')), pyxb.utils.utility.Location('./pubchem.xsd', 2486, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_180._Automaton = _BuildAutomaton_179()




CTD_ANON_181._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-DBTracking'), CTD_ANON_183, scope=CTD_ANON_181, location=pyxb.utils.utility.Location('./pubchem.xsd', 2511, 0)))

def _BuildAutomaton_180 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_180
    del _BuildAutomaton_180
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_181._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-DBTracking')), pyxb.utils.utility.Location('./pubchem.xsd', 2494, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_181._Automaton = _BuildAutomaton_180()




CTD_ANON_182._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-MMDBSource'), CTD_ANON_187, scope=CTD_ANON_182, location=pyxb.utils.utility.Location('./pubchem.xsd', 2547, 0)))

def _BuildAutomaton_181 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_181
    del _BuildAutomaton_181
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_182._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-MMDBSource')), pyxb.utils.utility.Location('./pubchem.xsd', 2502, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_182._Automaton = _BuildAutomaton_181()




CTD_ANON_183._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-DBTracking_name'), pyxb.binding.datatypes.string, scope=CTD_ANON_183, location=pyxb.utils.utility.Location('./pubchem.xsd', 2515, 6)))

CTD_ANON_183._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-DBTracking_source-id'), CTD_ANON_184, scope=CTD_ANON_183, location=pyxb.utils.utility.Location('./pubchem.xsd', 2517, 6)))

CTD_ANON_183._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-DBTracking_date'), CTD_ANON_185, scope=CTD_ANON_183, location=pyxb.utils.utility.Location('./pubchem.xsd', 2525, 6)))

CTD_ANON_183._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-DBTracking_description'), pyxb.binding.datatypes.string, scope=CTD_ANON_183, location=pyxb.utils.utility.Location('./pubchem.xsd', 2533, 6)))

CTD_ANON_183._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-DBTracking_pub'), CTD_ANON_186, scope=CTD_ANON_183, location=pyxb.utils.utility.Location('./pubchem.xsd', 2535, 6)))

def _BuildAutomaton_182 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_182
    del _BuildAutomaton_182
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 2525, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 2533, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 2535, 6))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_183._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-DBTracking_name')), pyxb.utils.utility.Location('./pubchem.xsd', 2515, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_183._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-DBTracking_source-id')), pyxb.utils.utility.Location('./pubchem.xsd', 2517, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_183._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-DBTracking_date')), pyxb.utils.utility.Location('./pubchem.xsd', 2525, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_183._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-DBTracking_description')), pyxb.utils.utility.Location('./pubchem.xsd', 2533, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_183._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-DBTracking_pub')), pyxb.utils.utility.Location('./pubchem.xsd', 2535, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_183._Automaton = _BuildAutomaton_182()




CTD_ANON_184._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Object-id'), CTD_ANON_5, scope=CTD_ANON_184, location=pyxb.utils.utility.Location('./pubchem.xsd', 154, 0)))

def _BuildAutomaton_183 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_183
    del _BuildAutomaton_183
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_184._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Object-id')), pyxb.utils.utility.Location('./pubchem.xsd', 2520, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_184._Automaton = _BuildAutomaton_183()




CTD_ANON_185._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Date'), CTD_ANON, scope=CTD_ANON_185, location=pyxb.utils.utility.Location('./pubchem.xsd', 89, 0)))

def _BuildAutomaton_184 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_184
    del _BuildAutomaton_184
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_185._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Date')), pyxb.utils.utility.Location('./pubchem.xsd', 2528, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_185._Automaton = _BuildAutomaton_184()




CTD_ANON_186._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Pub'), CTD_ANON_125, scope=CTD_ANON_186, location=pyxb.utils.utility.Location('./pubchem.xsd', 1701, 0)))

def _BuildAutomaton_185 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_185
    del _BuildAutomaton_185
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_186._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Pub')), pyxb.utils.utility.Location('./pubchem.xsd', 2538, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_186._Automaton = _BuildAutomaton_185()




CTD_ANON_187._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-MMDBSource_mmdb-id'), pyxb.binding.datatypes.integer, scope=CTD_ANON_187, location=pyxb.utils.utility.Location('./pubchem.xsd', 2554, 6)))

CTD_ANON_187._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-MMDBSource_molecule-id'), pyxb.binding.datatypes.integer, scope=CTD_ANON_187, location=pyxb.utils.utility.Location('./pubchem.xsd', 2559, 6)))

CTD_ANON_187._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-MMDBSource_molecule-name'), CTD_ANON_188, scope=CTD_ANON_187, location=pyxb.utils.utility.Location('./pubchem.xsd', 2561, 6)))

CTD_ANON_187._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-MMDBSource_residue-id'), pyxb.binding.datatypes.integer, scope=CTD_ANON_187, location=pyxb.utils.utility.Location('./pubchem.xsd', 2572, 6)))

CTD_ANON_187._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-MMDBSource_residue-name'), pyxb.binding.datatypes.string, scope=CTD_ANON_187, location=pyxb.utils.utility.Location('./pubchem.xsd', 2574, 6)))

CTD_ANON_187._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-MMDBSource_atom-id'), pyxb.binding.datatypes.integer, scope=CTD_ANON_187, location=pyxb.utils.utility.Location('./pubchem.xsd', 2579, 6)))

CTD_ANON_187._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-MMDBSource_atom-name'), pyxb.binding.datatypes.string, scope=CTD_ANON_187, location=pyxb.utils.utility.Location('./pubchem.xsd', 2581, 6)))

def _BuildAutomaton_186 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_186
    del _BuildAutomaton_186
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 2572, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 2574, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 2579, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 2581, 6))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_187._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-MMDBSource_mmdb-id')), pyxb.utils.utility.Location('./pubchem.xsd', 2554, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_187._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-MMDBSource_molecule-id')), pyxb.utils.utility.Location('./pubchem.xsd', 2559, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_187._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-MMDBSource_molecule-name')), pyxb.utils.utility.Location('./pubchem.xsd', 2561, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_187._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-MMDBSource_residue-id')), pyxb.utils.utility.Location('./pubchem.xsd', 2572, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_187._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-MMDBSource_residue-name')), pyxb.utils.utility.Location('./pubchem.xsd', 2574, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_187._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-MMDBSource_atom-id')), pyxb.utils.utility.Location('./pubchem.xsd', 2579, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_187._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-MMDBSource_atom-name')), pyxb.utils.utility.Location('./pubchem.xsd', 2581, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_187._Automaton = _BuildAutomaton_186()




CTD_ANON_188._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-MMDBSource_molecule-name_E'), pyxb.binding.datatypes.string, scope=CTD_ANON_188, location=pyxb.utils.utility.Location('./pubchem.xsd', 2564, 12)))

def _BuildAutomaton_187 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_187
    del _BuildAutomaton_187
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 2563, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_188._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-MMDBSource_molecule-name_E')), pyxb.utils.utility.Location('./pubchem.xsd', 2564, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_188._Automaton = _BuildAutomaton_187()




CTD_ANON_189._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_regid'), pyxb.binding.datatypes.string, scope=CTD_ANON_189, location=pyxb.utils.utility.Location('./pubchem.xsd', 2591, 6)))

CTD_ANON_189._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_rn'), pyxb.binding.datatypes.string, scope=CTD_ANON_189, location=pyxb.utils.utility.Location('./pubchem.xsd', 2593, 6)))

CTD_ANON_189._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_mesh'), pyxb.binding.datatypes.string, scope=CTD_ANON_189, location=pyxb.utils.utility.Location('./pubchem.xsd', 2595, 6)))

CTD_ANON_189._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_pmid'), pyxb.binding.datatypes.integer, scope=CTD_ANON_189, location=pyxb.utils.utility.Location('./pubchem.xsd', 2600, 6)))

CTD_ANON_189._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_gi'), pyxb.binding.datatypes.integer, scope=CTD_ANON_189, location=pyxb.utils.utility.Location('./pubchem.xsd', 2606, 6)))

CTD_ANON_189._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_mmdb'), pyxb.binding.datatypes.integer, scope=CTD_ANON_189, location=pyxb.utils.utility.Location('./pubchem.xsd', 2611, 6)))

CTD_ANON_189._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_sid'), pyxb.binding.datatypes.integer, scope=CTD_ANON_189, location=pyxb.utils.utility.Location('./pubchem.xsd', 2616, 6)))

CTD_ANON_189._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_cid'), pyxb.binding.datatypes.integer, scope=CTD_ANON_189, location=pyxb.utils.utility.Location('./pubchem.xsd', 2621, 6)))

CTD_ANON_189._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_dburl'), pyxb.binding.datatypes.string, scope=CTD_ANON_189, location=pyxb.utils.utility.Location('./pubchem.xsd', 2623, 6)))

CTD_ANON_189._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_sburl'), pyxb.binding.datatypes.string, scope=CTD_ANON_189, location=pyxb.utils.utility.Location('./pubchem.xsd', 2625, 6)))

CTD_ANON_189._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_asurl'), pyxb.binding.datatypes.string, scope=CTD_ANON_189, location=pyxb.utils.utility.Location('./pubchem.xsd', 2627, 6)))

CTD_ANON_189._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_protein-gi'), pyxb.binding.datatypes.integer, scope=CTD_ANON_189, location=pyxb.utils.utility.Location('./pubchem.xsd', 2632, 6)))

CTD_ANON_189._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_nucleotide-gi'), pyxb.binding.datatypes.integer, scope=CTD_ANON_189, location=pyxb.utils.utility.Location('./pubchem.xsd', 2637, 6)))

CTD_ANON_189._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_taxonomy'), pyxb.binding.datatypes.integer, scope=CTD_ANON_189, location=pyxb.utils.utility.Location('./pubchem.xsd', 2642, 6)))

CTD_ANON_189._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_aid'), pyxb.binding.datatypes.integer, scope=CTD_ANON_189, location=pyxb.utils.utility.Location('./pubchem.xsd', 2647, 6)))

CTD_ANON_189._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_mim'), pyxb.binding.datatypes.integer, scope=CTD_ANON_189, location=pyxb.utils.utility.Location('./pubchem.xsd', 2652, 6)))

CTD_ANON_189._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_gene'), pyxb.binding.datatypes.integer, scope=CTD_ANON_189, location=pyxb.utils.utility.Location('./pubchem.xsd', 2657, 6)))

CTD_ANON_189._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_probe'), pyxb.binding.datatypes.integer, scope=CTD_ANON_189, location=pyxb.utils.utility.Location('./pubchem.xsd', 2662, 6)))

CTD_ANON_189._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_biosystem'), pyxb.binding.datatypes.integer, scope=CTD_ANON_189, location=pyxb.utils.utility.Location('./pubchem.xsd', 2667, 6)))

CTD_ANON_189._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_geogse'), pyxb.binding.datatypes.integer, scope=CTD_ANON_189, location=pyxb.utils.utility.Location('./pubchem.xsd', 2672, 6)))

CTD_ANON_189._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_geogsm'), pyxb.binding.datatypes.integer, scope=CTD_ANON_189, location=pyxb.utils.utility.Location('./pubchem.xsd', 2677, 6)))

CTD_ANON_189._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_patent'), pyxb.binding.datatypes.string, scope=CTD_ANON_189, location=pyxb.utils.utility.Location('./pubchem.xsd', 2679, 6)))

def _BuildAutomaton_188 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_188
    del _BuildAutomaton_188
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_189._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_regid')), pyxb.utils.utility.Location('./pubchem.xsd', 2591, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_189._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_rn')), pyxb.utils.utility.Location('./pubchem.xsd', 2593, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_189._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_mesh')), pyxb.utils.utility.Location('./pubchem.xsd', 2595, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_189._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_pmid')), pyxb.utils.utility.Location('./pubchem.xsd', 2600, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_189._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_gi')), pyxb.utils.utility.Location('./pubchem.xsd', 2606, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_189._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_mmdb')), pyxb.utils.utility.Location('./pubchem.xsd', 2611, 6))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_189._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_sid')), pyxb.utils.utility.Location('./pubchem.xsd', 2616, 6))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_189._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_cid')), pyxb.utils.utility.Location('./pubchem.xsd', 2621, 6))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_189._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_dburl')), pyxb.utils.utility.Location('./pubchem.xsd', 2623, 6))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_189._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_sburl')), pyxb.utils.utility.Location('./pubchem.xsd', 2625, 6))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_189._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_asurl')), pyxb.utils.utility.Location('./pubchem.xsd', 2627, 6))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_189._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_protein-gi')), pyxb.utils.utility.Location('./pubchem.xsd', 2632, 6))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_189._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_nucleotide-gi')), pyxb.utils.utility.Location('./pubchem.xsd', 2637, 6))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_189._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_taxonomy')), pyxb.utils.utility.Location('./pubchem.xsd', 2642, 6))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_189._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_aid')), pyxb.utils.utility.Location('./pubchem.xsd', 2647, 6))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_189._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_mim')), pyxb.utils.utility.Location('./pubchem.xsd', 2652, 6))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_189._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_gene')), pyxb.utils.utility.Location('./pubchem.xsd', 2657, 6))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_189._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_probe')), pyxb.utils.utility.Location('./pubchem.xsd', 2662, 6))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_189._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_biosystem')), pyxb.utils.utility.Location('./pubchem.xsd', 2667, 6))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_189._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_geogse')), pyxb.utils.utility.Location('./pubchem.xsd', 2672, 6))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_189._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_geogsm')), pyxb.utils.utility.Location('./pubchem.xsd', 2677, 6))
    st_20 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_189._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData_patent')), pyxb.utils.utility.Location('./pubchem.xsd', 2679, 6))
    st_21 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    transitions = []
    st_9._set_transitionSet(transitions)
    transitions = []
    st_10._set_transitionSet(transitions)
    transitions = []
    st_11._set_transitionSet(transitions)
    transitions = []
    st_12._set_transitionSet(transitions)
    transitions = []
    st_13._set_transitionSet(transitions)
    transitions = []
    st_14._set_transitionSet(transitions)
    transitions = []
    st_15._set_transitionSet(transitions)
    transitions = []
    st_16._set_transitionSet(transitions)
    transitions = []
    st_17._set_transitionSet(transitions)
    transitions = []
    st_18._set_transitionSet(transitions)
    transitions = []
    st_19._set_transitionSet(transitions)
    transitions = []
    st_20._set_transitionSet(transitions)
    transitions = []
    st_21._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_189._Automaton = _BuildAutomaton_188()




CTD_ANON_190._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Compound_id'), CTD_ANON_191, scope=CTD_ANON_190, location=pyxb.utils.utility.Location('./pubchem.xsd', 2692, 6)))

CTD_ANON_190._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Compound_atoms'), CTD_ANON_192, scope=CTD_ANON_190, location=pyxb.utils.utility.Location('./pubchem.xsd', 2700, 6)))

CTD_ANON_190._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Compound_bonds'), CTD_ANON_193, scope=CTD_ANON_190, location=pyxb.utils.utility.Location('./pubchem.xsd', 2708, 6)))

CTD_ANON_190._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Compound_stereo'), CTD_ANON_194, scope=CTD_ANON_190, location=pyxb.utils.utility.Location('./pubchem.xsd', 2716, 6)))

CTD_ANON_190._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Compound_coords'), CTD_ANON_195, scope=CTD_ANON_190, location=pyxb.utils.utility.Location('./pubchem.xsd', 2724, 6)))

CTD_ANON_190._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Compound_charge'), pyxb.binding.datatypes.integer, scope=CTD_ANON_190, location=pyxb.utils.utility.Location('./pubchem.xsd', 2732, 6)))

CTD_ANON_190._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Compound_props'), CTD_ANON_196, scope=CTD_ANON_190, location=pyxb.utils.utility.Location('./pubchem.xsd', 2734, 6)))

CTD_ANON_190._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Compound_stereogroups'), CTD_ANON_197, scope=CTD_ANON_190, location=pyxb.utils.utility.Location('./pubchem.xsd', 2742, 6)))

CTD_ANON_190._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Compound_count'), CTD_ANON_198, scope=CTD_ANON_190, location=pyxb.utils.utility.Location('./pubchem.xsd', 2750, 6)))

CTD_ANON_190._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Compound_vbalt'), CTD_ANON_199, scope=CTD_ANON_190, location=pyxb.utils.utility.Location('./pubchem.xsd', 2758, 6)))

def _BuildAutomaton_189 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_189
    del _BuildAutomaton_189
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 2700, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 2708, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 2716, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 2724, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 2732, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 2734, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 2742, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 2750, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 2758, 6))
    counters.add(cc_8)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_190._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Compound_id')), pyxb.utils.utility.Location('./pubchem.xsd', 2692, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_190._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Compound_atoms')), pyxb.utils.utility.Location('./pubchem.xsd', 2700, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_190._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Compound_bonds')), pyxb.utils.utility.Location('./pubchem.xsd', 2708, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_190._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Compound_stereo')), pyxb.utils.utility.Location('./pubchem.xsd', 2716, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_190._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Compound_coords')), pyxb.utils.utility.Location('./pubchem.xsd', 2724, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_190._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Compound_charge')), pyxb.utils.utility.Location('./pubchem.xsd', 2732, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_190._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Compound_props')), pyxb.utils.utility.Location('./pubchem.xsd', 2734, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_190._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Compound_stereogroups')), pyxb.utils.utility.Location('./pubchem.xsd', 2742, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_190._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Compound_count')), pyxb.utils.utility.Location('./pubchem.xsd', 2750, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_190._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Compound_vbalt')), pyxb.utils.utility.Location('./pubchem.xsd', 2758, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_190._Automaton = _BuildAutomaton_189()




CTD_ANON_191._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-CompoundType'), CTD_ANON_201, scope=CTD_ANON_191, location=pyxb.utils.utility.Location('./pubchem.xsd', 2782, 0)))

def _BuildAutomaton_190 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_190
    del _BuildAutomaton_190
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_191._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-CompoundType')), pyxb.utils.utility.Location('./pubchem.xsd', 2695, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_191._Automaton = _BuildAutomaton_190()




CTD_ANON_192._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Atoms'), CTD_ANON_233, scope=CTD_ANON_192, location=pyxb.utils.utility.Location('./pubchem.xsd', 3372, 0)))

def _BuildAutomaton_191 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_191
    del _BuildAutomaton_191
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_192._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Atoms')), pyxb.utils.utility.Location('./pubchem.xsd', 2703, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_192._Automaton = _BuildAutomaton_191()




CTD_ANON_193._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Bonds'), CTD_ANON_247, scope=CTD_ANON_193, location=pyxb.utils.utility.Location('./pubchem.xsd', 3688, 0)))

def _BuildAutomaton_192 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_192
    del _BuildAutomaton_192
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_193._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Bonds')), pyxb.utils.utility.Location('./pubchem.xsd', 2711, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_193._Automaton = _BuildAutomaton_192()




CTD_ANON_194._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoCenter'), CTD_ANON_251, scope=CTD_ANON_194, location=pyxb.utils.utility.Location('./pubchem.xsd', 3764, 0)))

def _BuildAutomaton_193 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_193
    del _BuildAutomaton_193
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 2718, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_194._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoCenter')), pyxb.utils.utility.Location('./pubchem.xsd', 2719, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_194._Automaton = _BuildAutomaton_193()




CTD_ANON_195._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Coordinates'), CTD_ANON_216, scope=CTD_ANON_195, location=pyxb.utils.utility.Location('./pubchem.xsd', 3121, 0)))

def _BuildAutomaton_194 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_194
    del _BuildAutomaton_194
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 2726, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_195._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Coordinates')), pyxb.utils.utility.Location('./pubchem.xsd', 2727, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_195._Automaton = _BuildAutomaton_194()




CTD_ANON_196._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData'), CTD_ANON_206, scope=CTD_ANON_196, location=pyxb.utils.utility.Location('./pubchem.xsd', 2925, 0)))

def _BuildAutomaton_195 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_195
    del _BuildAutomaton_195
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 2736, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_196._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData')), pyxb.utils.utility.Location('./pubchem.xsd', 2737, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_196._Automaton = _BuildAutomaton_195()




CTD_ANON_197._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoGroup'), CTD_ANON_204, scope=CTD_ANON_197, location=pyxb.utils.utility.Location('./pubchem.xsd', 2882, 0)))

def _BuildAutomaton_196 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_196
    del _BuildAutomaton_196
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 2744, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_197._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoGroup')), pyxb.utils.utility.Location('./pubchem.xsd', 2745, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_197._Automaton = _BuildAutomaton_196()




CTD_ANON_198._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Count'), CTD_ANON_203, scope=CTD_ANON_198, location=pyxb.utils.utility.Location('./pubchem.xsd', 2837, 0)))

def _BuildAutomaton_197 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_197
    del _BuildAutomaton_197
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_198._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Count')), pyxb.utils.utility.Location('./pubchem.xsd', 2753, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_198._Automaton = _BuildAutomaton_197()




CTD_ANON_199._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Compounds'), CTD_ANON_200, scope=CTD_ANON_199, location=pyxb.utils.utility.Location('./pubchem.xsd', 2770, 0)))

def _BuildAutomaton_198 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_198
    del _BuildAutomaton_198
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_199._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Compounds')), pyxb.utils.utility.Location('./pubchem.xsd', 2761, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_199._Automaton = _BuildAutomaton_198()




CTD_ANON_200._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Compound'), CTD_ANON_190, scope=CTD_ANON_200, location=pyxb.utils.utility.Location('./pubchem.xsd', 2685, 0)))

def _BuildAutomaton_199 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_199
    del _BuildAutomaton_199
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 2772, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_200._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Compound')), pyxb.utils.utility.Location('./pubchem.xsd', 2773, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_200._Automaton = _BuildAutomaton_199()




CTD_ANON_201._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-CompoundType_type'), CTD_ANON_349, scope=CTD_ANON_201, location=pyxb.utils.utility.Location('./pubchem.xsd', 2785, 6)))

CTD_ANON_201._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-CompoundType_id'), CTD_ANON_202, scope=CTD_ANON_201, location=pyxb.utils.utility.Location('./pubchem.xsd', 2820, 6)))

def _BuildAutomaton_200 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_200
    del _BuildAutomaton_200
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 2785, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 2820, 6))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_201._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-CompoundType_type')), pyxb.utils.utility.Location('./pubchem.xsd', 2785, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_201._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-CompoundType_id')), pyxb.utils.utility.Location('./pubchem.xsd', 2820, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_201._Automaton = _BuildAutomaton_200()




CTD_ANON_202._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-CompoundType_id_cid'), pyxb.binding.datatypes.integer, scope=CTD_ANON_202, location=pyxb.utils.utility.Location('./pubchem.xsd', 2824, 12)))

CTD_ANON_202._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-CompoundType_id_sid'), pyxb.binding.datatypes.integer, scope=CTD_ANON_202, location=pyxb.utils.utility.Location('./pubchem.xsd', 2826, 12)))

CTD_ANON_202._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-CompoundType_id_xid'), pyxb.binding.datatypes.integer, scope=CTD_ANON_202, location=pyxb.utils.utility.Location('./pubchem.xsd', 2828, 12)))

def _BuildAutomaton_201 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_201
    del _BuildAutomaton_201
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_202._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-CompoundType_id_cid')), pyxb.utils.utility.Location('./pubchem.xsd', 2824, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_202._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-CompoundType_id_sid')), pyxb.utils.utility.Location('./pubchem.xsd', 2826, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_202._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-CompoundType_id_xid')), pyxb.utils.utility.Location('./pubchem.xsd', 2828, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_202._Automaton = _BuildAutomaton_201()




CTD_ANON_203._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Count_heavy-atom'), pyxb.binding.datatypes.integer, scope=CTD_ANON_203, location=pyxb.utils.utility.Location('./pubchem.xsd', 2841, 6)))

CTD_ANON_203._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Count_atom-chiral'), pyxb.binding.datatypes.integer, scope=CTD_ANON_203, location=pyxb.utils.utility.Location('./pubchem.xsd', 2846, 6)))

CTD_ANON_203._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Count_atom-chiral-def'), pyxb.binding.datatypes.integer, scope=CTD_ANON_203, location=pyxb.utils.utility.Location('./pubchem.xsd', 2848, 6)))

CTD_ANON_203._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Count_atom-chiral-undef'), pyxb.binding.datatypes.integer, scope=CTD_ANON_203, location=pyxb.utils.utility.Location('./pubchem.xsd', 2850, 6)))

CTD_ANON_203._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Count_bond-chiral'), pyxb.binding.datatypes.integer, scope=CTD_ANON_203, location=pyxb.utils.utility.Location('./pubchem.xsd', 2852, 6)))

CTD_ANON_203._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Count_bond-chiral-def'), pyxb.binding.datatypes.integer, scope=CTD_ANON_203, location=pyxb.utils.utility.Location('./pubchem.xsd', 2854, 6)))

CTD_ANON_203._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Count_bond-chiral-undef'), pyxb.binding.datatypes.integer, scope=CTD_ANON_203, location=pyxb.utils.utility.Location('./pubchem.xsd', 2856, 6)))

CTD_ANON_203._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Count_isotope-atom'), pyxb.binding.datatypes.integer, scope=CTD_ANON_203, location=pyxb.utils.utility.Location('./pubchem.xsd', 2861, 6)))

CTD_ANON_203._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Count_covalent-unit'), pyxb.binding.datatypes.integer, scope=CTD_ANON_203, location=pyxb.utils.utility.Location('./pubchem.xsd', 2866, 6)))

CTD_ANON_203._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Count_tautomers'), pyxb.binding.datatypes.integer, scope=CTD_ANON_203, location=pyxb.utils.utility.Location('./pubchem.xsd', 2868, 6)))

def _BuildAutomaton_202 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_202
    del _BuildAutomaton_202
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_203._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Count_heavy-atom')), pyxb.utils.utility.Location('./pubchem.xsd', 2841, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_203._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Count_atom-chiral')), pyxb.utils.utility.Location('./pubchem.xsd', 2846, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_203._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Count_atom-chiral-def')), pyxb.utils.utility.Location('./pubchem.xsd', 2848, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_203._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Count_atom-chiral-undef')), pyxb.utils.utility.Location('./pubchem.xsd', 2850, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_203._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Count_bond-chiral')), pyxb.utils.utility.Location('./pubchem.xsd', 2852, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_203._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Count_bond-chiral-def')), pyxb.utils.utility.Location('./pubchem.xsd', 2854, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_203._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Count_bond-chiral-undef')), pyxb.utils.utility.Location('./pubchem.xsd', 2856, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_203._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Count_isotope-atom')), pyxb.utils.utility.Location('./pubchem.xsd', 2861, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_203._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Count_covalent-unit')), pyxb.utils.utility.Location('./pubchem.xsd', 2866, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_203._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Count_tautomers')), pyxb.utils.utility.Location('./pubchem.xsd', 2868, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_203._Automaton = _BuildAutomaton_202()




CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoGroup_type'), CTD_ANON_350, scope=CTD_ANON_204, location=pyxb.utils.utility.Location('./pubchem.xsd', 2885, 6)))

CTD_ANON_204._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoGroup_aid'), CTD_ANON_205, scope=CTD_ANON_204, location=pyxb.utils.utility.Location('./pubchem.xsd', 2913, 6)))

def _BuildAutomaton_203 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_203
    del _BuildAutomaton_203
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoGroup_type')), pyxb.utils.utility.Location('./pubchem.xsd', 2885, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_204._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoGroup_aid')), pyxb.utils.utility.Location('./pubchem.xsd', 2913, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_204._Automaton = _BuildAutomaton_203()




CTD_ANON_205._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoGroup_aid_E'), pyxb.binding.datatypes.integer, scope=CTD_ANON_205, location=pyxb.utils.utility.Location('./pubchem.xsd', 2916, 12)))

def _BuildAutomaton_204 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_204
    del _BuildAutomaton_204
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 2915, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_205._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoGroup_aid_E')), pyxb.utils.utility.Location('./pubchem.xsd', 2916, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_205._Automaton = _BuildAutomaton_204()




CTD_ANON_206._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData_urn'), CTD_ANON_207, scope=CTD_ANON_206, location=pyxb.utils.utility.Location('./pubchem.xsd', 2929, 6)))

CTD_ANON_206._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData_value'), CTD_ANON_208, scope=CTD_ANON_206, location=pyxb.utils.utility.Location('./pubchem.xsd', 2936, 6)))

def _BuildAutomaton_205 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_205
    del _BuildAutomaton_205
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_206._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData_urn')), pyxb.utils.utility.Location('./pubchem.xsd', 2929, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_206._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData_value')), pyxb.utils.utility.Location('./pubchem.xsd', 2936, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_206._Automaton = _BuildAutomaton_205()




CTD_ANON_207._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Urn'), CTD_ANON_214, scope=CTD_ANON_207, location=pyxb.utils.utility.Location('./pubchem.xsd', 3030, 0)))

def _BuildAutomaton_206 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_206
    del _BuildAutomaton_206
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_207._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Urn')), pyxb.utils.utility.Location('./pubchem.xsd', 2932, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_207._Automaton = _BuildAutomaton_206()




CTD_ANON_208._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData_value_bval'), CTD_ANON_351, scope=CTD_ANON_208, location=pyxb.utils.utility.Location('./pubchem.xsd', 2940, 12)))

CTD_ANON_208._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData_value_bvec'), CTD_ANON_209, scope=CTD_ANON_208, location=pyxb.utils.utility.Location('./pubchem.xsd', 2953, 12)))

CTD_ANON_208._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData_value_ival'), pyxb.binding.datatypes.integer, scope=CTD_ANON_208, location=pyxb.utils.utility.Location('./pubchem.xsd', 2972, 12)))

CTD_ANON_208._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData_value_ivec'), CTD_ANON_210, scope=CTD_ANON_208, location=pyxb.utils.utility.Location('./pubchem.xsd', 2974, 12)))

CTD_ANON_208._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData_value_fval'), pyxb.binding.datatypes.double, scope=CTD_ANON_208, location=pyxb.utils.utility.Location('./pubchem.xsd', 2982, 12)))

CTD_ANON_208._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData_value_fvec'), CTD_ANON_211, scope=CTD_ANON_208, location=pyxb.utils.utility.Location('./pubchem.xsd', 2984, 12)))

CTD_ANON_208._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData_value_sval'), pyxb.binding.datatypes.string, scope=CTD_ANON_208, location=pyxb.utils.utility.Location('./pubchem.xsd', 2992, 12)))

CTD_ANON_208._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData_value_slist'), CTD_ANON_212, scope=CTD_ANON_208, location=pyxb.utils.utility.Location('./pubchem.xsd', 2994, 12)))

CTD_ANON_208._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData_value_date'), CTD_ANON_213, scope=CTD_ANON_208, location=pyxb.utils.utility.Location('./pubchem.xsd', 3002, 12)))

CTD_ANON_208._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData_value_binary'), pyxb.binding.datatypes.hexBinary, scope=CTD_ANON_208, location=pyxb.utils.utility.Location('./pubchem.xsd', 3010, 12)))

CTD_ANON_208._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData_value_bitlist'), STD_ANON_26, scope=CTD_ANON_208, location=pyxb.utils.utility.Location('./pubchem.xsd', 3012, 12)))

def _BuildAutomaton_207 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_207
    del _BuildAutomaton_207
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_208._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData_value_bval')), pyxb.utils.utility.Location('./pubchem.xsd', 2940, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_208._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData_value_bvec')), pyxb.utils.utility.Location('./pubchem.xsd', 2953, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_208._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData_value_ival')), pyxb.utils.utility.Location('./pubchem.xsd', 2972, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_208._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData_value_ivec')), pyxb.utils.utility.Location('./pubchem.xsd', 2974, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_208._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData_value_fval')), pyxb.utils.utility.Location('./pubchem.xsd', 2982, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_208._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData_value_fvec')), pyxb.utils.utility.Location('./pubchem.xsd', 2984, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_208._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData_value_sval')), pyxb.utils.utility.Location('./pubchem.xsd', 2992, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_208._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData_value_slist')), pyxb.utils.utility.Location('./pubchem.xsd', 2994, 12))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_208._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData_value_date')), pyxb.utils.utility.Location('./pubchem.xsd', 3002, 12))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_208._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData_value_binary')), pyxb.utils.utility.Location('./pubchem.xsd', 3010, 12))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_208._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData_value_bitlist')), pyxb.utils.utility.Location('./pubchem.xsd', 3012, 12))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    transitions = []
    st_9._set_transitionSet(transitions)
    transitions = []
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_208._Automaton = _BuildAutomaton_207()




CTD_ANON_209._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData_value_bvec_E'), CTD_ANON_352, scope=CTD_ANON_209, location=pyxb.utils.utility.Location('./pubchem.xsd', 2956, 18)))

def _BuildAutomaton_208 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_208
    del _BuildAutomaton_208
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 2955, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_209._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData_value_bvec_E')), pyxb.utils.utility.Location('./pubchem.xsd', 2956, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_209._Automaton = _BuildAutomaton_208()




CTD_ANON_210._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData_value_ivec_E'), pyxb.binding.datatypes.integer, scope=CTD_ANON_210, location=pyxb.utils.utility.Location('./pubchem.xsd', 2977, 18)))

def _BuildAutomaton_209 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_209
    del _BuildAutomaton_209
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 2976, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_210._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData_value_ivec_E')), pyxb.utils.utility.Location('./pubchem.xsd', 2977, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_210._Automaton = _BuildAutomaton_209()




CTD_ANON_211._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData_value_fvec_E'), pyxb.binding.datatypes.double, scope=CTD_ANON_211, location=pyxb.utils.utility.Location('./pubchem.xsd', 2987, 18)))

def _BuildAutomaton_210 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_210
    del _BuildAutomaton_210
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 2986, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_211._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData_value_fvec_E')), pyxb.utils.utility.Location('./pubchem.xsd', 2987, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_211._Automaton = _BuildAutomaton_210()




CTD_ANON_212._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData_value_slist_E'), pyxb.binding.datatypes.string, scope=CTD_ANON_212, location=pyxb.utils.utility.Location('./pubchem.xsd', 2997, 18)))

def _BuildAutomaton_211 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_211
    del _BuildAutomaton_211
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 2996, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_212._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData_value_slist_E')), pyxb.utils.utility.Location('./pubchem.xsd', 2997, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_212._Automaton = _BuildAutomaton_211()




CTD_ANON_213._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Date'), CTD_ANON, scope=CTD_ANON_213, location=pyxb.utils.utility.Location('./pubchem.xsd', 89, 0)))

def _BuildAutomaton_212 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_212
    del _BuildAutomaton_212
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_213._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Date')), pyxb.utils.utility.Location('./pubchem.xsd', 3005, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_213._Automaton = _BuildAutomaton_212()




CTD_ANON_214._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Urn_label'), pyxb.binding.datatypes.string, scope=CTD_ANON_214, location=pyxb.utils.utility.Location('./pubchem.xsd', 3034, 6)))

CTD_ANON_214._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Urn_name'), pyxb.binding.datatypes.string, scope=CTD_ANON_214, location=pyxb.utils.utility.Location('./pubchem.xsd', 3036, 6)))

CTD_ANON_214._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Urn_datatype'), CTD_ANON_215, scope=CTD_ANON_214, location=pyxb.utils.utility.Location('./pubchem.xsd', 3038, 6)))

CTD_ANON_214._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Urn_parameters'), pyxb.binding.datatypes.string, scope=CTD_ANON_214, location=pyxb.utils.utility.Location('./pubchem.xsd', 3046, 6)))

CTD_ANON_214._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Urn_implementation'), pyxb.binding.datatypes.string, scope=CTD_ANON_214, location=pyxb.utils.utility.Location('./pubchem.xsd', 3048, 6)))

CTD_ANON_214._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Urn_version'), pyxb.binding.datatypes.string, scope=CTD_ANON_214, location=pyxb.utils.utility.Location('./pubchem.xsd', 3050, 6)))

CTD_ANON_214._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Urn_software'), pyxb.binding.datatypes.string, scope=CTD_ANON_214, location=pyxb.utils.utility.Location('./pubchem.xsd', 3052, 6)))

CTD_ANON_214._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Urn_source'), pyxb.binding.datatypes.string, scope=CTD_ANON_214, location=pyxb.utils.utility.Location('./pubchem.xsd', 3054, 6)))

CTD_ANON_214._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Urn_release'), pyxb.binding.datatypes.string, scope=CTD_ANON_214, location=pyxb.utils.utility.Location('./pubchem.xsd', 3056, 6)))

def _BuildAutomaton_213 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_213
    del _BuildAutomaton_213
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 3036, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 3038, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 3046, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 3048, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 3050, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 3052, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 3054, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 3056, 6))
    counters.add(cc_7)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_214._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Urn_label')), pyxb.utils.utility.Location('./pubchem.xsd', 3034, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_214._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Urn_name')), pyxb.utils.utility.Location('./pubchem.xsd', 3036, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_214._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Urn_datatype')), pyxb.utils.utility.Location('./pubchem.xsd', 3038, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_214._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Urn_parameters')), pyxb.utils.utility.Location('./pubchem.xsd', 3046, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_214._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Urn_implementation')), pyxb.utils.utility.Location('./pubchem.xsd', 3048, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_214._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Urn_version')), pyxb.utils.utility.Location('./pubchem.xsd', 3050, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_214._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Urn_software')), pyxb.utils.utility.Location('./pubchem.xsd', 3052, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_214._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Urn_source')), pyxb.utils.utility.Location('./pubchem.xsd', 3054, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_214._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Urn_release')), pyxb.utils.utility.Location('./pubchem.xsd', 3056, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_214._Automaton = _BuildAutomaton_213()




CTD_ANON_215._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-UrnDataType'), CTD_ANON_353, scope=CTD_ANON_215, location=pyxb.utils.utility.Location('./pubchem.xsd', 3066, 0)))

def _BuildAutomaton_214 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_214
    del _BuildAutomaton_214
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_215._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-UrnDataType')), pyxb.utils.utility.Location('./pubchem.xsd', 3041, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_215._Automaton = _BuildAutomaton_214()




CTD_ANON_216._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Coordinates_type'), CTD_ANON_217, scope=CTD_ANON_216, location=pyxb.utils.utility.Location('./pubchem.xsd', 3125, 6)))

CTD_ANON_216._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Coordinates_aid'), CTD_ANON_218, scope=CTD_ANON_216, location=pyxb.utils.utility.Location('./pubchem.xsd', 3137, 6)))

CTD_ANON_216._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Coordinates_conformers'), CTD_ANON_219, scope=CTD_ANON_216, location=pyxb.utils.utility.Location('./pubchem.xsd', 3145, 6)))

CTD_ANON_216._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Coordinates_atomlabels'), CTD_ANON_220, scope=CTD_ANON_216, location=pyxb.utils.utility.Location('./pubchem.xsd', 3153, 6)))

CTD_ANON_216._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Coordinates_data'), CTD_ANON_221, scope=CTD_ANON_216, location=pyxb.utils.utility.Location('./pubchem.xsd', 3161, 6)))

def _BuildAutomaton_215 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_215
    del _BuildAutomaton_215
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 3145, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 3153, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 3161, 6))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_216._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Coordinates_type')), pyxb.utils.utility.Location('./pubchem.xsd', 3125, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_216._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Coordinates_aid')), pyxb.utils.utility.Location('./pubchem.xsd', 3137, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_216._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Coordinates_conformers')), pyxb.utils.utility.Location('./pubchem.xsd', 3145, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_216._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Coordinates_atomlabels')), pyxb.utils.utility.Location('./pubchem.xsd', 3153, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_216._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Coordinates_data')), pyxb.utils.utility.Location('./pubchem.xsd', 3161, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_216._Automaton = _BuildAutomaton_215()




CTD_ANON_217._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-CoordinateType'), CTD_ANON_354, scope=CTD_ANON_217, location=pyxb.utils.utility.Location('./pubchem.xsd', 3236, 0)))

def _BuildAutomaton_216 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_216
    del _BuildAutomaton_216
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 3127, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_217._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-CoordinateType')), pyxb.utils.utility.Location('./pubchem.xsd', 3128, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_217._Automaton = _BuildAutomaton_216()




CTD_ANON_218._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Coordinates_aid_E'), pyxb.binding.datatypes.integer, scope=CTD_ANON_218, location=pyxb.utils.utility.Location('./pubchem.xsd', 3140, 12)))

def _BuildAutomaton_217 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_217
    del _BuildAutomaton_217
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 3139, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_218._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Coordinates_aid_E')), pyxb.utils.utility.Location('./pubchem.xsd', 3140, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_218._Automaton = _BuildAutomaton_217()




CTD_ANON_219._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Conformer'), CTD_ANON_222, scope=CTD_ANON_219, location=pyxb.utils.utility.Location('./pubchem.xsd', 3176, 0)))

def _BuildAutomaton_218 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_218
    del _BuildAutomaton_218
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 3147, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_219._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Conformer')), pyxb.utils.utility.Location('./pubchem.xsd', 3148, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_219._Automaton = _BuildAutomaton_218()




CTD_ANON_220._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AtomString'), CTD_ANON_245, scope=CTD_ANON_220, location=pyxb.utils.utility.Location('./pubchem.xsd', 3487, 0)))

def _BuildAutomaton_219 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_219
    del _BuildAutomaton_219
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 3155, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_220._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AtomString')), pyxb.utils.utility.Location('./pubchem.xsd', 3156, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_220._Automaton = _BuildAutomaton_219()




CTD_ANON_221._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData'), CTD_ANON_206, scope=CTD_ANON_221, location=pyxb.utils.utility.Location('./pubchem.xsd', 2925, 0)))

def _BuildAutomaton_220 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_220
    del _BuildAutomaton_220
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 3163, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_221._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData')), pyxb.utils.utility.Location('./pubchem.xsd', 3164, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_221._Automaton = _BuildAutomaton_220()




CTD_ANON_222._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Conformer_x'), CTD_ANON_223, scope=CTD_ANON_222, location=pyxb.utils.utility.Location('./pubchem.xsd', 3183, 6)))

CTD_ANON_222._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Conformer_y'), CTD_ANON_224, scope=CTD_ANON_222, location=pyxb.utils.utility.Location('./pubchem.xsd', 3191, 6)))

CTD_ANON_222._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Conformer_z'), CTD_ANON_225, scope=CTD_ANON_222, location=pyxb.utils.utility.Location('./pubchem.xsd', 3199, 6)))

CTD_ANON_222._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Conformer_style'), CTD_ANON_226, scope=CTD_ANON_222, location=pyxb.utils.utility.Location('./pubchem.xsd', 3207, 6)))

CTD_ANON_222._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Conformer_data'), CTD_ANON_227, scope=CTD_ANON_222, location=pyxb.utils.utility.Location('./pubchem.xsd', 3215, 6)))

def _BuildAutomaton_221 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_221
    del _BuildAutomaton_221
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 3199, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 3207, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 3215, 6))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_222._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Conformer_x')), pyxb.utils.utility.Location('./pubchem.xsd', 3183, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_222._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Conformer_y')), pyxb.utils.utility.Location('./pubchem.xsd', 3191, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_222._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Conformer_z')), pyxb.utils.utility.Location('./pubchem.xsd', 3199, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_222._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Conformer_style')), pyxb.utils.utility.Location('./pubchem.xsd', 3207, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_222._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Conformer_data')), pyxb.utils.utility.Location('./pubchem.xsd', 3215, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_222._Automaton = _BuildAutomaton_221()




CTD_ANON_223._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Conformer_x_E'), pyxb.binding.datatypes.double, scope=CTD_ANON_223, location=pyxb.utils.utility.Location('./pubchem.xsd', 3186, 12)))

def _BuildAutomaton_222 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_222
    del _BuildAutomaton_222
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 3185, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_223._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Conformer_x_E')), pyxb.utils.utility.Location('./pubchem.xsd', 3186, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_223._Automaton = _BuildAutomaton_222()




CTD_ANON_224._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Conformer_y_E'), pyxb.binding.datatypes.double, scope=CTD_ANON_224, location=pyxb.utils.utility.Location('./pubchem.xsd', 3194, 12)))

def _BuildAutomaton_223 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_223
    del _BuildAutomaton_223
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 3193, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_224._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Conformer_y_E')), pyxb.utils.utility.Location('./pubchem.xsd', 3194, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_224._Automaton = _BuildAutomaton_223()




CTD_ANON_225._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Conformer_z_E'), pyxb.binding.datatypes.double, scope=CTD_ANON_225, location=pyxb.utils.utility.Location('./pubchem.xsd', 3202, 12)))

def _BuildAutomaton_224 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_224
    del _BuildAutomaton_224
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 3201, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_225._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Conformer_z_E')), pyxb.utils.utility.Location('./pubchem.xsd', 3202, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_225._Automaton = _BuildAutomaton_224()




CTD_ANON_226._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-DrawAnnotations'), CTD_ANON_229, scope=CTD_ANON_226, location=pyxb.utils.utility.Location('./pubchem.xsd', 3287, 0)))

def _BuildAutomaton_225 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_225
    del _BuildAutomaton_225
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_226._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-DrawAnnotations')), pyxb.utils.utility.Location('./pubchem.xsd', 3210, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_226._Automaton = _BuildAutomaton_225()




CTD_ANON_227._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData'), CTD_ANON_206, scope=CTD_ANON_227, location=pyxb.utils.utility.Location('./pubchem.xsd', 2925, 0)))

def _BuildAutomaton_226 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_226
    del _BuildAutomaton_226
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 3217, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_227._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-InfoData')), pyxb.utils.utility.Location('./pubchem.xsd', 3218, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_227._Automaton = _BuildAutomaton_226()




CTD_ANON_228._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Conformer'), CTD_ANON_222, scope=CTD_ANON_228, location=pyxb.utils.utility.Location('./pubchem.xsd', 3176, 0)))

def _BuildAutomaton_227 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_227
    del _BuildAutomaton_227
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 3229, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_228._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Conformer')), pyxb.utils.utility.Location('./pubchem.xsd', 3230, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_228._Automaton = _BuildAutomaton_227()




CTD_ANON_229._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-DrawAnnotations_annotation'), CTD_ANON_230, scope=CTD_ANON_229, location=pyxb.utils.utility.Location('./pubchem.xsd', 3294, 6)))

CTD_ANON_229._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-DrawAnnotations_aid1'), CTD_ANON_231, scope=CTD_ANON_229, location=pyxb.utils.utility.Location('./pubchem.xsd', 3305, 6)))

CTD_ANON_229._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-DrawAnnotations_aid2'), CTD_ANON_232, scope=CTD_ANON_229, location=pyxb.utils.utility.Location('./pubchem.xsd', 3316, 6)))

def _BuildAutomaton_228 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_228
    del _BuildAutomaton_228
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_229._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-DrawAnnotations_annotation')), pyxb.utils.utility.Location('./pubchem.xsd', 3294, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_229._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-DrawAnnotations_aid1')), pyxb.utils.utility.Location('./pubchem.xsd', 3305, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_229._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-DrawAnnotations_aid2')), pyxb.utils.utility.Location('./pubchem.xsd', 3316, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_229._Automaton = _BuildAutomaton_228()




CTD_ANON_230._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-BondAnnotation'), CTD_ANON_355, scope=CTD_ANON_230, location=pyxb.utils.utility.Location('./pubchem.xsd', 3328, 0)))

def _BuildAutomaton_229 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_229
    del _BuildAutomaton_229
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 3296, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_230._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-BondAnnotation')), pyxb.utils.utility.Location('./pubchem.xsd', 3297, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_230._Automaton = _BuildAutomaton_229()




CTD_ANON_231._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-DrawAnnotations_aid1_E'), pyxb.binding.datatypes.integer, scope=CTD_ANON_231, location=pyxb.utils.utility.Location('./pubchem.xsd', 3308, 12)))

def _BuildAutomaton_230 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_230
    del _BuildAutomaton_230
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 3307, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_231._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-DrawAnnotations_aid1_E')), pyxb.utils.utility.Location('./pubchem.xsd', 3308, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_231._Automaton = _BuildAutomaton_230()




CTD_ANON_232._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-DrawAnnotations_aid2_E'), pyxb.binding.datatypes.integer, scope=CTD_ANON_232, location=pyxb.utils.utility.Location('./pubchem.xsd', 3319, 12)))

def _BuildAutomaton_231 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_231
    del _BuildAutomaton_231
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 3318, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_232._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-DrawAnnotations_aid2_E')), pyxb.utils.utility.Location('./pubchem.xsd', 3319, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_232._Automaton = _BuildAutomaton_231()




CTD_ANON_233._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Atoms_aid'), CTD_ANON_234, scope=CTD_ANON_233, location=pyxb.utils.utility.Location('./pubchem.xsd', 3380, 6)))

CTD_ANON_233._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Atoms_element'), CTD_ANON_235, scope=CTD_ANON_233, location=pyxb.utils.utility.Location('./pubchem.xsd', 3388, 6)))

CTD_ANON_233._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Atoms_label'), CTD_ANON_236, scope=CTD_ANON_233, location=pyxb.utils.utility.Location('./pubchem.xsd', 3399, 6)))

CTD_ANON_233._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Atoms_isotope'), CTD_ANON_237, scope=CTD_ANON_233, location=pyxb.utils.utility.Location('./pubchem.xsd', 3407, 6)))

CTD_ANON_233._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Atoms_charge'), CTD_ANON_238, scope=CTD_ANON_233, location=pyxb.utils.utility.Location('./pubchem.xsd', 3415, 6)))

CTD_ANON_233._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Atoms_radical'), CTD_ANON_239, scope=CTD_ANON_233, location=pyxb.utils.utility.Location('./pubchem.xsd', 3423, 6)))

CTD_ANON_233._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Atoms_source'), CTD_ANON_240, scope=CTD_ANON_233, location=pyxb.utils.utility.Location('./pubchem.xsd', 3431, 6)))

CTD_ANON_233._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Atoms_comment'), CTD_ANON_241, scope=CTD_ANON_233, location=pyxb.utils.utility.Location('./pubchem.xsd', 3439, 6)))

def _BuildAutomaton_232 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_232
    del _BuildAutomaton_232
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 3399, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 3407, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 3415, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 3423, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 3431, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 3439, 6))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_233._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Atoms_aid')), pyxb.utils.utility.Location('./pubchem.xsd', 3380, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_233._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Atoms_element')), pyxb.utils.utility.Location('./pubchem.xsd', 3388, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_233._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Atoms_label')), pyxb.utils.utility.Location('./pubchem.xsd', 3399, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_233._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Atoms_isotope')), pyxb.utils.utility.Location('./pubchem.xsd', 3407, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_233._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Atoms_charge')), pyxb.utils.utility.Location('./pubchem.xsd', 3415, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_233._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Atoms_radical')), pyxb.utils.utility.Location('./pubchem.xsd', 3423, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_233._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Atoms_source')), pyxb.utils.utility.Location('./pubchem.xsd', 3431, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_233._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Atoms_comment')), pyxb.utils.utility.Location('./pubchem.xsd', 3439, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_233._Automaton = _BuildAutomaton_232()




CTD_ANON_234._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Atoms_aid_E'), pyxb.binding.datatypes.integer, scope=CTD_ANON_234, location=pyxb.utils.utility.Location('./pubchem.xsd', 3383, 12)))

def _BuildAutomaton_233 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_233
    del _BuildAutomaton_233
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 3382, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_234._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Atoms_aid_E')), pyxb.utils.utility.Location('./pubchem.xsd', 3383, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_234._Automaton = _BuildAutomaton_233()




CTD_ANON_235._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Element'), CTD_ANON_357, scope=CTD_ANON_235, location=pyxb.utils.utility.Location('./pubchem.xsd', 3549, 0)))

def _BuildAutomaton_234 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_234
    del _BuildAutomaton_234
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 3390, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_235._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Element')), pyxb.utils.utility.Location('./pubchem.xsd', 3391, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_235._Automaton = _BuildAutomaton_234()




CTD_ANON_236._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AtomString'), CTD_ANON_245, scope=CTD_ANON_236, location=pyxb.utils.utility.Location('./pubchem.xsd', 3487, 0)))

def _BuildAutomaton_235 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_235
    del _BuildAutomaton_235
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 3401, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_236._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AtomString')), pyxb.utils.utility.Location('./pubchem.xsd', 3402, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_236._Automaton = _BuildAutomaton_235()




CTD_ANON_237._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AtomInt'), CTD_ANON_244, scope=CTD_ANON_237, location=pyxb.utils.utility.Location('./pubchem.xsd', 3472, 0)))

def _BuildAutomaton_236 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_236
    del _BuildAutomaton_236
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 3409, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_237._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AtomInt')), pyxb.utils.utility.Location('./pubchem.xsd', 3410, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_237._Automaton = _BuildAutomaton_236()




CTD_ANON_238._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AtomInt'), CTD_ANON_244, scope=CTD_ANON_238, location=pyxb.utils.utility.Location('./pubchem.xsd', 3472, 0)))

def _BuildAutomaton_237 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_237
    del _BuildAutomaton_237
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 3417, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_238._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AtomInt')), pyxb.utils.utility.Location('./pubchem.xsd', 3418, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_238._Automaton = _BuildAutomaton_237()




CTD_ANON_239._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AtomRadical'), CTD_ANON_246, scope=CTD_ANON_239, location=pyxb.utils.utility.Location('./pubchem.xsd', 3502, 0)))

def _BuildAutomaton_238 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_238
    del _BuildAutomaton_238
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 3425, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_239._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AtomRadical')), pyxb.utils.utility.Location('./pubchem.xsd', 3426, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_239._Automaton = _BuildAutomaton_238()




CTD_ANON_240._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AtomSource'), CTD_ANON_242, scope=CTD_ANON_240, location=pyxb.utils.utility.Location('./pubchem.xsd', 3451, 0)))

def _BuildAutomaton_239 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_239
    del _BuildAutomaton_239
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 3433, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_240._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AtomSource')), pyxb.utils.utility.Location('./pubchem.xsd', 3434, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_240._Automaton = _BuildAutomaton_239()




CTD_ANON_241._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AtomString'), CTD_ANON_245, scope=CTD_ANON_241, location=pyxb.utils.utility.Location('./pubchem.xsd', 3487, 0)))

def _BuildAutomaton_240 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_240
    del _BuildAutomaton_240
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 3441, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_241._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AtomString')), pyxb.utils.utility.Location('./pubchem.xsd', 3442, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_241._Automaton = _BuildAutomaton_240()




CTD_ANON_242._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AtomSource_aid'), pyxb.binding.datatypes.integer, scope=CTD_ANON_242, location=pyxb.utils.utility.Location('./pubchem.xsd', 3458, 6)))

CTD_ANON_242._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AtomSource_source'), CTD_ANON_243, scope=CTD_ANON_242, location=pyxb.utils.utility.Location('./pubchem.xsd', 3460, 6)))

def _BuildAutomaton_241 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_241
    del _BuildAutomaton_241
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_242._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AtomSource_aid')), pyxb.utils.utility.Location('./pubchem.xsd', 3458, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_242._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AtomSource_source')), pyxb.utils.utility.Location('./pubchem.xsd', 3460, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_242._Automaton = _BuildAutomaton_241()




CTD_ANON_243._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-MMDBSource'), CTD_ANON_187, scope=CTD_ANON_243, location=pyxb.utils.utility.Location('./pubchem.xsd', 2547, 0)))

def _BuildAutomaton_242 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_242
    del _BuildAutomaton_242
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_243._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-MMDBSource')), pyxb.utils.utility.Location('./pubchem.xsd', 3463, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_243._Automaton = _BuildAutomaton_242()




CTD_ANON_244._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AtomInt_aid'), pyxb.binding.datatypes.integer, scope=CTD_ANON_244, location=pyxb.utils.utility.Location('./pubchem.xsd', 3479, 6)))

CTD_ANON_244._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AtomInt_value'), pyxb.binding.datatypes.integer, scope=CTD_ANON_244, location=pyxb.utils.utility.Location('./pubchem.xsd', 3481, 6)))

def _BuildAutomaton_243 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_243
    del _BuildAutomaton_243
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_244._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AtomInt_aid')), pyxb.utils.utility.Location('./pubchem.xsd', 3479, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_244._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AtomInt_value')), pyxb.utils.utility.Location('./pubchem.xsd', 3481, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_244._Automaton = _BuildAutomaton_243()




CTD_ANON_245._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AtomString_aid'), pyxb.binding.datatypes.integer, scope=CTD_ANON_245, location=pyxb.utils.utility.Location('./pubchem.xsd', 3494, 6)))

CTD_ANON_245._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AtomString_value'), pyxb.binding.datatypes.string, scope=CTD_ANON_245, location=pyxb.utils.utility.Location('./pubchem.xsd', 3496, 6)))

def _BuildAutomaton_244 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_244
    del _BuildAutomaton_244
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_245._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AtomString_aid')), pyxb.utils.utility.Location('./pubchem.xsd', 3494, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_245._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AtomString_value')), pyxb.utils.utility.Location('./pubchem.xsd', 3496, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_245._Automaton = _BuildAutomaton_244()




CTD_ANON_246._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AtomRadical_aid'), pyxb.binding.datatypes.integer, scope=CTD_ANON_246, location=pyxb.utils.utility.Location('./pubchem.xsd', 3509, 6)))

CTD_ANON_246._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AtomRadical_type'), CTD_ANON_356, scope=CTD_ANON_246, location=pyxb.utils.utility.Location('./pubchem.xsd', 3510, 6)))

def _BuildAutomaton_245 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_245
    del _BuildAutomaton_245
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_246._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AtomRadical_aid')), pyxb.utils.utility.Location('./pubchem.xsd', 3509, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_246._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AtomRadical_type')), pyxb.utils.utility.Location('./pubchem.xsd', 3510, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_246._Automaton = _BuildAutomaton_245()




CTD_ANON_247._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Bonds_aid1'), CTD_ANON_248, scope=CTD_ANON_247, location=pyxb.utils.utility.Location('./pubchem.xsd', 3696, 6)))

CTD_ANON_247._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Bonds_aid2'), CTD_ANON_249, scope=CTD_ANON_247, location=pyxb.utils.utility.Location('./pubchem.xsd', 3707, 6)))

CTD_ANON_247._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Bonds_order'), CTD_ANON_250, scope=CTD_ANON_247, location=pyxb.utils.utility.Location('./pubchem.xsd', 3715, 6)))

def _BuildAutomaton_246 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_246
    del _BuildAutomaton_246
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_247._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Bonds_aid1')), pyxb.utils.utility.Location('./pubchem.xsd', 3696, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_247._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Bonds_aid2')), pyxb.utils.utility.Location('./pubchem.xsd', 3707, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_247._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Bonds_order')), pyxb.utils.utility.Location('./pubchem.xsd', 3715, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_247._Automaton = _BuildAutomaton_246()




CTD_ANON_248._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Bonds_aid1_E'), pyxb.binding.datatypes.integer, scope=CTD_ANON_248, location=pyxb.utils.utility.Location('./pubchem.xsd', 3699, 12)))

def _BuildAutomaton_247 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_247
    del _BuildAutomaton_247
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 3698, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_248._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Bonds_aid1_E')), pyxb.utils.utility.Location('./pubchem.xsd', 3699, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_248._Automaton = _BuildAutomaton_247()




CTD_ANON_249._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Bonds_aid2_E'), pyxb.binding.datatypes.integer, scope=CTD_ANON_249, location=pyxb.utils.utility.Location('./pubchem.xsd', 3710, 12)))

def _BuildAutomaton_248 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_248
    del _BuildAutomaton_248
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 3709, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_249._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Bonds_aid2_E')), pyxb.utils.utility.Location('./pubchem.xsd', 3710, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_249._Automaton = _BuildAutomaton_248()




CTD_ANON_250._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-BondType'), CTD_ANON_358, scope=CTD_ANON_250, location=pyxb.utils.utility.Location('./pubchem.xsd', 3727, 0)))

def _BuildAutomaton_249 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_249
    del _BuildAutomaton_249
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 3717, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_250._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-BondType')), pyxb.utils.utility.Location('./pubchem.xsd', 3718, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_250._Automaton = _BuildAutomaton_249()




CTD_ANON_251._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoCenter_tetrahedral'), CTD_ANON_252, scope=CTD_ANON_251, location=pyxb.utils.utility.Location('./pubchem.xsd', 3768, 6)))

CTD_ANON_251._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoCenter_planar'), CTD_ANON_253, scope=CTD_ANON_251, location=pyxb.utils.utility.Location('./pubchem.xsd', 3776, 6)))

CTD_ANON_251._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoCenter_squareplanar'), CTD_ANON_254, scope=CTD_ANON_251, location=pyxb.utils.utility.Location('./pubchem.xsd', 3784, 6)))

CTD_ANON_251._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoCenter_octahedral'), CTD_ANON_255, scope=CTD_ANON_251, location=pyxb.utils.utility.Location('./pubchem.xsd', 3792, 6)))

CTD_ANON_251._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoCenter_bipyramid'), CTD_ANON_256, scope=CTD_ANON_251, location=pyxb.utils.utility.Location('./pubchem.xsd', 3800, 6)))

CTD_ANON_251._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoCenter_tshape'), CTD_ANON_257, scope=CTD_ANON_251, location=pyxb.utils.utility.Location('./pubchem.xsd', 3808, 6)))

CTD_ANON_251._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoCenter_pentagonal'), CTD_ANON_258, scope=CTD_ANON_251, location=pyxb.utils.utility.Location('./pubchem.xsd', 3816, 6)))

def _BuildAutomaton_250 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_250
    del _BuildAutomaton_250
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_251._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoCenter_tetrahedral')), pyxb.utils.utility.Location('./pubchem.xsd', 3768, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_251._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoCenter_planar')), pyxb.utils.utility.Location('./pubchem.xsd', 3776, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_251._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoCenter_squareplanar')), pyxb.utils.utility.Location('./pubchem.xsd', 3784, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_251._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoCenter_octahedral')), pyxb.utils.utility.Location('./pubchem.xsd', 3792, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_251._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoCenter_bipyramid')), pyxb.utils.utility.Location('./pubchem.xsd', 3800, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_251._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoCenter_tshape')), pyxb.utils.utility.Location('./pubchem.xsd', 3808, 6))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_251._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoCenter_pentagonal')), pyxb.utils.utility.Location('./pubchem.xsd', 3816, 6))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_251._Automaton = _BuildAutomaton_250()




CTD_ANON_252._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTetrahedral'), CTD_ANON_259, scope=CTD_ANON_252, location=pyxb.utils.utility.Location('./pubchem.xsd', 3835, 0)))

def _BuildAutomaton_251 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_251
    del _BuildAutomaton_251
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_252._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTetrahedral')), pyxb.utils.utility.Location('./pubchem.xsd', 3771, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_252._Automaton = _BuildAutomaton_251()




CTD_ANON_253._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPlanar'), CTD_ANON_260, scope=CTD_ANON_253, location=pyxb.utils.utility.Location('./pubchem.xsd', 3913, 0)))

def _BuildAutomaton_252 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_252
    del _BuildAutomaton_252
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_253._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPlanar')), pyxb.utils.utility.Location('./pubchem.xsd', 3779, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_253._Automaton = _BuildAutomaton_252()




CTD_ANON_254._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoSquarePlanar'), CTD_ANON_261, scope=CTD_ANON_254, location=pyxb.utils.utility.Location('./pubchem.xsd', 3993, 0)))

def _BuildAutomaton_253 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_253
    del _BuildAutomaton_253
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_254._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoSquarePlanar')), pyxb.utils.utility.Location('./pubchem.xsd', 3787, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_254._Automaton = _BuildAutomaton_253()




CTD_ANON_255._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoOctahedral'), CTD_ANON_262, scope=CTD_ANON_255, location=pyxb.utils.utility.Location('./pubchem.xsd', 4055, 0)))

def _BuildAutomaton_254 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_254
    del _BuildAutomaton_254
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_255._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoOctahedral')), pyxb.utils.utility.Location('./pubchem.xsd', 3795, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_255._Automaton = _BuildAutomaton_254()




CTD_ANON_256._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTrigonalBiPyramid'), CTD_ANON_263, scope=CTD_ANON_256, location=pyxb.utils.utility.Location('./pubchem.xsd', 4102, 0)))

def _BuildAutomaton_255 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_255
    del _BuildAutomaton_255
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_256._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTrigonalBiPyramid')), pyxb.utils.utility.Location('./pubchem.xsd', 3803, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_256._Automaton = _BuildAutomaton_255()




CTD_ANON_257._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTShape'), CTD_ANON_264, scope=CTD_ANON_257, location=pyxb.utils.utility.Location('./pubchem.xsd', 4144, 0)))

def _BuildAutomaton_256 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_256
    del _BuildAutomaton_256
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_257._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTShape')), pyxb.utils.utility.Location('./pubchem.xsd', 3811, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_257._Automaton = _BuildAutomaton_256()




CTD_ANON_258._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPentagonalBiPyramid'), CTD_ANON_265, scope=CTD_ANON_258, location=pyxb.utils.utility.Location('./pubchem.xsd', 4176, 0)))

def _BuildAutomaton_257 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_257
    del _BuildAutomaton_257
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_258._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPentagonalBiPyramid')), pyxb.utils.utility.Location('./pubchem.xsd', 3819, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_258._Automaton = _BuildAutomaton_257()




CTD_ANON_259._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTetrahedral_center'), pyxb.binding.datatypes.integer, scope=CTD_ANON_259, location=pyxb.utils.utility.Location('./pubchem.xsd', 3842, 6)))

CTD_ANON_259._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTetrahedral_above'), pyxb.binding.datatypes.integer, scope=CTD_ANON_259, location=pyxb.utils.utility.Location('./pubchem.xsd', 3847, 6)))

CTD_ANON_259._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTetrahedral_top'), pyxb.binding.datatypes.integer, scope=CTD_ANON_259, location=pyxb.utils.utility.Location('./pubchem.xsd', 3852, 6)))

CTD_ANON_259._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTetrahedral_bottom'), pyxb.binding.datatypes.integer, scope=CTD_ANON_259, location=pyxb.utils.utility.Location('./pubchem.xsd', 3857, 6)))

CTD_ANON_259._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTetrahedral_below'), pyxb.binding.datatypes.integer, scope=CTD_ANON_259, location=pyxb.utils.utility.Location('./pubchem.xsd', 3862, 6)))

CTD_ANON_259._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTetrahedral_parity'), CTD_ANON_359, scope=CTD_ANON_259, location=pyxb.utils.utility.Location('./pubchem.xsd', 3863, 6)))

CTD_ANON_259._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTetrahedral_type'), CTD_ANON_360, scope=CTD_ANON_259, location=pyxb.utils.utility.Location('./pubchem.xsd', 3881, 6)))

def _BuildAutomaton_258 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_258
    del _BuildAutomaton_258
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 3863, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 3881, 6))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_259._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTetrahedral_center')), pyxb.utils.utility.Location('./pubchem.xsd', 3842, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_259._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTetrahedral_above')), pyxb.utils.utility.Location('./pubchem.xsd', 3847, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_259._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTetrahedral_top')), pyxb.utils.utility.Location('./pubchem.xsd', 3852, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_259._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTetrahedral_bottom')), pyxb.utils.utility.Location('./pubchem.xsd', 3857, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_259._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTetrahedral_below')), pyxb.utils.utility.Location('./pubchem.xsd', 3862, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_259._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTetrahedral_parity')), pyxb.utils.utility.Location('./pubchem.xsd', 3863, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_259._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTetrahedral_type')), pyxb.utils.utility.Location('./pubchem.xsd', 3881, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_259._Automaton = _BuildAutomaton_258()




CTD_ANON_260._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPlanar_left'), pyxb.binding.datatypes.integer, scope=CTD_ANON_260, location=pyxb.utils.utility.Location('./pubchem.xsd', 3920, 6)))

CTD_ANON_260._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPlanar_ltop'), pyxb.binding.datatypes.integer, scope=CTD_ANON_260, location=pyxb.utils.utility.Location('./pubchem.xsd', 3925, 6)))

CTD_ANON_260._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPlanar_lbottom'), pyxb.binding.datatypes.integer, scope=CTD_ANON_260, location=pyxb.utils.utility.Location('./pubchem.xsd', 3930, 6)))

CTD_ANON_260._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPlanar_right'), pyxb.binding.datatypes.integer, scope=CTD_ANON_260, location=pyxb.utils.utility.Location('./pubchem.xsd', 3935, 6)))

CTD_ANON_260._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPlanar_rtop'), pyxb.binding.datatypes.integer, scope=CTD_ANON_260, location=pyxb.utils.utility.Location('./pubchem.xsd', 3940, 6)))

CTD_ANON_260._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPlanar_rbottom'), pyxb.binding.datatypes.integer, scope=CTD_ANON_260, location=pyxb.utils.utility.Location('./pubchem.xsd', 3945, 6)))

CTD_ANON_260._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPlanar_parity'), CTD_ANON_361, scope=CTD_ANON_260, location=pyxb.utils.utility.Location('./pubchem.xsd', 3946, 6)))

CTD_ANON_260._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPlanar_type'), CTD_ANON_362, scope=CTD_ANON_260, location=pyxb.utils.utility.Location('./pubchem.xsd', 3964, 6)))

def _BuildAutomaton_259 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_259
    del _BuildAutomaton_259
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 3946, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 3964, 6))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_260._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPlanar_left')), pyxb.utils.utility.Location('./pubchem.xsd', 3920, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_260._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPlanar_ltop')), pyxb.utils.utility.Location('./pubchem.xsd', 3925, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_260._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPlanar_lbottom')), pyxb.utils.utility.Location('./pubchem.xsd', 3930, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_260._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPlanar_right')), pyxb.utils.utility.Location('./pubchem.xsd', 3935, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_260._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPlanar_rtop')), pyxb.utils.utility.Location('./pubchem.xsd', 3940, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_260._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPlanar_rbottom')), pyxb.utils.utility.Location('./pubchem.xsd', 3945, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_260._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPlanar_parity')), pyxb.utils.utility.Location('./pubchem.xsd', 3946, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_260._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPlanar_type')), pyxb.utils.utility.Location('./pubchem.xsd', 3964, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_260._Automaton = _BuildAutomaton_259()




CTD_ANON_261._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoSquarePlanar_center'), pyxb.binding.datatypes.integer, scope=CTD_ANON_261, location=pyxb.utils.utility.Location('./pubchem.xsd', 4000, 6)))

CTD_ANON_261._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoSquarePlanar_lbelow'), pyxb.binding.datatypes.integer, scope=CTD_ANON_261, location=pyxb.utils.utility.Location('./pubchem.xsd', 4005, 6)))

CTD_ANON_261._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoSquarePlanar_rbelow'), pyxb.binding.datatypes.integer, scope=CTD_ANON_261, location=pyxb.utils.utility.Location('./pubchem.xsd', 4010, 6)))

CTD_ANON_261._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoSquarePlanar_labove'), pyxb.binding.datatypes.integer, scope=CTD_ANON_261, location=pyxb.utils.utility.Location('./pubchem.xsd', 4015, 6)))

CTD_ANON_261._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoSquarePlanar_rabove'), pyxb.binding.datatypes.integer, scope=CTD_ANON_261, location=pyxb.utils.utility.Location('./pubchem.xsd', 4020, 6)))

CTD_ANON_261._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoSquarePlanar_parity'), CTD_ANON_363, scope=CTD_ANON_261, location=pyxb.utils.utility.Location('./pubchem.xsd', 4021, 6)))

def _BuildAutomaton_260 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_260
    del _BuildAutomaton_260
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4021, 6))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_261._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoSquarePlanar_center')), pyxb.utils.utility.Location('./pubchem.xsd', 4000, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_261._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoSquarePlanar_lbelow')), pyxb.utils.utility.Location('./pubchem.xsd', 4005, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_261._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoSquarePlanar_rbelow')), pyxb.utils.utility.Location('./pubchem.xsd', 4010, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_261._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoSquarePlanar_labove')), pyxb.utils.utility.Location('./pubchem.xsd', 4015, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_261._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoSquarePlanar_rabove')), pyxb.utils.utility.Location('./pubchem.xsd', 4020, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_261._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoSquarePlanar_parity')), pyxb.utils.utility.Location('./pubchem.xsd', 4021, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_261._Automaton = _BuildAutomaton_260()




CTD_ANON_262._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoOctahedral_center'), pyxb.binding.datatypes.integer, scope=CTD_ANON_262, location=pyxb.utils.utility.Location('./pubchem.xsd', 4062, 6)))

CTD_ANON_262._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoOctahedral_top'), pyxb.binding.datatypes.integer, scope=CTD_ANON_262, location=pyxb.utils.utility.Location('./pubchem.xsd', 4067, 6)))

CTD_ANON_262._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoOctahedral_bottom'), pyxb.binding.datatypes.integer, scope=CTD_ANON_262, location=pyxb.utils.utility.Location('./pubchem.xsd', 4072, 6)))

CTD_ANON_262._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoOctahedral_labove'), pyxb.binding.datatypes.integer, scope=CTD_ANON_262, location=pyxb.utils.utility.Location('./pubchem.xsd', 4077, 6)))

CTD_ANON_262._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoOctahedral_lbelow'), pyxb.binding.datatypes.integer, scope=CTD_ANON_262, location=pyxb.utils.utility.Location('./pubchem.xsd', 4082, 6)))

CTD_ANON_262._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoOctahedral_rabove'), pyxb.binding.datatypes.integer, scope=CTD_ANON_262, location=pyxb.utils.utility.Location('./pubchem.xsd', 4087, 6)))

CTD_ANON_262._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoOctahedral_rbelow'), pyxb.binding.datatypes.integer, scope=CTD_ANON_262, location=pyxb.utils.utility.Location('./pubchem.xsd', 4092, 6)))

def _BuildAutomaton_261 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_261
    del _BuildAutomaton_261
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_262._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoOctahedral_center')), pyxb.utils.utility.Location('./pubchem.xsd', 4062, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_262._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoOctahedral_top')), pyxb.utils.utility.Location('./pubchem.xsd', 4067, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_262._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoOctahedral_bottom')), pyxb.utils.utility.Location('./pubchem.xsd', 4072, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_262._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoOctahedral_labove')), pyxb.utils.utility.Location('./pubchem.xsd', 4077, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_262._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoOctahedral_lbelow')), pyxb.utils.utility.Location('./pubchem.xsd', 4082, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_262._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoOctahedral_rabove')), pyxb.utils.utility.Location('./pubchem.xsd', 4087, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_262._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoOctahedral_rbelow')), pyxb.utils.utility.Location('./pubchem.xsd', 4092, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_262._Automaton = _BuildAutomaton_261()




CTD_ANON_263._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTrigonalBiPyramid_center'), pyxb.binding.datatypes.integer, scope=CTD_ANON_263, location=pyxb.utils.utility.Location('./pubchem.xsd', 4109, 6)))

CTD_ANON_263._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTrigonalBiPyramid_above'), pyxb.binding.datatypes.integer, scope=CTD_ANON_263, location=pyxb.utils.utility.Location('./pubchem.xsd', 4114, 6)))

CTD_ANON_263._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTrigonalBiPyramid_below'), pyxb.binding.datatypes.integer, scope=CTD_ANON_263, location=pyxb.utils.utility.Location('./pubchem.xsd', 4119, 6)))

CTD_ANON_263._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTrigonalBiPyramid_top'), pyxb.binding.datatypes.integer, scope=CTD_ANON_263, location=pyxb.utils.utility.Location('./pubchem.xsd', 4124, 6)))

CTD_ANON_263._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTrigonalBiPyramid_bottom'), pyxb.binding.datatypes.integer, scope=CTD_ANON_263, location=pyxb.utils.utility.Location('./pubchem.xsd', 4129, 6)))

CTD_ANON_263._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTrigonalBiPyramid_right'), pyxb.binding.datatypes.integer, scope=CTD_ANON_263, location=pyxb.utils.utility.Location('./pubchem.xsd', 4134, 6)))

def _BuildAutomaton_262 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_262
    del _BuildAutomaton_262
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_263._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTrigonalBiPyramid_center')), pyxb.utils.utility.Location('./pubchem.xsd', 4109, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_263._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTrigonalBiPyramid_above')), pyxb.utils.utility.Location('./pubchem.xsd', 4114, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_263._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTrigonalBiPyramid_below')), pyxb.utils.utility.Location('./pubchem.xsd', 4119, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_263._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTrigonalBiPyramid_top')), pyxb.utils.utility.Location('./pubchem.xsd', 4124, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_263._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTrigonalBiPyramid_bottom')), pyxb.utils.utility.Location('./pubchem.xsd', 4129, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_263._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTrigonalBiPyramid_right')), pyxb.utils.utility.Location('./pubchem.xsd', 4134, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_263._Automaton = _BuildAutomaton_262()




CTD_ANON_264._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTShape_center'), pyxb.binding.datatypes.integer, scope=CTD_ANON_264, location=pyxb.utils.utility.Location('./pubchem.xsd', 4151, 6)))

CTD_ANON_264._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTShape_top'), pyxb.binding.datatypes.integer, scope=CTD_ANON_264, location=pyxb.utils.utility.Location('./pubchem.xsd', 4156, 6)))

CTD_ANON_264._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTShape_bottom'), pyxb.binding.datatypes.integer, scope=CTD_ANON_264, location=pyxb.utils.utility.Location('./pubchem.xsd', 4161, 6)))

CTD_ANON_264._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTShape_above'), pyxb.binding.datatypes.integer, scope=CTD_ANON_264, location=pyxb.utils.utility.Location('./pubchem.xsd', 4166, 6)))

def _BuildAutomaton_263 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_263
    del _BuildAutomaton_263
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_264._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTShape_center')), pyxb.utils.utility.Location('./pubchem.xsd', 4151, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_264._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTShape_top')), pyxb.utils.utility.Location('./pubchem.xsd', 4156, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_264._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTShape_bottom')), pyxb.utils.utility.Location('./pubchem.xsd', 4161, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_264._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoTShape_above')), pyxb.utils.utility.Location('./pubchem.xsd', 4166, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_264._Automaton = _BuildAutomaton_263()




CTD_ANON_265._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPentagonalBiPyramid_center'), pyxb.binding.datatypes.integer, scope=CTD_ANON_265, location=pyxb.utils.utility.Location('./pubchem.xsd', 4183, 6)))

CTD_ANON_265._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPentagonalBiPyramid_top'), pyxb.binding.datatypes.integer, scope=CTD_ANON_265, location=pyxb.utils.utility.Location('./pubchem.xsd', 4188, 6)))

CTD_ANON_265._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPentagonalBiPyramid_bottom'), pyxb.binding.datatypes.integer, scope=CTD_ANON_265, location=pyxb.utils.utility.Location('./pubchem.xsd', 4193, 6)))

CTD_ANON_265._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPentagonalBiPyramid_left'), pyxb.binding.datatypes.integer, scope=CTD_ANON_265, location=pyxb.utils.utility.Location('./pubchem.xsd', 4198, 6)))

CTD_ANON_265._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPentagonalBiPyramid_labove'), pyxb.binding.datatypes.integer, scope=CTD_ANON_265, location=pyxb.utils.utility.Location('./pubchem.xsd', 4203, 6)))

CTD_ANON_265._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPentagonalBiPyramid_lbelow'), pyxb.binding.datatypes.integer, scope=CTD_ANON_265, location=pyxb.utils.utility.Location('./pubchem.xsd', 4208, 6)))

CTD_ANON_265._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPentagonalBiPyramid_rabove'), pyxb.binding.datatypes.integer, scope=CTD_ANON_265, location=pyxb.utils.utility.Location('./pubchem.xsd', 4213, 6)))

CTD_ANON_265._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPentagonalBiPyramid_rbelow'), pyxb.binding.datatypes.integer, scope=CTD_ANON_265, location=pyxb.utils.utility.Location('./pubchem.xsd', 4218, 6)))

def _BuildAutomaton_264 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_264
    del _BuildAutomaton_264
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_265._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPentagonalBiPyramid_center')), pyxb.utils.utility.Location('./pubchem.xsd', 4183, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_265._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPentagonalBiPyramid_top')), pyxb.utils.utility.Location('./pubchem.xsd', 4188, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_265._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPentagonalBiPyramid_bottom')), pyxb.utils.utility.Location('./pubchem.xsd', 4193, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_265._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPentagonalBiPyramid_left')), pyxb.utils.utility.Location('./pubchem.xsd', 4198, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_265._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPentagonalBiPyramid_labove')), pyxb.utils.utility.Location('./pubchem.xsd', 4203, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_265._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPentagonalBiPyramid_lbelow')), pyxb.utils.utility.Location('./pubchem.xsd', 4208, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_265._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPentagonalBiPyramid_rabove')), pyxb.utils.utility.Location('./pubchem.xsd', 4213, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_265._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-StereoPentagonalBiPyramid_rbelow')), pyxb.utils.utility.Location('./pubchem.xsd', 4218, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_265._Automaton = _BuildAutomaton_264()




CTD_ANON_266._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssaySubmit'), CTD_ANON_267, scope=CTD_ANON_266, location=pyxb.utils.utility.Location('./pubchem.xsd', 4285, 0)))

def _BuildAutomaton_265 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_265
    del _BuildAutomaton_265
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4278, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_266._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssaySubmit')), pyxb.utils.utility.Location('./pubchem.xsd', 4279, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_266._Automaton = _BuildAutomaton_265()




CTD_ANON_267._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssaySubmit_assay'), CTD_ANON_268, scope=CTD_ANON_267, location=pyxb.utils.utility.Location('./pubchem.xsd', 4288, 6)))

CTD_ANON_267._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssaySubmit_data'), CTD_ANON_272, scope=CTD_ANON_267, location=pyxb.utils.utility.Location('./pubchem.xsd', 4321, 6)))

CTD_ANON_267._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssaySubmit_revoke'), CTD_ANON_273, scope=CTD_ANON_267, location=pyxb.utils.utility.Location('./pubchem.xsd', 4329, 6)))

def _BuildAutomaton_266 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_266
    del _BuildAutomaton_266
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4321, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4329, 6))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_267._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssaySubmit_assay')), pyxb.utils.utility.Location('./pubchem.xsd', 4288, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_267._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssaySubmit_data')), pyxb.utils.utility.Location('./pubchem.xsd', 4321, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_267._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssaySubmit_revoke')), pyxb.utils.utility.Location('./pubchem.xsd', 4329, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_267._Automaton = _BuildAutomaton_266()




CTD_ANON_268._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssaySubmit_assay_aid'), pyxb.binding.datatypes.integer, scope=CTD_ANON_268, location=pyxb.utils.utility.Location('./pubchem.xsd', 4292, 12)))

CTD_ANON_268._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssaySubmit_assay_aid-source'), CTD_ANON_269, scope=CTD_ANON_268, location=pyxb.utils.utility.Location('./pubchem.xsd', 4294, 12)))

CTD_ANON_268._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssaySubmit_assay_descr'), CTD_ANON_270, scope=CTD_ANON_268, location=pyxb.utils.utility.Location('./pubchem.xsd', 4302, 12)))

CTD_ANON_268._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssaySubmit_assay_aidver'), CTD_ANON_271, scope=CTD_ANON_268, location=pyxb.utils.utility.Location('./pubchem.xsd', 4310, 12)))

def _BuildAutomaton_267 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_267
    del _BuildAutomaton_267
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_268._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssaySubmit_assay_aid')), pyxb.utils.utility.Location('./pubchem.xsd', 4292, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_268._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssaySubmit_assay_aid-source')), pyxb.utils.utility.Location('./pubchem.xsd', 4294, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_268._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssaySubmit_assay_descr')), pyxb.utils.utility.Location('./pubchem.xsd', 4302, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_268._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssaySubmit_assay_aidver')), pyxb.utils.utility.Location('./pubchem.xsd', 4310, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_268._Automaton = _BuildAutomaton_267()




CTD_ANON_269._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Source'), CTD_ANON_179, scope=CTD_ANON_269, location=pyxb.utils.utility.Location('./pubchem.xsd', 2479, 0)))

def _BuildAutomaton_268 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_268
    del _BuildAutomaton_268
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_269._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Source')), pyxb.utils.utility.Location('./pubchem.xsd', 4297, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_269._Automaton = _BuildAutomaton_268()




CTD_ANON_270._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription'), CTD_ANON_281, scope=CTD_ANON_270, location=pyxb.utils.utility.Location('./pubchem.xsd', 4485, 0)))

def _BuildAutomaton_269 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_269
    del _BuildAutomaton_269
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_270._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription')), pyxb.utils.utility.Location('./pubchem.xsd', 4305, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_270._Automaton = _BuildAutomaton_269()




CTD_ANON_271._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-ID'), CTD_ANON_178, scope=CTD_ANON_271, location=pyxb.utils.utility.Location('./pubchem.xsd', 2461, 0)))

def _BuildAutomaton_270 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_270
    del _BuildAutomaton_270
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_271._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-ID')), pyxb.utils.utility.Location('./pubchem.xsd', 4313, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_271._Automaton = _BuildAutomaton_270()




CTD_ANON_272._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayResults'), CTD_ANON_274, scope=CTD_ANON_272, location=pyxb.utils.utility.Location('./pubchem.xsd', 4346, 0)))

def _BuildAutomaton_271 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_271
    del _BuildAutomaton_271
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4323, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_272._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayResults')), pyxb.utils.utility.Location('./pubchem.xsd', 4324, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_272._Automaton = _BuildAutomaton_271()




CTD_ANON_273._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssaySubmit_revoke_E'), pyxb.binding.datatypes.integer, scope=CTD_ANON_273, location=pyxb.utils.utility.Location('./pubchem.xsd', 4332, 12)))

def _BuildAutomaton_272 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_272
    del _BuildAutomaton_272
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4331, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_273._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssaySubmit_revoke_E')), pyxb.utils.utility.Location('./pubchem.xsd', 4332, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_273._Automaton = _BuildAutomaton_272()




CTD_ANON_274._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayResults_sid'), pyxb.binding.datatypes.integer, scope=CTD_ANON_274, location=pyxb.utils.utility.Location('./pubchem.xsd', 4355, 6)))

CTD_ANON_274._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayResults_sid-source'), CTD_ANON_275, scope=CTD_ANON_274, location=pyxb.utils.utility.Location('./pubchem.xsd', 4361, 6)))

CTD_ANON_274._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayResults_version'), pyxb.binding.datatypes.integer, scope=CTD_ANON_274, location=pyxb.utils.utility.Location('./pubchem.xsd', 4372, 6)))

CTD_ANON_274._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayResults_comment'), pyxb.binding.datatypes.string, scope=CTD_ANON_274, location=pyxb.utils.utility.Location('./pubchem.xsd', 4377, 6)))

CTD_ANON_274._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayResults_outcome'), CTD_ANON_364, scope=CTD_ANON_274, location=pyxb.utils.utility.Location('./pubchem.xsd', 4378, 6)))

CTD_ANON_274._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayResults_rank'), pyxb.binding.datatypes.integer, scope=CTD_ANON_274, location=pyxb.utils.utility.Location('./pubchem.xsd', 4408, 6)))

CTD_ANON_274._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayResults_data'), CTD_ANON_276, scope=CTD_ANON_274, location=pyxb.utils.utility.Location('./pubchem.xsd', 4410, 6)))

CTD_ANON_274._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayResults_url'), pyxb.binding.datatypes.string, scope=CTD_ANON_274, location=pyxb.utils.utility.Location('./pubchem.xsd', 4418, 6)))

CTD_ANON_274._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayResults_xref'), CTD_ANON_277, scope=CTD_ANON_274, location=pyxb.utils.utility.Location('./pubchem.xsd', 4425, 6)))

CTD_ANON_274._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayResults_date'), CTD_ANON_278, scope=CTD_ANON_274, location=pyxb.utils.utility.Location('./pubchem.xsd', 4433, 6)))

def _BuildAutomaton_273 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_273
    del _BuildAutomaton_273
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4361, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4372, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4377, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4378, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4408, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4410, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4418, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4425, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4433, 6))
    counters.add(cc_8)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_274._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayResults_sid')), pyxb.utils.utility.Location('./pubchem.xsd', 4355, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_274._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayResults_sid-source')), pyxb.utils.utility.Location('./pubchem.xsd', 4361, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_274._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayResults_version')), pyxb.utils.utility.Location('./pubchem.xsd', 4372, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_274._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayResults_comment')), pyxb.utils.utility.Location('./pubchem.xsd', 4377, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_274._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayResults_outcome')), pyxb.utils.utility.Location('./pubchem.xsd', 4378, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_274._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayResults_rank')), pyxb.utils.utility.Location('./pubchem.xsd', 4408, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_274._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayResults_data')), pyxb.utils.utility.Location('./pubchem.xsd', 4410, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_274._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayResults_url')), pyxb.utils.utility.Location('./pubchem.xsd', 4418, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_274._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayResults_xref')), pyxb.utils.utility.Location('./pubchem.xsd', 4425, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_274._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayResults_date')), pyxb.utils.utility.Location('./pubchem.xsd', 4433, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_274._Automaton = _BuildAutomaton_273()




CTD_ANON_275._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Source'), CTD_ANON_179, scope=CTD_ANON_275, location=pyxb.utils.utility.Location('./pubchem.xsd', 2479, 0)))

def _BuildAutomaton_274 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_274
    del _BuildAutomaton_274
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_275._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Source')), pyxb.utils.utility.Location('./pubchem.xsd', 4364, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_275._Automaton = _BuildAutomaton_274()




CTD_ANON_276._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayData'), CTD_ANON_279, scope=CTD_ANON_276, location=pyxb.utils.utility.Location('./pubchem.xsd', 4445, 0)))

def _BuildAutomaton_275 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_275
    del _BuildAutomaton_275
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4412, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_276._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayData')), pyxb.utils.utility.Location('./pubchem.xsd', 4413, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_276._Automaton = _BuildAutomaton_275()




CTD_ANON_277._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AnnotatedXRef'), CTD_ANON_311, scope=CTD_ANON_277, location=pyxb.utils.utility.Location('./pubchem.xsd', 5006, 0)))

def _BuildAutomaton_276 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_276
    del _BuildAutomaton_276
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4427, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_277._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AnnotatedXRef')), pyxb.utils.utility.Location('./pubchem.xsd', 4428, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_277._Automaton = _BuildAutomaton_276()




CTD_ANON_278._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Date'), CTD_ANON, scope=CTD_ANON_278, location=pyxb.utils.utility.Location('./pubchem.xsd', 89, 0)))

def _BuildAutomaton_277 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_277
    del _BuildAutomaton_277
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_278._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Date')), pyxb.utils.utility.Location('./pubchem.xsd', 4436, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_278._Automaton = _BuildAutomaton_277()




CTD_ANON_279._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayData_tid'), pyxb.binding.datatypes.integer, scope=CTD_ANON_279, location=pyxb.utils.utility.Location('./pubchem.xsd', 4452, 6)))

CTD_ANON_279._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayData_value'), CTD_ANON_280, scope=CTD_ANON_279, location=pyxb.utils.utility.Location('./pubchem.xsd', 4453, 6)))

def _BuildAutomaton_278 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_278
    del _BuildAutomaton_278
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_279._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayData_tid')), pyxb.utils.utility.Location('./pubchem.xsd', 4452, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_279._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayData_value')), pyxb.utils.utility.Location('./pubchem.xsd', 4453, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_279._Automaton = _BuildAutomaton_278()




CTD_ANON_280._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayData_value_ival'), pyxb.binding.datatypes.integer, scope=CTD_ANON_280, location=pyxb.utils.utility.Location('./pubchem.xsd', 4456, 12)))

CTD_ANON_280._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayData_value_fval'), pyxb.binding.datatypes.double, scope=CTD_ANON_280, location=pyxb.utils.utility.Location('./pubchem.xsd', 4457, 12)))

CTD_ANON_280._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayData_value_bval'), CTD_ANON_365, scope=CTD_ANON_280, location=pyxb.utils.utility.Location('./pubchem.xsd', 4458, 12)))

CTD_ANON_280._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayData_value_sval'), pyxb.binding.datatypes.string, scope=CTD_ANON_280, location=pyxb.utils.utility.Location('./pubchem.xsd', 4470, 12)))

def _BuildAutomaton_279 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_279
    del _BuildAutomaton_279
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_280._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayData_value_ival')), pyxb.utils.utility.Location('./pubchem.xsd', 4456, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_280._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayData_value_fval')), pyxb.utils.utility.Location('./pubchem.xsd', 4457, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_280._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayData_value_bval')), pyxb.utils.utility.Location('./pubchem.xsd', 4458, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_280._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayData_value_sval')), pyxb.utils.utility.Location('./pubchem.xsd', 4470, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_280._Automaton = _BuildAutomaton_279()




CTD_ANON_281._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_aid'), CTD_ANON_282, scope=CTD_ANON_281, location=pyxb.utils.utility.Location('./pubchem.xsd', 4495, 6)))

CTD_ANON_281._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_aid-source'), CTD_ANON_283, scope=CTD_ANON_281, location=pyxb.utils.utility.Location('./pubchem.xsd', 4507, 6)))

CTD_ANON_281._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_name'), pyxb.binding.datatypes.string, scope=CTD_ANON_281, location=pyxb.utils.utility.Location('./pubchem.xsd', 4518, 6)))

CTD_ANON_281._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_description'), CTD_ANON_284, scope=CTD_ANON_281, location=pyxb.utils.utility.Location('./pubchem.xsd', 4520, 6)))

CTD_ANON_281._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_protocol'), CTD_ANON_285, scope=CTD_ANON_281, location=pyxb.utils.utility.Location('./pubchem.xsd', 4528, 6)))

CTD_ANON_281._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_comment'), CTD_ANON_286, scope=CTD_ANON_281, location=pyxb.utils.utility.Location('./pubchem.xsd', 4536, 6)))

CTD_ANON_281._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_xref'), CTD_ANON_287, scope=CTD_ANON_281, location=pyxb.utils.utility.Location('./pubchem.xsd', 4544, 6)))

CTD_ANON_281._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_results'), CTD_ANON_288, scope=CTD_ANON_281, location=pyxb.utils.utility.Location('./pubchem.xsd', 4555, 6)))

CTD_ANON_281._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_pub'), CTD_ANON_289, scope=CTD_ANON_281, location=pyxb.utils.utility.Location('./pubchem.xsd', 4566, 6)))

CTD_ANON_281._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_revision'), pyxb.binding.datatypes.integer, scope=CTD_ANON_281, location=pyxb.utils.utility.Location('./pubchem.xsd', 4574, 6)))

CTD_ANON_281._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_target'), CTD_ANON_290, scope=CTD_ANON_281, location=pyxb.utils.utility.Location('./pubchem.xsd', 4576, 6)))

CTD_ANON_281._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_activity-outcome-method'), CTD_ANON_366, scope=CTD_ANON_281, location=pyxb.utils.utility.Location('./pubchem.xsd', 4583, 6)))

CTD_ANON_281._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_dr'), CTD_ANON_291, scope=CTD_ANON_281, location=pyxb.utils.utility.Location('./pubchem.xsd', 4608, 6)))

CTD_ANON_281._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_substance-type'), CTD_ANON_367, scope=CTD_ANON_281, location=pyxb.utils.utility.Location('./pubchem.xsd', 4616, 6)))

CTD_ANON_281._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_grant-number'), CTD_ANON_292, scope=CTD_ANON_281, location=pyxb.utils.utility.Location('./pubchem.xsd', 4638, 6)))

CTD_ANON_281._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_project-category'), CTD_ANON_368, scope=CTD_ANON_281, location=pyxb.utils.utility.Location('./pubchem.xsd', 4658, 6)))

CTD_ANON_281._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_is-panel'), CTD_ANON_369, scope=CTD_ANON_281, location=pyxb.utils.utility.Location('./pubchem.xsd', 4698, 6)))

CTD_ANON_281._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_assay-group'), CTD_ANON_293, scope=CTD_ANON_281, location=pyxb.utils.utility.Location('./pubchem.xsd', 4722, 6)))

CTD_ANON_281._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_panel-info'), CTD_ANON_294, scope=CTD_ANON_281, location=pyxb.utils.utility.Location('./pubchem.xsd', 4733, 6)))

CTD_ANON_281._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_is-mlp-late-stage'), CTD_ANON_370, scope=CTD_ANON_281, location=pyxb.utils.utility.Location('./pubchem.xsd', 4741, 6)))

CTD_ANON_281._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_categorized-comment'), CTD_ANON_295, scope=CTD_ANON_281, location=pyxb.utils.utility.Location('./pubchem.xsd', 4754, 6)))

def _BuildAutomaton_280 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_280
    del _BuildAutomaton_280
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4507, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4520, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4528, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4536, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4544, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4555, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4566, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4574, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4576, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4583, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4608, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4616, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4638, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4658, 6))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4698, 6))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4722, 6))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4733, 6))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4741, 6))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4754, 6))
    counters.add(cc_18)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_281._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_aid')), pyxb.utils.utility.Location('./pubchem.xsd', 4495, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_281._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_aid-source')), pyxb.utils.utility.Location('./pubchem.xsd', 4507, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_281._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_name')), pyxb.utils.utility.Location('./pubchem.xsd', 4518, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_281._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_description')), pyxb.utils.utility.Location('./pubchem.xsd', 4520, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_281._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_protocol')), pyxb.utils.utility.Location('./pubchem.xsd', 4528, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_281._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_comment')), pyxb.utils.utility.Location('./pubchem.xsd', 4536, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_281._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_xref')), pyxb.utils.utility.Location('./pubchem.xsd', 4544, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_281._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_results')), pyxb.utils.utility.Location('./pubchem.xsd', 4555, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_281._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_pub')), pyxb.utils.utility.Location('./pubchem.xsd', 4566, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_281._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_revision')), pyxb.utils.utility.Location('./pubchem.xsd', 4574, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_281._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_target')), pyxb.utils.utility.Location('./pubchem.xsd', 4576, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_281._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_activity-outcome-method')), pyxb.utils.utility.Location('./pubchem.xsd', 4583, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_281._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_dr')), pyxb.utils.utility.Location('./pubchem.xsd', 4608, 6))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_281._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_substance-type')), pyxb.utils.utility.Location('./pubchem.xsd', 4616, 6))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_281._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_grant-number')), pyxb.utils.utility.Location('./pubchem.xsd', 4638, 6))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_281._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_project-category')), pyxb.utils.utility.Location('./pubchem.xsd', 4658, 6))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_281._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_is-panel')), pyxb.utils.utility.Location('./pubchem.xsd', 4698, 6))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_281._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_assay-group')), pyxb.utils.utility.Location('./pubchem.xsd', 4722, 6))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_281._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_panel-info')), pyxb.utils.utility.Location('./pubchem.xsd', 4733, 6))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_281._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_is-mlp-late-stage')), pyxb.utils.utility.Location('./pubchem.xsd', 4741, 6))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_281._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_categorized-comment')), pyxb.utils.utility.Location('./pubchem.xsd', 4754, 6))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, True) ]))
    st_20._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_281._Automaton = _BuildAutomaton_280()




CTD_ANON_282._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-ID'), CTD_ANON_178, scope=CTD_ANON_282, location=pyxb.utils.utility.Location('./pubchem.xsd', 2461, 0)))

def _BuildAutomaton_281 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_281
    del _BuildAutomaton_281
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_282._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-ID')), pyxb.utils.utility.Location('./pubchem.xsd', 4498, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_282._Automaton = _BuildAutomaton_281()




CTD_ANON_283._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-Source'), CTD_ANON_179, scope=CTD_ANON_283, location=pyxb.utils.utility.Location('./pubchem.xsd', 2479, 0)))

def _BuildAutomaton_282 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_282
    del _BuildAutomaton_282
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_283._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-Source')), pyxb.utils.utility.Location('./pubchem.xsd', 4510, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_283._Automaton = _BuildAutomaton_282()




CTD_ANON_284._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_description_E'), pyxb.binding.datatypes.string, scope=CTD_ANON_284, location=pyxb.utils.utility.Location('./pubchem.xsd', 4523, 12)))

def _BuildAutomaton_283 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_283
    del _BuildAutomaton_283
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4522, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_284._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_description_E')), pyxb.utils.utility.Location('./pubchem.xsd', 4523, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_284._Automaton = _BuildAutomaton_283()




CTD_ANON_285._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_protocol_E'), pyxb.binding.datatypes.string, scope=CTD_ANON_285, location=pyxb.utils.utility.Location('./pubchem.xsd', 4531, 12)))

def _BuildAutomaton_284 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_284
    del _BuildAutomaton_284
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4530, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_285._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_protocol_E')), pyxb.utils.utility.Location('./pubchem.xsd', 4531, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_285._Automaton = _BuildAutomaton_284()




CTD_ANON_286._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_comment_E'), pyxb.binding.datatypes.string, scope=CTD_ANON_286, location=pyxb.utils.utility.Location('./pubchem.xsd', 4539, 12)))

def _BuildAutomaton_285 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_285
    del _BuildAutomaton_285
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4538, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_286._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_comment_E')), pyxb.utils.utility.Location('./pubchem.xsd', 4539, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_286._Automaton = _BuildAutomaton_285()




CTD_ANON_287._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AnnotatedXRef'), CTD_ANON_311, scope=CTD_ANON_287, location=pyxb.utils.utility.Location('./pubchem.xsd', 5006, 0)))

def _BuildAutomaton_286 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_286
    del _BuildAutomaton_286
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4546, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_287._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AnnotatedXRef')), pyxb.utils.utility.Location('./pubchem.xsd', 4547, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_287._Automaton = _BuildAutomaton_286()




CTD_ANON_288._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType'), CTD_ANON_313, scope=CTD_ANON_288, location=pyxb.utils.utility.Location('./pubchem.xsd', 5044, 0)))

def _BuildAutomaton_287 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_287
    del _BuildAutomaton_287
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4557, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_288._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType')), pyxb.utils.utility.Location('./pubchem.xsd', 4558, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_288._Automaton = _BuildAutomaton_287()




CTD_ANON_289._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Pub'), CTD_ANON_125, scope=CTD_ANON_289, location=pyxb.utils.utility.Location('./pubchem.xsd', 1701, 0)))

def _BuildAutomaton_288 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_288
    del _BuildAutomaton_288
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4568, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_289._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Pub')), pyxb.utils.utility.Location('./pubchem.xsd', 4569, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_289._Automaton = _BuildAutomaton_288()




CTD_ANON_290._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayTargetInfo'), CTD_ANON_308, scope=CTD_ANON_290, location=pyxb.utils.utility.Location('./pubchem.xsd', 4949, 0)))

def _BuildAutomaton_289 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_289
    del _BuildAutomaton_289
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4578, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_290._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayTargetInfo')), pyxb.utils.utility.Location('./pubchem.xsd', 4579, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_290._Automaton = _BuildAutomaton_289()




CTD_ANON_291._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDRAttr'), CTD_ANON_307, scope=CTD_ANON_291, location=pyxb.utils.utility.Location('./pubchem.xsd', 4907, 0)))

def _BuildAutomaton_290 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_290
    del _BuildAutomaton_290
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4610, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_291._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDRAttr')), pyxb.utils.utility.Location('./pubchem.xsd', 4611, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_291._Automaton = _BuildAutomaton_290()




CTD_ANON_292._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_grant-number_E'), pyxb.binding.datatypes.string, scope=CTD_ANON_292, location=pyxb.utils.utility.Location('./pubchem.xsd', 4641, 12)))

def _BuildAutomaton_291 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_291
    del _BuildAutomaton_291
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4640, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_292._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_grant-number_E')), pyxb.utils.utility.Location('./pubchem.xsd', 4641, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_292._Automaton = _BuildAutomaton_291()




CTD_ANON_293._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_assay-group_E'), pyxb.binding.datatypes.string, scope=CTD_ANON_293, location=pyxb.utils.utility.Location('./pubchem.xsd', 4725, 12)))

def _BuildAutomaton_292 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_292
    del _BuildAutomaton_292
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4724, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_293._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDescription_assay-group_E')), pyxb.utils.utility.Location('./pubchem.xsd', 4725, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_293._Automaton = _BuildAutomaton_292()




CTD_ANON_294._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanel'), CTD_ANON_296, scope=CTD_ANON_294, location=pyxb.utils.utility.Location('./pubchem.xsd', 4769, 0)))

def _BuildAutomaton_293 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_293
    del _BuildAutomaton_293
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_294._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanel')), pyxb.utils.utility.Location('./pubchem.xsd', 4736, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_294._Automaton = _BuildAutomaton_293()




CTD_ANON_295._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-CategorizedComment'), CTD_ANON_305, scope=CTD_ANON_295, location=pyxb.utils.utility.Location('./pubchem.xsd', 4886, 0)))

def _BuildAutomaton_294 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_294
    del _BuildAutomaton_294
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4756, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_295._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-CategorizedComment')), pyxb.utils.utility.Location('./pubchem.xsd', 4757, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_295._Automaton = _BuildAutomaton_294()




CTD_ANON_296._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanel_name'), pyxb.binding.datatypes.string, scope=CTD_ANON_296, location=pyxb.utils.utility.Location('./pubchem.xsd', 4773, 6)))

CTD_ANON_296._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanel_descr'), pyxb.binding.datatypes.string, scope=CTD_ANON_296, location=pyxb.utils.utility.Location('./pubchem.xsd', 4775, 6)))

CTD_ANON_296._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanel_member'), CTD_ANON_297, scope=CTD_ANON_296, location=pyxb.utils.utility.Location('./pubchem.xsd', 4777, 6)))

def _BuildAutomaton_295 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_295
    del _BuildAutomaton_295
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4775, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4777, 6))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_296._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanel_name')), pyxb.utils.utility.Location('./pubchem.xsd', 4773, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_296._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanel_descr')), pyxb.utils.utility.Location('./pubchem.xsd', 4775, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_296._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanel_member')), pyxb.utils.utility.Location('./pubchem.xsd', 4777, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_296._Automaton = _BuildAutomaton_295()




CTD_ANON_297._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanelMember'), CTD_ANON_298, scope=CTD_ANON_297, location=pyxb.utils.utility.Location('./pubchem.xsd', 4789, 0)))

def _BuildAutomaton_296 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_296
    del _BuildAutomaton_296
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4779, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_297._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanelMember')), pyxb.utils.utility.Location('./pubchem.xsd', 4780, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_297._Automaton = _BuildAutomaton_296()




CTD_ANON_298._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanelMember_mid'), pyxb.binding.datatypes.integer, scope=CTD_ANON_298, location=pyxb.utils.utility.Location('./pubchem.xsd', 4797, 6)))

CTD_ANON_298._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanelMember_name'), pyxb.binding.datatypes.string, scope=CTD_ANON_298, location=pyxb.utils.utility.Location('./pubchem.xsd', 4799, 6)))

CTD_ANON_298._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanelMember_description'), pyxb.binding.datatypes.string, scope=CTD_ANON_298, location=pyxb.utils.utility.Location('./pubchem.xsd', 4804, 6)))

CTD_ANON_298._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanelMember_protocol'), CTD_ANON_299, scope=CTD_ANON_298, location=pyxb.utils.utility.Location('./pubchem.xsd', 4806, 6)))

CTD_ANON_298._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanelMember_comment'), CTD_ANON_300, scope=CTD_ANON_298, location=pyxb.utils.utility.Location('./pubchem.xsd', 4814, 6)))

CTD_ANON_298._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanelMember_target'), CTD_ANON_301, scope=CTD_ANON_298, location=pyxb.utils.utility.Location('./pubchem.xsd', 4822, 6)))

CTD_ANON_298._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanelMember_xref'), CTD_ANON_302, scope=CTD_ANON_298, location=pyxb.utils.utility.Location('./pubchem.xsd', 4830, 6)))

CTD_ANON_298._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanelMember_activity-outcome-method'), CTD_ANON_371, scope=CTD_ANON_298, location=pyxb.utils.utility.Location('./pubchem.xsd', 4837, 6)))

CTD_ANON_298._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanelMember_dr'), CTD_ANON_303, scope=CTD_ANON_298, location=pyxb.utils.utility.Location('./pubchem.xsd', 4862, 6)))

CTD_ANON_298._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanelMember_categorized-comment'), CTD_ANON_304, scope=CTD_ANON_298, location=pyxb.utils.utility.Location('./pubchem.xsd', 4870, 6)))

def _BuildAutomaton_297 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_297
    del _BuildAutomaton_297
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4799, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4804, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4806, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4814, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4822, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4830, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4837, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4862, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4870, 6))
    counters.add(cc_8)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_298._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanelMember_mid')), pyxb.utils.utility.Location('./pubchem.xsd', 4797, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_298._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanelMember_name')), pyxb.utils.utility.Location('./pubchem.xsd', 4799, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_298._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanelMember_description')), pyxb.utils.utility.Location('./pubchem.xsd', 4804, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_298._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanelMember_protocol')), pyxb.utils.utility.Location('./pubchem.xsd', 4806, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_298._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanelMember_comment')), pyxb.utils.utility.Location('./pubchem.xsd', 4814, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_298._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanelMember_target')), pyxb.utils.utility.Location('./pubchem.xsd', 4822, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_298._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanelMember_xref')), pyxb.utils.utility.Location('./pubchem.xsd', 4830, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_298._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanelMember_activity-outcome-method')), pyxb.utils.utility.Location('./pubchem.xsd', 4837, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_298._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanelMember_dr')), pyxb.utils.utility.Location('./pubchem.xsd', 4862, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_298._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanelMember_categorized-comment')), pyxb.utils.utility.Location('./pubchem.xsd', 4870, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_298._Automaton = _BuildAutomaton_297()




CTD_ANON_299._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanelMember_protocol_E'), pyxb.binding.datatypes.string, scope=CTD_ANON_299, location=pyxb.utils.utility.Location('./pubchem.xsd', 4809, 12)))

def _BuildAutomaton_298 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_298
    del _BuildAutomaton_298
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4808, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_299._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanelMember_protocol_E')), pyxb.utils.utility.Location('./pubchem.xsd', 4809, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_299._Automaton = _BuildAutomaton_298()




CTD_ANON_300._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanelMember_comment_E'), pyxb.binding.datatypes.string, scope=CTD_ANON_300, location=pyxb.utils.utility.Location('./pubchem.xsd', 4817, 12)))

def _BuildAutomaton_299 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_299
    del _BuildAutomaton_299
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4816, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_300._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanelMember_comment_E')), pyxb.utils.utility.Location('./pubchem.xsd', 4817, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_300._Automaton = _BuildAutomaton_299()




CTD_ANON_301._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayTargetInfo'), CTD_ANON_308, scope=CTD_ANON_301, location=pyxb.utils.utility.Location('./pubchem.xsd', 4949, 0)))

def _BuildAutomaton_300 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_300
    del _BuildAutomaton_300
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4824, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_301._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayTargetInfo')), pyxb.utils.utility.Location('./pubchem.xsd', 4825, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_301._Automaton = _BuildAutomaton_300()




CTD_ANON_302._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AnnotatedXRef'), CTD_ANON_311, scope=CTD_ANON_302, location=pyxb.utils.utility.Location('./pubchem.xsd', 5006, 0)))

def _BuildAutomaton_301 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_301
    del _BuildAutomaton_301
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4832, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_302._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AnnotatedXRef')), pyxb.utils.utility.Location('./pubchem.xsd', 4833, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_302._Automaton = _BuildAutomaton_301()




CTD_ANON_303._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDRAttr'), CTD_ANON_307, scope=CTD_ANON_303, location=pyxb.utils.utility.Location('./pubchem.xsd', 4907, 0)))

def _BuildAutomaton_302 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_302
    del _BuildAutomaton_302
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4864, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_303._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDRAttr')), pyxb.utils.utility.Location('./pubchem.xsd', 4865, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_303._Automaton = _BuildAutomaton_302()




CTD_ANON_304._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-CategorizedComment'), CTD_ANON_305, scope=CTD_ANON_304, location=pyxb.utils.utility.Location('./pubchem.xsd', 4886, 0)))

def _BuildAutomaton_303 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_303
    del _BuildAutomaton_303
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4872, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_304._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-CategorizedComment')), pyxb.utils.utility.Location('./pubchem.xsd', 4873, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_304._Automaton = _BuildAutomaton_303()




CTD_ANON_305._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-CategorizedComment_title'), pyxb.binding.datatypes.string, scope=CTD_ANON_305, location=pyxb.utils.utility.Location('./pubchem.xsd', 4890, 6)))

CTD_ANON_305._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-CategorizedComment_comment'), CTD_ANON_306, scope=CTD_ANON_305, location=pyxb.utils.utility.Location('./pubchem.xsd', 4892, 6)))

def _BuildAutomaton_304 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_304
    del _BuildAutomaton_304
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_305._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-CategorizedComment_title')), pyxb.utils.utility.Location('./pubchem.xsd', 4890, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_305._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-CategorizedComment_comment')), pyxb.utils.utility.Location('./pubchem.xsd', 4892, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_305._Automaton = _BuildAutomaton_304()




CTD_ANON_306._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-CategorizedComment_comment_E'), pyxb.binding.datatypes.string, scope=CTD_ANON_306, location=pyxb.utils.utility.Location('./pubchem.xsd', 4895, 12)))

def _BuildAutomaton_305 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_305
    del _BuildAutomaton_305
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4894, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_306._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-CategorizedComment_comment_E')), pyxb.utils.utility.Location('./pubchem.xsd', 4895, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_306._Automaton = _BuildAutomaton_305()




CTD_ANON_307._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDRAttr_id'), pyxb.binding.datatypes.integer, scope=CTD_ANON_307, location=pyxb.utils.utility.Location('./pubchem.xsd', 4914, 6)))

CTD_ANON_307._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDRAttr_descr'), pyxb.binding.datatypes.string, scope=CTD_ANON_307, location=pyxb.utils.utility.Location('./pubchem.xsd', 4916, 6)))

CTD_ANON_307._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDRAttr_dn'), pyxb.binding.datatypes.string, scope=CTD_ANON_307, location=pyxb.utils.utility.Location('./pubchem.xsd', 4918, 6)))

CTD_ANON_307._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDRAttr_rn'), pyxb.binding.datatypes.string, scope=CTD_ANON_307, location=pyxb.utils.utility.Location('./pubchem.xsd', 4920, 6)))

CTD_ANON_307._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDRAttr_type'), CTD_ANON_372, scope=CTD_ANON_307, location=pyxb.utils.utility.Location('./pubchem.xsd', 4921, 6)))

def _BuildAutomaton_306 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_306
    del _BuildAutomaton_306
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4916, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4918, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4920, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4921, 6))
    counters.add(cc_3)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_307._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDRAttr_id')), pyxb.utils.utility.Location('./pubchem.xsd', 4914, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_307._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDRAttr_descr')), pyxb.utils.utility.Location('./pubchem.xsd', 4916, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_307._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDRAttr_dn')), pyxb.utils.utility.Location('./pubchem.xsd', 4918, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_307._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDRAttr_rn')), pyxb.utils.utility.Location('./pubchem.xsd', 4920, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_307._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayDRAttr_type')), pyxb.utils.utility.Location('./pubchem.xsd', 4921, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_307._Automaton = _BuildAutomaton_306()




CTD_ANON_308._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayTargetInfo_name'), pyxb.binding.datatypes.string, scope=CTD_ANON_308, location=pyxb.utils.utility.Location('./pubchem.xsd', 4953, 6)))

CTD_ANON_308._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayTargetInfo_mol-id'), pyxb.binding.datatypes.integer, scope=CTD_ANON_308, location=pyxb.utils.utility.Location('./pubchem.xsd', 4955, 6)))

CTD_ANON_308._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayTargetInfo_molecule-type'), CTD_ANON_373, scope=CTD_ANON_308, location=pyxb.utils.utility.Location('./pubchem.xsd', 4956, 6)))

CTD_ANON_308._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayTargetInfo_organism'), CTD_ANON_309, scope=CTD_ANON_308, location=pyxb.utils.utility.Location('./pubchem.xsd', 4984, 6)))

CTD_ANON_308._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayTargetInfo_descr'), pyxb.binding.datatypes.string, scope=CTD_ANON_308, location=pyxb.utils.utility.Location('./pubchem.xsd', 4992, 6)))

CTD_ANON_308._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayTargetInfo_comment'), CTD_ANON_310, scope=CTD_ANON_308, location=pyxb.utils.utility.Location('./pubchem.xsd', 4994, 6)))

def _BuildAutomaton_307 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_307
    del _BuildAutomaton_307
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4956, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4984, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4992, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4994, 6))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_308._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayTargetInfo_name')), pyxb.utils.utility.Location('./pubchem.xsd', 4953, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_308._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayTargetInfo_mol-id')), pyxb.utils.utility.Location('./pubchem.xsd', 4955, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_308._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayTargetInfo_molecule-type')), pyxb.utils.utility.Location('./pubchem.xsd', 4956, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_308._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayTargetInfo_organism')), pyxb.utils.utility.Location('./pubchem.xsd', 4984, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_308._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayTargetInfo_descr')), pyxb.utils.utility.Location('./pubchem.xsd', 4992, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_308._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayTargetInfo_comment')), pyxb.utils.utility.Location('./pubchem.xsd', 4994, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_308._Automaton = _BuildAutomaton_307()




CTD_ANON_309._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BioSource'), CTD_ANON_164, scope=CTD_ANON_309, location=pyxb.utils.utility.Location('./pubchem.xsd', 2161, 0)))

def _BuildAutomaton_308 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_308
    del _BuildAutomaton_308
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_309._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BioSource')), pyxb.utils.utility.Location('./pubchem.xsd', 4987, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_309._Automaton = _BuildAutomaton_308()




CTD_ANON_310._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayTargetInfo_comment_E'), pyxb.binding.datatypes.string, scope=CTD_ANON_310, location=pyxb.utils.utility.Location('./pubchem.xsd', 4997, 12)))

def _BuildAutomaton_309 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_309
    del _BuildAutomaton_309
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 4996, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_310._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayTargetInfo_comment_E')), pyxb.utils.utility.Location('./pubchem.xsd', 4997, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_310._Automaton = _BuildAutomaton_309()




CTD_ANON_311._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AnnotatedXRef_xref'), CTD_ANON_312, scope=CTD_ANON_311, location=pyxb.utils.utility.Location('./pubchem.xsd', 5010, 6)))

CTD_ANON_311._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AnnotatedXRef_comment'), pyxb.binding.datatypes.string, scope=CTD_ANON_311, location=pyxb.utils.utility.Location('./pubchem.xsd', 5018, 6)))

CTD_ANON_311._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AnnotatedXRef_type'), CTD_ANON_374, scope=CTD_ANON_311, location=pyxb.utils.utility.Location('./pubchem.xsd', 5019, 6)))

def _BuildAutomaton_310 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_310
    del _BuildAutomaton_310
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 5018, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 5019, 6))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_311._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AnnotatedXRef_xref')), pyxb.utils.utility.Location('./pubchem.xsd', 5010, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_311._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AnnotatedXRef_comment')), pyxb.utils.utility.Location('./pubchem.xsd', 5018, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_311._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AnnotatedXRef_type')), pyxb.utils.utility.Location('./pubchem.xsd', 5019, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_311._Automaton = _BuildAutomaton_310()




CTD_ANON_312._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData'), CTD_ANON_189, scope=CTD_ANON_312, location=pyxb.utils.utility.Location('./pubchem.xsd', 2587, 0)))

def _BuildAutomaton_311 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_311
    del _BuildAutomaton_311
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_312._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-XRefData')), pyxb.utils.utility.Location('./pubchem.xsd', 5013, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_312._Automaton = _BuildAutomaton_311()




CTD_ANON_313._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_tid'), pyxb.binding.datatypes.integer, scope=CTD_ANON_313, location=pyxb.utils.utility.Location('./pubchem.xsd', 5051, 6)))

CTD_ANON_313._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_name'), pyxb.binding.datatypes.string, scope=CTD_ANON_313, location=pyxb.utils.utility.Location('./pubchem.xsd', 5053, 6)))

CTD_ANON_313._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_description'), CTD_ANON_314, scope=CTD_ANON_313, location=pyxb.utils.utility.Location('./pubchem.xsd', 5055, 6)))

CTD_ANON_313._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_type'), CTD_ANON_375, scope=CTD_ANON_313, location=pyxb.utils.utility.Location('./pubchem.xsd', 5062, 6)))

CTD_ANON_313._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_constraints'), CTD_ANON_315, scope=CTD_ANON_313, location=pyxb.utils.utility.Location('./pubchem.xsd', 5080, 6)))

CTD_ANON_313._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_unit'), CTD_ANON_376, scope=CTD_ANON_313, location=pyxb.utils.utility.Location('./pubchem.xsd', 5140, 6)))

CTD_ANON_313._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_sunit'), pyxb.binding.datatypes.string, scope=CTD_ANON_313, location=pyxb.utils.utility.Location('./pubchem.xsd', 5217, 6)))

CTD_ANON_313._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_transform'), CTD_ANON_377, scope=CTD_ANON_313, location=pyxb.utils.utility.Location('./pubchem.xsd', 5218, 6)))

CTD_ANON_313._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_stransform'), pyxb.binding.datatypes.string, scope=CTD_ANON_313, location=pyxb.utils.utility.Location('./pubchem.xsd', 5253, 6)))

CTD_ANON_313._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_tc'), CTD_ANON_321, scope=CTD_ANON_313, location=pyxb.utils.utility.Location('./pubchem.xsd', 5255, 6)))

CTD_ANON_313._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_ac'), CTD_ANON_378, scope=CTD_ANON_313, location=pyxb.utils.utility.Location('./pubchem.xsd', 5271, 6)))

CTD_ANON_313._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_panel-info'), CTD_ANON_322, scope=CTD_ANON_313, location=pyxb.utils.utility.Location('./pubchem.xsd', 5288, 6)))

CTD_ANON_313._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_annot'), CTD_ANON_379, scope=CTD_ANON_313, location=pyxb.utils.utility.Location('./pubchem.xsd', 5303, 6)))

def _BuildAutomaton_312 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_312
    del _BuildAutomaton_312
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 5055, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 5080, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 5140, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 5217, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 5218, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 5253, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 5255, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 5271, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 5288, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 5303, 6))
    counters.add(cc_9)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_313._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_tid')), pyxb.utils.utility.Location('./pubchem.xsd', 5051, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_313._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_name')), pyxb.utils.utility.Location('./pubchem.xsd', 5053, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_313._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_description')), pyxb.utils.utility.Location('./pubchem.xsd', 5055, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_313._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_type')), pyxb.utils.utility.Location('./pubchem.xsd', 5062, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_313._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_constraints')), pyxb.utils.utility.Location('./pubchem.xsd', 5080, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_313._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_unit')), pyxb.utils.utility.Location('./pubchem.xsd', 5140, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_313._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_sunit')), pyxb.utils.utility.Location('./pubchem.xsd', 5217, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_313._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_transform')), pyxb.utils.utility.Location('./pubchem.xsd', 5218, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_313._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_stransform')), pyxb.utils.utility.Location('./pubchem.xsd', 5253, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_313._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_tc')), pyxb.utils.utility.Location('./pubchem.xsd', 5255, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_313._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_ac')), pyxb.utils.utility.Location('./pubchem.xsd', 5271, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_313._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_panel-info')), pyxb.utils.utility.Location('./pubchem.xsd', 5288, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_313._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_annot')), pyxb.utils.utility.Location('./pubchem.xsd', 5303, 6))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_12._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_313._Automaton = _BuildAutomaton_312()




CTD_ANON_314._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_description_E'), pyxb.binding.datatypes.string, scope=CTD_ANON_314, location=pyxb.utils.utility.Location('./pubchem.xsd', 5058, 12)))

def _BuildAutomaton_313 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_313
    del _BuildAutomaton_313
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 5057, 10))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_314._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_description_E')), pyxb.utils.utility.Location('./pubchem.xsd', 5058, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_314._Automaton = _BuildAutomaton_313()




CTD_ANON_315._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_constraints_fset'), CTD_ANON_316, scope=CTD_ANON_315, location=pyxb.utils.utility.Location('./pubchem.xsd', 5084, 12)))

CTD_ANON_315._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_constraints_fmin'), pyxb.binding.datatypes.double, scope=CTD_ANON_315, location=pyxb.utils.utility.Location('./pubchem.xsd', 5092, 12)))

CTD_ANON_315._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_constraints_fmax'), pyxb.binding.datatypes.double, scope=CTD_ANON_315, location=pyxb.utils.utility.Location('./pubchem.xsd', 5094, 12)))

CTD_ANON_315._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_constraints_frange'), CTD_ANON_317, scope=CTD_ANON_315, location=pyxb.utils.utility.Location('./pubchem.xsd', 5096, 12)))

CTD_ANON_315._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_constraints_iset'), CTD_ANON_318, scope=CTD_ANON_315, location=pyxb.utils.utility.Location('./pubchem.xsd', 5107, 12)))

CTD_ANON_315._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_constraints_imin'), pyxb.binding.datatypes.integer, scope=CTD_ANON_315, location=pyxb.utils.utility.Location('./pubchem.xsd', 5115, 12)))

CTD_ANON_315._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_constraints_imax'), pyxb.binding.datatypes.integer, scope=CTD_ANON_315, location=pyxb.utils.utility.Location('./pubchem.xsd', 5117, 12)))

CTD_ANON_315._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_constraints_irange'), CTD_ANON_319, scope=CTD_ANON_315, location=pyxb.utils.utility.Location('./pubchem.xsd', 5119, 12)))

CTD_ANON_315._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_constraints_sset'), CTD_ANON_320, scope=CTD_ANON_315, location=pyxb.utils.utility.Location('./pubchem.xsd', 5130, 12)))

def _BuildAutomaton_314 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_314
    del _BuildAutomaton_314
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_315._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_constraints_fset')), pyxb.utils.utility.Location('./pubchem.xsd', 5084, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_315._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_constraints_fmin')), pyxb.utils.utility.Location('./pubchem.xsd', 5092, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_315._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_constraints_fmax')), pyxb.utils.utility.Location('./pubchem.xsd', 5094, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_315._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_constraints_frange')), pyxb.utils.utility.Location('./pubchem.xsd', 5096, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_315._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_constraints_iset')), pyxb.utils.utility.Location('./pubchem.xsd', 5107, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_315._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_constraints_imin')), pyxb.utils.utility.Location('./pubchem.xsd', 5115, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_315._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_constraints_imax')), pyxb.utils.utility.Location('./pubchem.xsd', 5117, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_315._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_constraints_irange')), pyxb.utils.utility.Location('./pubchem.xsd', 5119, 12))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_315._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_constraints_sset')), pyxb.utils.utility.Location('./pubchem.xsd', 5130, 12))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_315._Automaton = _BuildAutomaton_314()




CTD_ANON_316._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_constraints_fset_E'), pyxb.binding.datatypes.double, scope=CTD_ANON_316, location=pyxb.utils.utility.Location('./pubchem.xsd', 5087, 18)))

def _BuildAutomaton_315 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_315
    del _BuildAutomaton_315
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 5086, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_316._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_constraints_fset_E')), pyxb.utils.utility.Location('./pubchem.xsd', 5087, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_316._Automaton = _BuildAutomaton_315()




CTD_ANON_317._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-RealMinMax'), CTD_ANON_326, scope=CTD_ANON_317, location=pyxb.utils.utility.Location('./pubchem.xsd', 5445, 0)))

def _BuildAutomaton_316 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_316
    del _BuildAutomaton_316
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_317._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-RealMinMax')), pyxb.utils.utility.Location('./pubchem.xsd', 5099, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_317._Automaton = _BuildAutomaton_316()




CTD_ANON_318._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_constraints_iset_E'), pyxb.binding.datatypes.integer, scope=CTD_ANON_318, location=pyxb.utils.utility.Location('./pubchem.xsd', 5110, 18)))

def _BuildAutomaton_317 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_317
    del _BuildAutomaton_317
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 5109, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_318._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_constraints_iset_E')), pyxb.utils.utility.Location('./pubchem.xsd', 5110, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_318._Automaton = _BuildAutomaton_317()




CTD_ANON_319._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-IntegerMinMax'), CTD_ANON_325, scope=CTD_ANON_319, location=pyxb.utils.utility.Location('./pubchem.xsd', 5433, 0)))

def _BuildAutomaton_318 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_318
    del _BuildAutomaton_318
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_319._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-IntegerMinMax')), pyxb.utils.utility.Location('./pubchem.xsd', 5122, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_319._Automaton = _BuildAutomaton_318()




CTD_ANON_320._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_constraints_sset_E'), pyxb.binding.datatypes.string, scope=CTD_ANON_320, location=pyxb.utils.utility.Location('./pubchem.xsd', 5133, 18)))

def _BuildAutomaton_319 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_319
    del _BuildAutomaton_319
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 5132, 16))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_320._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-ResultType_constraints_sset_E')), pyxb.utils.utility.Location('./pubchem.xsd', 5133, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_320._Automaton = _BuildAutomaton_319()




CTD_ANON_321._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-ConcentrationAttr'), CTD_ANON_324, scope=CTD_ANON_321, location=pyxb.utils.utility.Location('./pubchem.xsd', 5404, 0)))

def _BuildAutomaton_320 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_320
    del _BuildAutomaton_320
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_321._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-ConcentrationAttr')), pyxb.utils.utility.Location('./pubchem.xsd', 5258, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_321._Automaton = _BuildAutomaton_320()




CTD_ANON_322._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanelTestResult'), CTD_ANON_323, scope=CTD_ANON_322, location=pyxb.utils.utility.Location('./pubchem.xsd', 5363, 0)))

def _BuildAutomaton_321 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_321
    del _BuildAutomaton_321
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_322._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanelTestResult')), pyxb.utils.utility.Location('./pubchem.xsd', 5291, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_322._Automaton = _BuildAutomaton_321()




CTD_ANON_323._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanelTestResult_mid'), pyxb.binding.datatypes.integer, scope=CTD_ANON_323, location=pyxb.utils.utility.Location('./pubchem.xsd', 5370, 6)))

CTD_ANON_323._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanelTestResult_readout-annot'), CTD_ANON_380, scope=CTD_ANON_323, location=pyxb.utils.utility.Location('./pubchem.xsd', 5371, 6)))

def _BuildAutomaton_322 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_322
    del _BuildAutomaton_322
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 5371, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_323._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanelTestResult_mid')), pyxb.utils.utility.Location('./pubchem.xsd', 5370, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_323._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-AssayPanelTestResult_readout-annot')), pyxb.utils.utility.Location('./pubchem.xsd', 5371, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_323._Automaton = _BuildAutomaton_322()




CTD_ANON_324._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-ConcentrationAttr_concentration'), pyxb.binding.datatypes.double, scope=CTD_ANON_324, location=pyxb.utils.utility.Location('./pubchem.xsd', 5407, 6)))

CTD_ANON_324._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-ConcentrationAttr_unit'), CTD_ANON_381, scope=CTD_ANON_324, location=pyxb.utils.utility.Location('./pubchem.xsd', 5408, 6)))

CTD_ANON_324._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-ConcentrationAttr_dr-id'), pyxb.binding.datatypes.integer, scope=CTD_ANON_324, location=pyxb.utils.utility.Location('./pubchem.xsd', 5427, 6)))

def _BuildAutomaton_323 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_323
    del _BuildAutomaton_323
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('./pubchem.xsd', 5427, 6))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_324._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-ConcentrationAttr_concentration')), pyxb.utils.utility.Location('./pubchem.xsd', 5407, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_324._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-ConcentrationAttr_unit')), pyxb.utils.utility.Location('./pubchem.xsd', 5408, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_324._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-ConcentrationAttr_dr-id')), pyxb.utils.utility.Location('./pubchem.xsd', 5427, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_324._Automaton = _BuildAutomaton_323()




CTD_ANON_325._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-IntegerMinMax_min'), pyxb.binding.datatypes.integer, scope=CTD_ANON_325, location=pyxb.utils.utility.Location('./pubchem.xsd', 5437, 6)))

CTD_ANON_325._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-IntegerMinMax_max'), pyxb.binding.datatypes.integer, scope=CTD_ANON_325, location=pyxb.utils.utility.Location('./pubchem.xsd', 5439, 6)))

def _BuildAutomaton_324 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_324
    del _BuildAutomaton_324
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_325._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-IntegerMinMax_min')), pyxb.utils.utility.Location('./pubchem.xsd', 5437, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_325._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-IntegerMinMax_max')), pyxb.utils.utility.Location('./pubchem.xsd', 5439, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_325._Automaton = _BuildAutomaton_324()




CTD_ANON_326._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-RealMinMax_min'), pyxb.binding.datatypes.double, scope=CTD_ANON_326, location=pyxb.utils.utility.Location('./pubchem.xsd', 5449, 6)))

CTD_ANON_326._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PC-RealMinMax_max'), pyxb.binding.datatypes.double, scope=CTD_ANON_326, location=pyxb.utils.utility.Location('./pubchem.xsd', 5451, 6)))

def _BuildAutomaton_325 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_325
    del _BuildAutomaton_325
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_326._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-RealMinMax_min')), pyxb.utils.utility.Location('./pubchem.xsd', 5449, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_326._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PC-RealMinMax_max')), pyxb.utils.utility.Location('./pubchem.xsd', 5451, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_326._Automaton = _BuildAutomaton_325()

